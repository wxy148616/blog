<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>nginx配置https</title>
      <link href="/2019/06/06/https-config/"/>
      <url>/2019/06/06/https-config/</url>
      
        <content type="html"><![CDATA[<ul><li>首先修改原来的nginx配置，<b>nginx配置不会的看&gt;&gt;<a href="https://www.wxy.email/2019/01/26/nginx%E5%AE%89%E8%A3%85%E9%85%8D%E7%BD%AE/">这里</a></b></li></ul><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">server &#123;</span><br><span class="line">     listen 80;</span><br><span class="line">     # 添加</span><br><span class="line">     listen 443 ssl;</span><br><span class="line">     server_name www.wxy.email wxy.email;</span><br><span class="line">     </span><br><span class="line">     # 添加ssl证书配置</span><br><span class="line">     # ssl on;</span><br><span class="line">     ssl_certificate /home/lls/wxy.email.crt; </span><br><span class="line">     ssl_certificate_key /home/lls/wxy.email.key;</span><br><span class="line">     ssl_session_timeout 5m;</span><br><span class="line">     </span><br><span class="line">     </span><br><span class="line">     charset utf-8;</span><br><span class="line">     location / &#123;</span><br><span class="line">             root /home/blog/blog;</span><br><span class="line">             index index.html;</span><br><span class="line">     &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>kill杀死nginx进程，重启</li></ul><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">kill -9 pid</span><br><span class="line">service nginx start</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 项目部署 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 项目部署 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Python写入InfluxDB</title>
      <link href="/2019/06/04/influxdb/"/>
      <url>/2019/06/04/influxdb/</url>
      
        <content type="html"><![CDATA[<blockquote><p>InfluxDB是一个开源的时序数据库，使用GO语言开发，特别适合用于处理和分析资源监控数据这种时序相关数据。而InfluxDB自带的各种特殊函数如求标准差，随机取样数据，统计数据变化比等，使数据统计和实时分析变得十分方便。</p></blockquote><h2 id="安装"><a href="#安装" class="headerlink" title="安装"></a><b>安装</b></h2><ul><li>数据库安装<br>根据不同的系统安装方式不太一样, 具体参考<a href="https://docs.influxdata.com/influxdb/v1.7/introduction/installation/" rel="external nofollow noopener noreferrer" target="_blank">官网</a>, 这个官网提供的挺详细的。<br><b>如果有指定版本的requests, 注意一下requests版本, influxdb不支持旧版的requests库, 版本不支持安装时会有提示。</b></li><li>Python安装操作库</li></ul><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">python3 -m pip install influxdb</span><br><span class="line"></span><br><span class="line">pip install --upgrade influxdb             # 升级</span><br><span class="line">pip uninstall influxdb       # 卸载</span><br></pre></td></tr></table></figure><h2 id="使用准备"><a href="#使用准备" class="headerlink" title="使用准备"></a><b>使用准备</b></h2><ul><li>操作准备<br>需要先创建数据库，可以使用命令行进行创建</li></ul><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">create database database_name;</span><br></pre></td></tr></table></figure><p>也可以使用python命令直接创建</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> influxdb <span class="keyword">import</span> InfluxDBClient</span><br><span class="line"><span class="comment"># 首先连接influxdb</span></span><br><span class="line">client = InfluxDBClient(host=<span class="string">'服务器IP'</span>, port=<span class="number">8086</span>, username=<span class="string">'myuser'</span>, password=<span class="string">'mypass'</span> ssl=<span class="literal">True</span>, verify_ssl=<span class="literal">True</span>)</span><br><span class="line"><span class="comment"># 创建数据库</span></span><br><span class="line">client.create_database(<span class="string">'database_name'</span>)   </span><br><span class="line"><span class="comment"># 查询数据库</span></span><br><span class="line">client.get_list_database()</span><br></pre></td></tr></table></figure><h2 id="操作"><a href="#操作" class="headerlink" title="操作"></a><b>操作</b></h2><ul><li>连接数据库</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> influxdb <span class="keyword">import</span> InfluxDBClient</span><br><span class="line">client = InfluxDBClient(<span class="string">'服务器IP'</span>, <span class="string">'8086'</span>, <span class="string">'myuser'</span>, <span class="string">'mypass'</span>, <span class="string">'database_name'</span>)</span><br></pre></td></tr></table></figure><ul><li>写入数据<br>InfluxDB的每条数据可以看成一个json数据（其实写入的时候就是个json数据），每条数据中包含了’measurement’，’time’，’tags’，’fields’</li></ul><table><thead><tr><th>属性</th><th>含义</th></tr></thead><tbody><tr><td>measurement</td><td>相当于数据库中的表</td></tr><tr><td>time</td><td>数据的记录时间，是数据的主索引</td></tr><tr><td>tags</td><td>一个有索引的值</td></tr><tr><td>fields</td><td>没有索引的值</td></tr></tbody></table><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">w_json = [&#123;</span><br><span class="line">    <span class="string">"measurement"</span>: <span class="string">'table_name'</span>,</span><br><span class="line">    <span class="string">"time"</span>: now_time,</span><br><span class="line">    <span class="string">"tags"</span>: &#123;</span><br><span class="line">        <span class="string">'name'</span>: <span class="string">'名字'</span>,</span><br><span class="line">        <span class="string">'categories'</span>: <span class="string">'类型'</span></span><br><span class="line">        &#125;,</span><br><span class="line">    <span class="string">"fields"</span>: &#123;</span><br><span class="line">        <span class="string">'price'</span>: <span class="string">"价格"</span>,</span><br><span class="line">        <span class="string">'unit'</span>: <span class="string">"单位"</span>,</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;]</span><br><span class="line">写入数据库</span><br><span class="line">client.write_points(w_json)</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> Python </category>
          
      </categories>
      
      
        <tags>
            
            <tag> python </tag>
            
            <tag> InfluxDB </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>from lxml import etree</title>
      <link href="/2019/06/04/ElementTree-tostring/"/>
      <url>/2019/06/04/ElementTree-tostring/</url>
      
        <content type="html"><![CDATA[<p>写一个小型的爬虫懒得用scrapy(主要是scrapy不太好装…)，直接使用了requests请求，但是要解析数据，那么问题来了</p><hr><h2 id="问题1："><a href="#问题1：" class="headerlink" title="问题1："></a><b>问题1：</b></h2><ul><li>使用的是python3.7的环境，解析数据要用xpath，系统是mac</li></ul><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pip install lxml</span><br></pre></td></tr></table></figure><p>一分钟后。。。下载成功</p><ul><li>开始写代码，</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> lxml <span class="keyword">import</span> etree</span><br></pre></td></tr></table></figure><p>挂了…，lxml中竟然没有etree模块  </p><ul><li>换个方法  </li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> lxml <span class="keyword">import</span> html</span><br><span class="line">et = html.etree</span><br></pre></td></tr></table></figure><p>依然挂了…</p><h2 id="解决："><a href="#解决：" class="headerlink" title="解决："></a><b>解决：</b></h2><ul><li>开始找解决办法<br>百度中。。。，找了一堆的方法，全部失败<br>google中。。。，又找了一堆的方法，全部失败<br>即将放弃，准备切换python版本，开始水群。。。，群里大佬给了个<a href="https://mirrors.aliyun.com/pypi/simple/" rel="external nofollow noopener noreferrer" target="_blank">阿里源</a>的地址，恍然大悟！！！</li></ul><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pip install -i https://mirrors.aliyun.com/pypi/simple/ lxml</span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> lxml <span class="keyword">import</span> html</span><br><span class="line">et = html.etree</span><br><span class="line">print(et.HTML(response.content))</span><br></pre></td></tr></table></figure><p>终于突破了这个问题</p><h2 id="问题2："><a href="#问题2：" class="headerlink" title="问题2："></a><b>问题2：</b></h2><ul><li>解析过后发现有些需要整个代码块转为字符串</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> xml.etree.ElementTree <span class="keyword">as</span> ET</span><br><span class="line">print(ET.tostring(dom代码块, encoding=<span class="string">'utf8'</span>))</span><br></pre></td></tr></table></figure><ul><li>数据是有了，但是不太对，中文出来的是十六进制的数据，没法继续了啊<br>百度/Google，我又来了。。。</li></ul><h2 id="解决：-1"><a href="#解决：-1" class="headerlink" title="解决："></a><b>解决：</b></h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">print(str(ET.tostring(dom代码块, encoding=<span class="string">'utf8'</span>), <span class="string">'utf-8'</span>))</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> Python </category>
          
      </categories>
      
      
        <tags>
            
            <tag> python </tag>
            
            <tag> 爬虫 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>阿里云抢占式服务器一小时</title>
      <link href="/2019/06/02/aliyun/"/>
      <url>/2019/06/02/aliyun/</url>
      
        <content type="html"><![CDATA[<p>IP: <code>47.106.250.36</code><br>username: <code>shiguangbuxieboke</code><br>密码: <code>Shiguangbuxieboke123</code><br>释放时间: <code>2019-06-02 12:50:00</code></p><p>登录示例: <code>ssh shiguangbuxieboke@47.106.250.36</code></p>]]></content>
      
      
      <categories>
          
          <category> 福利 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 阿里云 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>JetBrains系列汉化补丁</title>
      <link href="/2019/06/02/JetBrains/"/>
      <url>/2019/06/02/JetBrains/</url>
      
        <content type="html"><![CDATA[<ul><li>GitHub上的一个项目，操作起来超级简单，汉化的也算是很全面了</li></ul><ul><li>下载链接：<a href="https://github.com/pingfangx/jetbrains-in-chinese" rel="external nofollow noopener noreferrer" target="_blank">https://github.com/pingfangx/jetbrains-in-chinese</a> </li></ul><p>原文链接：<a href="https://github.com/pingfangx/TranslatorX" rel="external nofollow noopener noreferrer" target="_blank">https://github.com/pingfangx/TranslatorX</a></p>]]></content>
      
      
      <categories>
          
          <category> 资源 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> IDE </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Python视频教程</title>
      <link href="/2019/05/30/%E8%B5%84%E6%BA%90/"/>
      <url>/2019/05/30/%E8%B5%84%E6%BA%90/</url>
      
        <content type="html"><![CDATA[<h2 id="Python-编程教程36集"><a href="#Python-编程教程36集" class="headerlink" title="Python 编程教程36集"></a>Python 编程教程36集</h2><p>链接: <a href="https://pan.baidu.com/s/1aQ3IfLTKxnuA7otUtX4sfA" rel="external nofollow noopener noreferrer" target="_blank">https://pan.baidu.com/s/1aQ3IfLTKxnuA7otUtX4sfA</a><br>提取码: vtrc</p>]]></content>
      
      
      <categories>
          
          <category> 资源 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 学习 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>LeetCode第20题：Valid Parentheses</title>
      <link href="/2019/05/29/LeetCode-20/"/>
      <url>/2019/05/29/LeetCode-20/</url>
      
        <content type="html"><![CDATA[<h2 id="题目"><a href="#题目" class="headerlink" title="题目"></a><b>题目</b></h2><blockquote><p>给定一个只包括 ‘(‘，’)’，’{‘，’}’，’[‘，’]’ 的字符串，判断字符串是否有效。<br>有效字符串需满足：<br>1、左括号必须用相同类型的右括号闭合。<br>2、左括号必须以正确的顺序闭合。<br>3、注意空字符串可被认为是有效字符串。</p></blockquote><ul><li><strong>示例1</strong>:</li></ul><p><em>输入:</em> <code>&quot;()&quot;</code><br><em>输出:</em> <code>true</code>  </p><ul><li><strong>示例2</strong>:</li></ul><p><em>输入:</em> <code>&quot;()[]{}&quot;</code><br><em>输出:</em> <code>true</code>  </p><ul><li><strong>示例3</strong>:</li></ul><p><em>输入:</em> <code>&quot;(]&quot;</code><br><em>输出:</em> <code>false</code>  </p><ul><li><strong>示例4</strong>:</li></ul><p><em>输入:</em> <code>&quot;([)]&quot;</code><br><em>输出:</em> <code>false</code> </p><ul><li><strong>示例5</strong>:</li></ul><p><em>输入:</em> <code>&quot;{[]}&quot;</code><br><em>输出:</em> <code>true</code> </p><h2 id="代码"><a href="#代码" class="headerlink" title="代码"></a><b>代码</b></h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span><span class="params">(object)</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">isValid</span><span class="params">(self, s)</span>:</span></span><br><span class="line">        <span class="string">"""</span></span><br><span class="line"><span class="string">        :type s: str</span></span><br><span class="line"><span class="string">        :rtype: bool</span></span><br><span class="line"><span class="string">        """</span></span><br><span class="line">        stack = []</span><br><span class="line">        dict = &#123;<span class="string">"]"</span>:<span class="string">"["</span>, <span class="string">"&#125;"</span>:<span class="string">"&#123;"</span>, <span class="string">")"</span>:<span class="string">"("</span>&#125;</span><br><span class="line">        <span class="keyword">for</span> char <span class="keyword">in</span> s:</span><br><span class="line">            <span class="keyword">if</span> char <span class="keyword">in</span> dict.values():</span><br><span class="line">                stack.append(char)</span><br><span class="line">            <span class="keyword">elif</span> char <span class="keyword">in</span> dict.keys():</span><br><span class="line">                <span class="keyword">if</span> stack == [] <span class="keyword">or</span> dict[char] != stack.pop():</span><br><span class="line">                    <span class="keyword">return</span> <span class="literal">False</span></span><br><span class="line">            <span class="keyword">else</span>:</span><br><span class="line">                <span class="keyword">return</span> <span class="literal">False</span></span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">not</span> stack</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> LeetCode </category>
          
      </categories>
      
      
        <tags>
            
            <tag> LeetCode </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>selenium+PhantomJS+IP代理</title>
      <link href="/2019/05/28/selenium/"/>
      <url>/2019/05/28/selenium/</url>
      
        <content type="html"><![CDATA[<h2 id="首先安装selenium、PhantomJS"><a href="#首先安装selenium、PhantomJS" class="headerlink" title="首先安装selenium、PhantomJS"></a><b>首先安装selenium、PhantomJS</b></h2><ul><li>selenium安装</li></ul><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pip install selenium</span><br></pre></td></tr></table></figure><ul><li>PhantomJS安装</li></ul><p>这个需要手动的到<a href="http://phantomjs.org/download.html" rel="external nofollow noopener noreferrer" target="_blank">官网</a>下载</p><h2 id="开始使用"><a href="#开始使用" class="headerlink" title="开始使用"></a><b>开始使用</b></h2><ul><li>导入需要的包</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> random</span><br><span class="line"><span class="keyword">from</span> selenium <span class="keyword">import</span> webdriver</span><br><span class="line"><span class="keyword">from</span> selenium.webdriver.common.proxy <span class="keyword">import</span> ProxyType</span><br><span class="line"><span class="comment"># 调用键盘按键操作</span></span><br><span class="line"><span class="keyword">from</span> selenium.webdriver.common.keys <span class="keyword">import</span> Keys</span><br><span class="line"><span class="comment"># 调用鼠标操作</span></span><br><span class="line"><span class="keyword">from</span> selenium.webdriver <span class="keyword">import</span> ActionChains</span><br><span class="line"><span class="comment"># 设置请求头</span></span><br><span class="line"><span class="keyword">from</span> selenium.webdriver.common.desired_capabilities <span class="keyword">import</span> DesiredCapabilities</span><br></pre></td></tr></table></figure><ul><li>操作PhantomJS</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br></pre></td><td class="code"><pre><span class="line">desired_cap = DesiredCapabilities.PHANTOMJS.copy()</span><br><span class="line"><span class="comment"># 设置请求头</span></span><br><span class="line">desired_cap[<span class="string">'phantomjs.page.settings.User-Agent'</span>] = <span class="string">'user_agent...'</span></span><br><span class="line"><span class="comment"># 配置代理IP</span></span><br><span class="line">proxy = [</span><br><span class="line">    <span class="string">'--proxy=%s'</span> % <span class="string">"139.199.38.177:8118"</span>,  <span class="comment"># 设置的代理ip</span></span><br><span class="line">    <span class="string">'--proxy-type=http'</span>,  <span class="comment"># 代理类型</span></span><br><span class="line">    <span class="string">'--ignore-ssl-errors=true'</span>,</span><br><span class="line">    ]</span><br><span class="line"><span class="comment"># 启动PhantomJS</span></span><br><span class="line">driver = webdriver.PhantomJS(executable_path=<span class="string">"./phantomjs-2.1.1-linux-x86_64/bin/phantomjs"</span>,</span><br><span class="line">                                 desired_capabilities=desired_cap,</span><br><span class="line">                                 service_args=proxy)</span><br><span class="line"><span class="comment"># 设置屏幕大小</span></span><br><span class="line">driver.set_window_size(<span class="number">800</span>, <span class="number">600</span>)</span><br><span class="line"><span class="comment"># 请求网页</span></span><br><span class="line">driver.get(<span class="string">"http://www.baidu.com/"</span>)</span><br><span class="line"><span class="comment"># 根据html元素的id找到搜索框，并且输入要搜索的内容</span></span><br><span class="line">driver.find_element_by_id(<span class="string">'kw'</span>).send_keys(<span class="string">"时光不写博客"</span>)</span><br><span class="line"><span class="comment"># 查到搜索按钮，并且点击搜索</span></span><br><span class="line">random.choice([</span><br><span class="line">            <span class="comment"># 使用鼠标点击操作</span></span><br><span class="line">            driver.find_element_by_id(<span class="string">'su'</span>).click(),</span><br><span class="line">            <span class="comment"># 使用键盘回车操作</span></span><br><span class="line">            driver.find_element_by_id(<span class="string">'su'</span>).send_keys(Keys.RETURN)</span><br><span class="line">            ])</span><br><span class="line"><span class="comment"># 截屏</span></span><br><span class="line">driver.save_screenshot(<span class="string">'baidu.png'</span>)</span><br><span class="line"><span class="comment"># 使用xpath查到标签，并且点击</span></span><br><span class="line">driver.find_elements_by_xpath(<span class="string">"//div[@id=%s]/h3/a"</span> % <span class="number">2</span>)[<span class="number">0</span>].click()</span><br><span class="line"><span class="comment"># 拿到当前浏览器的最后一个tab，这是一个列表的形式</span></span><br><span class="line">tab = driver.window_handles[<span class="number">-1</span>]</span><br><span class="line"><span class="comment"># 切换到刚刚点击的页面</span></span><br><span class="line">driver.switch_to_window(tab)</span><br><span class="line">driver.save_screenshot(<span class="string">'blog.png'</span>)</span><br><span class="line"><span class="comment"># 根据标签名查到要点击的数据</span></span><br><span class="line">title = driver.find_element_by_tag_name(<span class="string">"title"</span>)</span><br><span class="line"><span class="comment"># 移动鼠标到title的位置，并且点击</span></span><br><span class="line">ActionChains(driver).move_to_element(title).click(title).perform()</span><br><span class="line"><span class="comment"># 刷新页面</span></span><br><span class="line">driver.refresh()</span><br><span class="line"><span class="comment"># 打印页面源码</span></span><br><span class="line">driver.page_source</span><br><span class="line">title = driver.find_elements_by_xpath(<span class="string">"//a[@href='/.']"</span>)[<span class="number">0</span>]</span><br><span class="line"><span class="comment"># 移动到title下10像素位置，并且双点击</span></span><br><span class="line">ActionChains(driver).move_to_element_with_offset(title, <span class="number">0</span>, <span class="number">10</span>).double_click().perform()</span><br><span class="line"><span class="comment"># 退出</span></span><br><span class="line">driver.quit()</span><br></pre></td></tr></table></figure><ul><li>具体操作命令</li></ul><table><thead><tr><th>命令</th><th>说明</th></tr></thead><tbody><tr><td>click(on_element=None)</td><td>单击鼠标左键</td></tr><tr><td><code>context_click(on_element=None)</code></td><td><code>点击鼠标右键</code></td></tr><tr><td>double_click(on_element=None)</td><td>双击鼠标左键</td></tr><tr><td><code>click_and_hold(on_element=None)</code></td><td><code>点击鼠标左键，不松开</code></td></tr><tr><td>drag_and_drop(source, target)</td><td>拖拽到某个元素然后松开</td></tr><tr><td><code>drag_and_drop_by_offset(source, xoffset, yoffset)</code></td><td><code>拖拽到某个坐标然后松开</code></td></tr><tr><td>key_down(value, element=None)</td><td>按下某个键盘上的键</td></tr><tr><td><code>key_up(value, element=None)</code></td><td><code>松开某个键</code></td></tr><tr><td>move_by_offset(xoffset, yoffset)</td><td>鼠标从当前位置移动到某个坐标</td></tr><tr><td><code>move_to_element(to_element)</code></td><td><code>鼠标移动到某个元素</code></td></tr><tr><td>move_to_element_with_offset(to_element, xoffset, yoffset)</td><td>移动到距某个元素（左上角坐标）多少距离的位置</td></tr><tr><td><code>perform()</code></td><td><code>执行链中的所有动作</code></td></tr><tr><td>release(on_element=None)</td><td>在某个元素位置松开鼠标左键</td></tr><tr><td><code>send_keys(*keys_to_send)</code></td><td><code>发送某个键到当前焦点的元素</code></td></tr><tr><td>send_keys_to_element(element, *keys_to_send)</td><td>发送某个键到指定元素</td></tr></tbody></table>]]></content>
      
      
      <categories>
          
          <category> Python </category>
          
      </categories>
      
      
        <tags>
            
            <tag> python </tag>
            
            <tag> test </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>LeetCode第9题：Palindrome Number</title>
      <link href="/2019/05/23/LeetCode-9/"/>
      <url>/2019/05/23/LeetCode-9/</url>
      
        <content type="html"><![CDATA[<h2 id="题目"><a href="#题目" class="headerlink" title="题目"></a><b>题目</b></h2><blockquote><p>判断一个整数是否是回文数。回文数是指正序（从左向右）和倒序（从右向左）读都是一样的整数。</p></blockquote><ul><li><strong>示例1</strong>:</li></ul><p><em>输入:</em> <code>121</code><br><em>输出:</em> <code>true</code>  </p><ul><li><strong>示例2</strong>:</li></ul><p><em>输入:</em> <code>-121</code><br><em>输出:</em> <code>false</code><br><em>解释:</em> 从左向右读, 为 <code>-121</code>。 从右向左读, 为 <code>121-</code>。因此它不是一个回文数。</p><ul><li><strong>示例3</strong>:</li></ul><p><em>输入:</em> <code>10</code><br><em>输出:</em> <code>false</code><br><em>解释:</em> 从右向左读, 为 <code>01</code>。因此它不是一个回文数。 </p><h2 id="代码"><a href="#代码" class="headerlink" title="代码"></a><b>代码</b></h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span><span class="params">(object)</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">isPalindrome</span><span class="params">(self, x)</span>:</span></span><br><span class="line">        <span class="string">"""</span></span><br><span class="line"><span class="string">        :type x: int</span></span><br><span class="line"><span class="string">        :rtype: bool</span></span><br><span class="line"><span class="string">        """</span></span><br><span class="line">        <span class="keyword">return</span> str(x) == str(x)[::<span class="number">-1</span>]</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> LeetCode </category>
          
      </categories>
      
      
        <tags>
            
            <tag> LeetCode </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>LeetCode第7题：Reverse Integer</title>
      <link href="/2019/05/22/LeetCode-7/"/>
      <url>/2019/05/22/LeetCode-7/</url>
      
        <content type="html"><![CDATA[<h2 id="题目"><a href="#题目" class="headerlink" title="题目"></a><b>题目</b></h2><blockquote><p>给出一个 32 位的有符号整数，你需要将这个整数中每位上的数字进行反转。</p></blockquote><ul><li><strong>示例1</strong>:</li></ul><p><em>输入:</em> <code>123</code><br><em>输出:</em> <code>321</code>  </p><ul><li><strong>示例2</strong>:</li></ul><p><em>输入:</em> <code>-123</code><br><em>输出:</em> <code>-321</code>  </p><ul><li><strong>示例3</strong>:</li></ul><p><em>输入:</em> <code>120</code><br><em>输出:</em> <code>21</code> </p><p><strong>注意:</strong> 假设我们的环境只能存储得下 32 位的有符号整数，则其数值范围为 [−2<sup>31</sup>, 2<sup>31</sup> − 1]。请根据这个假设，如果反转后整数溢出那么就返回 0。</p><h2 id="代码"><a href="#代码" class="headerlink" title="代码"></a><b>代码</b></h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span><span class="params">(object)</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">reverse</span><span class="params">(self, x)</span>:</span></span><br><span class="line">        <span class="string">"""</span></span><br><span class="line"><span class="string">        :type x: int</span></span><br><span class="line"><span class="string">        :rtype: int</span></span><br><span class="line"><span class="string">        """</span></span><br><span class="line">        <span class="keyword">if</span> x &lt; <span class="number">0</span>:</span><br><span class="line">            str_x = str(x)[<span class="number">1</span>:][::<span class="number">-1</span>]</span><br><span class="line">            x = <span class="number">-1</span> * int(str_x)</span><br><span class="line">            <span class="keyword">if</span> <span class="number">-2147483648</span> &lt; x:</span><br><span class="line">                <span class="keyword">return</span> x</span><br><span class="line">            <span class="keyword">return</span> <span class="number">0</span></span><br><span class="line">        x = int(str(x)[::<span class="number">-1</span>])</span><br><span class="line">        <span class="keyword">if</span> x &lt; <span class="number">2147483647</span>:</span><br><span class="line">            <span class="keyword">return</span> x </span><br><span class="line">        <span class="keyword">return</span> <span class="number">0</span></span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> LeetCode </category>
          
      </categories>
      
      
        <tags>
            
            <tag> LeetCode </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>LeetCode第38题：Count and Say</title>
      <link href="/2019/05/21/LeetCode-38/"/>
      <url>/2019/05/21/LeetCode-38/</url>
      
        <content type="html"><![CDATA[<h2 id="题目"><a href="#题目" class="headerlink" title="题目"></a><strong>题目</strong></h2><blockquote><p>报数序列是一个整数序列，按照其中的整数的顺序进行报数，得到下一个数。其前五项如下：<br>1.1<br>   2.11<br>   3.21<br>   4.1211<br>   5.111221</p></blockquote><blockquote><p>1 被读作(“<code>一个一</code>“), 即 11。<br>11 被读作(“<code>两个一</code>“), 即 21。<br>21 被读作(“<code>一个二</code>“, “<code>一个一</code>“), 即 1211。</p></blockquote><blockquote><p>给定一个正整数 n（1 ≤ n ≤ 30），输出报数序列的第 n 项。<br>注意：整数顺序将表示为一个字符串。</p></blockquote><p>这个题有点奇葩，多读几遍就懂了</p><ul><li><strong>示例 1:</strong></li></ul><p><em>输入</em>: 1<br><em>输出</em>: “1”</p><ul><li><strong>示例 2：</strong></li></ul><p><em>输入</em>: 4<br><em>输出</em>: “1211”</p><h2 id="代码"><a href="#代码" class="headerlink" title="代码"></a><strong>代码</strong></h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span><span class="params">(object)</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">countAndSay</span><span class="params">(self, n)</span>:</span></span><br><span class="line">        <span class="string">"""</span></span><br><span class="line"><span class="string">        :type n: int</span></span><br><span class="line"><span class="string">        :rtype: str</span></span><br><span class="line"><span class="string">        """</span></span><br><span class="line">        d = <span class="string">'1'</span></span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> range(n<span class="number">-1</span>):</span><br><span class="line">            tem = d[<span class="number">0</span>]</span><br><span class="line">            s = <span class="string">''</span></span><br><span class="line">            count = <span class="number">0</span></span><br><span class="line">            <span class="keyword">for</span> x <span class="keyword">in</span> d:</span><br><span class="line">                <span class="keyword">if</span> tem == x:</span><br><span class="line">                    count += <span class="number">1</span></span><br><span class="line">                    <span class="keyword">continue</span></span><br><span class="line">                s += str(count) + tem</span><br><span class="line">                count = <span class="number">1</span></span><br><span class="line">                tem = x</span><br><span class="line">            s += str(count) + tem</span><br><span class="line">            d = s</span><br><span class="line">        <span class="keyword">return</span> d</span><br></pre></td></tr></table></figure><ul><li><del>其实这个比较快。。。。。。</del>  抄袭自：<a href="https://leetcode-cn.com/lwl" rel="external nofollow noopener noreferrer" target="_blank">@lwl</a></li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span><span class="params">(object)</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">countAndSay</span><span class="params">(self, n)</span>:</span></span><br><span class="line">        <span class="string">"""</span></span><br><span class="line"><span class="string">        :type n: int</span></span><br><span class="line"><span class="string">        :rtype: str</span></span><br><span class="line"><span class="string">        """</span></span><br><span class="line">        di = &#123;</span><br><span class="line">        <span class="number">1</span>:<span class="string">"1"</span>,</span><br><span class="line">        <span class="number">2</span>:<span class="string">"11"</span>,</span><br><span class="line">        <span class="number">3</span>:<span class="string">"21"</span>,</span><br><span class="line">        <span class="number">4</span>:<span class="string">"1211"</span>,</span><br><span class="line">        <span class="number">5</span>:<span class="string">"111221"</span>,</span><br><span class="line">        <span class="number">6</span>:<span class="string">"312211"</span>,</span><br><span class="line">        <span class="number">7</span>:<span class="string">"13112221"</span>,</span><br><span class="line">        <span class="number">8</span>:<span class="string">"1113213211"</span>,</span><br><span class="line">        <span class="number">9</span>:<span class="string">"31131211131221"</span>,</span><br><span class="line">        <span class="number">10</span>:<span class="string">"13211311123113112211"</span>,</span><br><span class="line">        <span class="number">11</span>:<span class="string">"11131221133112132113212221"</span>,</span><br><span class="line">        <span class="number">12</span>:<span class="string">"3113112221232112111312211312113211"</span>,</span><br><span class="line">        <span class="number">13</span>:<span class="string">"1321132132111213122112311311222113111221131221"</span>,</span><br><span class="line">        <span class="number">14</span>:<span class="string">"11131221131211131231121113112221121321132132211331222113112211"</span>,</span><br><span class="line">        <span class="number">15</span>:<span class="string">"311311222113111231131112132112311321322112111312211312111322212311322113212221"</span>,</span><br><span class="line">        <span class="number">16</span>:<span class="string">"132113213221133112132113311211131221121321131211132221123113112221131112311332111213211322211312113211"</span>,</span><br><span class="line">        <span class="number">17</span>:<span class="string">"11131221131211132221232112111312212321123113112221121113122113111231133221121321132132211331121321231231121113122113322113111221131221"</span>,</span><br><span class="line">        <span class="number">18</span>:<span class="string">"31131122211311123113321112131221123113112211121312211213211321322112311311222113311213212322211211131221131211132221232112111312111213111213211231131122212322211331222113112211"</span>,</span><br><span class="line">        <span class="number">19</span>:<span class="string">"1321132132211331121321231231121113112221121321132122311211131122211211131221131211132221121321132132212321121113121112133221123113112221131112311332111213122112311311123112111331121113122112132113213211121332212311322113212221"</span>,</span><br><span class="line">        <span class="number">20</span>:<span class="string">"11131221131211132221232112111312111213111213211231132132211211131221131211221321123113213221123113112221131112311332211211131221131211132211121312211231131112311211232221121321132132211331121321231231121113112221121321133112132112312321123113112221121113122113121113123112112322111213211322211312113211"</span>,</span><br><span class="line">        <span class="number">21</span>:<span class="string">"311311222113111231133211121312211231131112311211133112111312211213211312111322211231131122211311122122111312211213211312111322211213211321322113311213212322211231131122211311123113223112111311222112132113311213211221121332211211131221131211132221232112111312111213111213211231132132211211131221232112111312211213111213122112132113213221123113112221131112311311121321122112132231121113122113322113111221131221"</span>,</span><br><span class="line">        <span class="number">22</span>:<span class="string">"132113213221133112132123123112111311222112132113311213211231232112311311222112111312211311123113322112132113213221133122112231131122211211131221131112311332211211131221131211132221232112111312111213322112132113213221133112132113221321123113213221121113122123211211131221222112112322211231131122211311123113321112131221123113111231121113311211131221121321131211132221123113112211121312211231131122211211133112111311222112111312211312111322211213211321322113311213211331121113122122211211132213211231131122212322211331222113112211"</span>,</span><br><span class="line">        <span class="number">23</span>:<span class="string">"111312211312111322212321121113121112131112132112311321322112111312212321121113122112131112131221121321132132211231131122211331121321232221121113122113121113222123112221221321132132211231131122211331121321232221123113112221131112311332111213122112311311123112112322211211131221131211132221232112111312211322111312211213211312111322211231131122111213122112311311221132211221121332211213211321322113311213212312311211131122211213211331121321123123211231131122211211131221131112311332211213211321223112111311222112132113213221123123211231132132211231131122211311123113322112111312211312111322212321121113122123211231131122113221123113221113122112132113213211121332212311322113212221"</span>,</span><br><span class="line">        <span class="number">24</span>:<span class="stringspan>,</span><br><span class="line">        <span class="number">25</span>:<span class="string">"132113213221133112132123123112111311222112132113311213211231232112311311222112111312211311123113322112132113212231121113112221121321132132211231232112311321322112311311222113111231133221121113122113121113221112131221123113111231121123222112132113213221133112132123123112111312111312212231131122211311123113322112111312211312111322111213122112311311123112112322211211131221131211132221232112111312111213111213211231132132211211131221232112111312212221121123222112132113213221133112132123123112111311222112132113213221132213211321322112311311222113311213212322211211131221131211221321123113213221121113122113121132211332113221122112133221123113112221131112311332111213122112311311123112111331121113122112132113121113222112311311221112131221123113112221121113311211131122211211131221131211132221121321132132212321121113121112133221123113112221131112212211131221121321131211132221123113112221131112311332211211133112111311222112111312211311123113322112111312211312111322212321121113121112133221121321132132211331121321231231121113112221121321132122311211131122211211131221131211322113322112111312211322132113213221123113112221131112311311121321122112132231121113122113322113111221131221"</span>,</span><br><span class="line">        <span class="number">26</span>:<span class="stringspan>,</span><br><span class="line">        <span class="number">27</span>:<span class="stringspan>,</span><br><span class="line">        <span class="number">28</span>:<span class="stringspan>,</span><br><span class="line">        <span class="number">29</span>:<span class="stringspan>,</span><br><span class="line">        <span class="number">30</span>:<span class="string">"3113112221131112311332111213122112311311123112111331121113122112132113121113222112311311221112131221123113112221121113311211131122211211131221131211132221121321132132212321121113121112133221123113112221131112212211131221121321131211132221123113112221131112311332211211133112111311222112111312211311123113322112111312211312111322212321121113121112133221121321132132211331121321132213211231132132211211131221232112111312212221121123222112311311222113111231133211121321321122111312211312111322211213211321322123211211131211121332211231131122211311123113321112131221123113111231121123222112111331121113112221121113122113111231133221121113122113121113221112131221123113111231121123222112111312211312111322212321121113121112131112132112311321322112111312212321121113122122211211232221121321132132211331121321231231121113112221121321132132211322132113213221123113112221133112132123222112111312211312112213211231132132211211131221131211322113321132211221121332211231131122211311123113321112131221123113111231121113311211131221121321131211132221123113112211121312211231131122211211133112111311222112111312211312111322211213211321223112111311222112132113213221133122211311221122111312211312111322212321121113121112131112132112311321322112111312212321121113122122211211232221121321132132211331121321231231121113112221121321132132211322132113213221123113112221133112132123222112111312211312112213211231132132211211131221131211322113321132211221121332211213211321322113311213212312311211131122211213211331121321123123211231131122211211131221131112311332211213211321223112111311222112132113213221123123211231132132211231131122211311123113322112111312211312111322111213122112311311123112112322211213211321322113312211223113112221121113122113111231133221121321132132211331222113321112131122211332113221122112133221123113112221131112311332111213122112311311123112111331121113122112132113121113222112311311221112131221123113112221121113311211131122211211131221131211132221121321132132212321121113121112133221123113112221131112311332111213122112311311123112112322211322311311222113111231133211121312211231131112311211232221121113122113121113222123211211131221132211131221121321131211132221123113112211121312211231131122113221122112133221121321132132211331121321231231121113121113122122311311222113111231133221121113122113121113221112131221123113111231121123222112132113213221133112132123123112111312211322311211133112111312211213211311123113223112111321322123122113222122211211232221121113122113121113222123211211131211121311121321123113213221121113122123211211131221121311121312211213211321322112311311222113311213212322211211131221131211221321123113213221121113122113121113222112131112131221121321131211132221121321132132211331121321232221123113112221131112311322311211131122211213211331121321122112133221121113122113121113222123112221221321132132211231131122211331121321232221121113122113121113222123211211131211121332211213111213122112132113121113222112132113213221232112111312111213322112132113213221133112132123123112111311222112132113311213211221121332211231131122211311123113321112131221123113112221132231131122211211131221131112311332211213211321223112111311222112132113212221132221222112112322211211131221131211132221232112111312111213111213211231131112311311221122132113213221133112132123222112311311222113111231132231121113112221121321133112132112211213322112111312211312111322212321121113121112131112132112311321322112111312212321121113122122211211232221121311121312211213211312111322211213211321322123211211131211121332211213211321322113311213211322132112311321322112111312212321121113122122211211232221121321132132211331121321231231121113112221121321133112132112312321123113112221121113122113111231133221121321132122311211131122211213211321222113222122211211232221123113112221131112311332111213122112311311123112111331121113122112132113121113222112311311221112131221123113112221121113311211131122211211131221131211132221121321132132212321121113121112133221123113112221131112311332111213213211221113122113121113222112132113213221232112111312111213322112132113213221133112132123123112111312211322311211133112111312212221121123222112132113213221133112132123222113223113112221131112311332111213122112311311123112112322211211131221131211132221232112111312111213111213211231132132211211131221131211221321123113213221123113112221131112211322212322211231131122211322111312211312111322211213211321322113311213211331121113122122211211132213211231131122212322211331222113112211"</span>,</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> di[n]</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> LeetCode </category>
          
      </categories>
      
      
        <tags>
            
            <tag> LeetCode </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>LeetCode第28题：Implement strStr()</title>
      <link href="/2019/05/19/LeetCode-28/"/>
      <url>/2019/05/19/LeetCode-28/</url>
      
        <content type="html"><![CDATA[<h2 id="题目"><a href="#题目" class="headerlink" title="题目"></a><strong>题目</strong></h2><blockquote><p>实现 strStr() 函数。<br>给定一个 haystack 字符串和一个 needle 字符串，在 haystack 字符串中找出 needle 字符串出现的第一个位置 (从0开始)。如果不存在，则返回  -1。</p></blockquote><ul><li><strong>示例 1:</strong><br><em>输入:</em> haystack = “hello”, needle = “ll”<br><em>输出:</em> 2</li><li><strong>示例 2:</strong><br><em>输入:</em> haystack = “aaaaa”, needle = “bba”<br><em>输出:</em> -1<h2 id="代码"><a href="#代码" class="headerlink" title="代码"></a><strong>代码</strong></h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span><span class="params">(object)</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">strStr</span><span class="params">(self, haystack, needle)</span>:</span></span><br><span class="line">        <span class="string">"""</span></span><br><span class="line"><span class="string">        :type haystack: str</span></span><br><span class="line"><span class="string">        :type needle: str</span></span><br><span class="line"><span class="string">        :rtype: int</span></span><br><span class="line"><span class="string">        """</span></span><br><span class="line">        <span class="keyword">if</span> needle == <span class="string">""</span>:</span><br><span class="line">            <span class="keyword">return</span> <span class="number">0</span></span><br><span class="line">        <span class="keyword">if</span> needle <span class="keyword">in</span> haystack:</span><br><span class="line">            <span class="keyword">return</span> len(haystack.split(needle)[<span class="number">0</span>])</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            <span class="keyword">return</span> <span class="number">-1</span></span><br></pre></td></tr></table></figure></li></ul>]]></content>
      
      
      <categories>
          
          <category> LeetCode </category>
          
      </categories>
      
      
        <tags>
            
            <tag> LeetCode </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>LeetCode第14题：Longest Common Prefix</title>
      <link href="/2019/05/18/LeetCode-14/"/>
      <url>/2019/05/18/LeetCode-14/</url>
      
        <content type="html"><![CDATA[<h2 id="题目"><a href="#题目" class="headerlink" title="题目"></a><b>题目</b></h2><blockquote><p>编写一个函数来查找字符串数组中的最长公共前缀。<br>如果不存在公共前缀，返回空字符串 “”。</p></blockquote><ul><li><strong>示例 1</strong>:<br><em>输入:</em> <code>[&quot;flower&quot;,&quot;flow&quot;,&quot;flight&quot;]</code><br><em>输出:</em> <code>&quot;fl&quot;</code>  </li><li><strong>示例 2</strong>:<br><em>输入</em>: <code>[&quot;dog&quot;,&quot;racecar&quot;,&quot;car&quot;]</code><br><em>输出:</em> <code>&quot;&quot;</code><br><em>解释:</em> 输入不存在公共前缀。<br><em>说明:</em> 所有输入只包含小写字母 a-z 。  </li></ul><h2 id="代码"><a href="#代码" class="headerlink" title="代码"></a><b>代码</b></h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span><span class="params">(object)</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">longestCommonPrefix</span><span class="params">(self, strs)</span>:</span></span><br><span class="line">        <span class="string">"""</span></span><br><span class="line"><span class="string">        :type strs: List[str]</span></span><br><span class="line"><span class="string">        :rtype: str</span></span><br><span class="line"><span class="string">        """</span></span><br><span class="line">        res = <span class="string">''</span></span><br><span class="line">        <span class="comment"># 排除特殊情况</span></span><br><span class="line">        <span class="keyword">if</span> len(strs) == <span class="number">0</span>:</span><br><span class="line">            <span class="keyword">return</span> res</span><br><span class="line">        <span class="keyword">if</span> len(strs) == <span class="number">1</span>:</span><br><span class="line">            <span class="keyword">return</span> strs[<span class="number">0</span>]</span><br><span class="line">        min_length = len(strs[<span class="number">0</span>])</span><br><span class="line">        <span class="comment"># 找到最短的字符串，确定循环次数</span></span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">1</span>, len(strs)):</span><br><span class="line">            <span class="keyword">if</span> len(strs[i]) &lt; min_length:</span><br><span class="line">                min_length = len(strs[i])</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> range(min_length):</span><br><span class="line">            tmp_char = strs[<span class="number">0</span>][i]</span><br><span class="line">            <span class="comment"># 用每个字符串的第i个元素和第0个字符串的第i个元素对比</span></span><br><span class="line">            <span class="keyword">for</span> j <span class="keyword">in</span> range(<span class="number">1</span>, len(strs)):</span><br><span class="line">                <span class="comment"># 不等则清除tmp_char并结束</span></span><br><span class="line">                <span class="keyword">if</span> strs[j][i] != tmp_char:</span><br><span class="line">                        tmp_char = <span class="string">""</span></span><br><span class="line">            <span class="keyword">if</span> tmp_char == <span class="string">""</span>:</span><br><span class="line">                <span class="keyword">break</span></span><br><span class="line">            res += tmp_char</span><br><span class="line">        <span class="keyword">return</span> res</span><br></pre></td></tr></table></figure><p>自己写的太烂了，cp个范例。。。</p>]]></content>
      
      
      <categories>
          
          <category> LeetCode </category>
          
      </categories>
      
      
        <tags>
            
            <tag> LeetCode </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>LeetCode第1题：Two Sum</title>
      <link href="/2019/05/17/LeetCode-1/"/>
      <url>/2019/05/17/LeetCode-1/</url>
      
        <content type="html"><![CDATA[<h2 id="题目"><a href="#题目" class="headerlink" title="题目"></a><b>题目</b></h2><blockquote><p>给定一个整数数组 nums 和一个目标值 target，请你在该数组中找出和为目标值的那 两个 整数，并返回他们的数组下标。<br><br>你可以假设每种输入只会对应一个答案。但是，你不能重复利用这个数组中同样的元素。</p></blockquote><ul><li><strong>示例 </strong>:<br><em>输入:</em> <code>nums = [2, 7, 11, 15], target = 9</code><br><em>解释:</em> 因为<code>nums[0] + nums[1] = 2 + 7 = 9</code><br><em>输出:</em> <code>[0, 1]</code>  </li></ul><h2 id="代码"><a href="#代码" class="headerlink" title="代码"></a><b>代码</b></h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span><span class="params">(object)</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">twoSum</span><span class="params">(self, nums, target)</span>:</span></span><br><span class="line">        <span class="string">"""</span></span><br><span class="line"><span class="string">        :type nums: List[int]</span></span><br><span class="line"><span class="string">        :type target: int</span></span><br><span class="line"><span class="string">        :rtype: List[int]</span></span><br><span class="line"><span class="string">        """</span></span><br><span class="line">        d = &#123;&#125;</span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> range(len(nums)):</span><br><span class="line">            <span class="keyword">if</span> d.get(target - nums[i], <span class="literal">None</span>) == <span class="literal">None</span>: </span><br><span class="line">                d[nums[i]] = i  </span><br><span class="line">            <span class="keyword">else</span>:</span><br><span class="line">                <span class="keyword">return</span> (d[target - nums[i]], i)</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> LeetCode </category>
          
      </categories>
      
      
        <tags>
            
            <tag> LeetCode </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>解决:Failed to add /run/systemd/ask-password to directory watch:No space left on device</title>
      <link href="/2019/05/14/%E8%A7%A3%E5%86%B3No-space-left-on-device/"/>
      <url>/2019/05/14/%E8%A7%A3%E5%86%B3No-space-left-on-device/</url>
      
        <content type="html"><![CDATA[<p>今天运行了一下privoxy，蹦出来了：<code>Failed to add /run/systemd/ask-password to directory watch: No space left on device</code></p><a id="more"></a><hr><p><code>df</code>查了一下磁盘空间，完全够用，找了一下解决方法，做个记录</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">sudo -i</span><br><span class="line">echo 1048576 &gt; /proc/sys/fs/inotify/max_user_watches</span><br><span class="line">exit</span><br><span class="line">sudo vim /etc/sysctl.conf</span><br></pre></td></tr></table></figure><p>在<code>sysctl.conf</code>中加入：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">fs.inotify.max_user_watches=1048576</span><br></pre></td></tr></table></figure><p>参考：<a href="https://askubuntu.com/questions/828779/failed-to-add-run-systemd-ask-password-to-directory-watch-no-space-left-on-dev" rel="external nofollow noopener noreferrer" target="_blank">https://askubuntu.com/questions/828779/failed-to-add-run-systemd-ask-password-to-directory-watch-no-space-left-on-dev</a></p>]]></content>
      
      
      <categories>
          
          <category> Linux </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Linux </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Python list元素移动</title>
      <link href="/2019/05/13/python-list%E5%85%83%E7%B4%A0%E7%A7%BB%E5%8A%A8/"/>
      <url>/2019/05/13/python-list%E5%85%83%E7%B4%A0%E7%A7%BB%E5%8A%A8/</url>
      
        <content type="html"><![CDATA[<p>有更好的建议可以发邮件讨论，感谢</p><a id="more"></a><hr><ul><li><strong>思路</strong></li></ul><p>1、得到要移动元素的当前下标<br>2、pop出要移动的元素<br>3、计算移动位置，insert进列表</p><ul><li><strong>实现</strong></li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 把a2向右移动两位</span></span><br><span class="line">list_a = [<span class="string">'a1'</span>, <span class="string">'a2'</span>, <span class="string">'a3'</span>, <span class="string">'a4'</span>]</span><br><span class="line">index_a2 = list_a.index(<span class="string">'a2'</span>)</span><br><span class="line">a2 = list_a.pop(index_a2)</span><br><span class="line"><span class="comment"># 向右移动时注意index小于零的情况</span></span><br><span class="line">insert_a2 = index_a2 + <span class="number">2</span></span><br><span class="line">list_a.insert(insert_a2, a2)</span><br><span class="line">print(list_a)    <span class="comment"># ['a1', 'a3', 'a4', 'a2']</span></span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> Python </category>
          
      </categories>
      
      
        <tags>
            
            <tag> python </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Python四舍五入保留两位小数</title>
      <link href="/2019/05/12/python%E5%9B%9B%E8%88%8D%E4%BA%94%E5%85%A5/"/>
      <url>/2019/05/12/python%E5%9B%9B%E8%88%8D%E4%BA%94%E5%85%A5/</url>
      
        <content type="html"><![CDATA[<p>四舍五入这个问题竟然出乎意料的不简单</p><a id="more"></a><hr><h2 id="出现问题"><a href="#出现问题" class="headerlink" title="出现问题"></a><b>出现问题</b></h2><ul><li>失败一：使用<code>&quot;%.2f&quot;</code></li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">a = <span class="number">1.335</span></span><br><span class="line">print(<span class="string">"%.2f"</span> % a)       <span class="comment"># 输出1.33</span></span><br></pre></td></tr></table></figure><ul><li>失败二：使用<code>round()</code></li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">a = <span class="number">1.335</span></span><br><span class="line">print(round(a, <span class="number">2</span>))     <span class="comment"># 输出1.33</span></span><br></pre></td></tr></table></figure><ul><li>失败三：使用<code>Decimal()</code></li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> decimal <span class="keyword">import</span> Decimal</span><br><span class="line">a = <span class="number">1.335</span></span><br><span class="line">print(Decimal(a).quantize(Decimal(<span class="string">'0.00'</span>)))   <span class="comment">#输出1.33</span></span><br></pre></td></tr></table></figure><h2 id="解决问题："><a href="#解决问题：" class="headerlink" title="解决问题："></a><b>解决问题：</b></h2><ul><li>a+0.001</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">a = <span class="number">1.335</span></span><br><span class="line">print(round(a + <span class="number">0.001</span>, <span class="number">2</span>))     <span class="comment"># 输出 1.34</span></span><br></pre></td></tr></table></figure><p>这种方法也有点问题，保留两位小数要加0.001，三位的时候就要加0.0001，不够灵活，暂时没有发现更好的方法，先记一下</p>]]></content>
      
      
      <categories>
          
          <category> Python </category>
          
      </categories>
      
      
        <tags>
            
            <tag> python </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>终端配置ssh秘钥登录</title>
      <link href="/2019/05/11/%E7%BB%88%E7%AB%AFssh%E7%99%BB%E5%BD%95/"/>
      <url>/2019/05/11/%E7%BB%88%E7%AB%AFssh%E7%99%BB%E5%BD%95/</url>
      
        <content type="html"><![CDATA[<p>首先生成秘钥</p><a id="more"></a><hr><h2 id="远程服务端"><a href="#远程服务端" class="headerlink" title="远程服务端"></a><b>远程服务端</b></h2><ul><li><strong>生成秘钥</strong></li></ul><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ssh-keygen</span><br></pre></td></tr></table></figure><p>中间会让输入命名、密码、地址，可以直接回车键过去</p><ul><li><strong>重命名公钥，配置权限</strong></li></ul><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">cd ~/.ssh</span><br><span class="line">mv id_rsa.pub authorized_keys</span><br><span class="line">chmod 600 authorized_keys   #修改公钥为只有属主有读写权限（安全考虑）</span><br><span class="line">chmod 700 ~/.ssh   #修改.SSH目录为只有属主有读、写、执行权限（安全考虑）</span><br></pre></td></tr></table></figure><ul><li><strong>重启ssh</strong></li></ul><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">/etc/init.d/ssh restart</span><br></pre></td></tr></table></figure><ul><li><strong>复制秘钥</strong></li></ul><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">vim id_rsa</span><br></pre></td></tr></table></figure><p>复制<code>id_rsa</code>的内容粘贴到客户端</p><h2 id="本地客户端"><a href="#本地客户端" class="headerlink" title="本地客户端"></a><b>本地客户端</b></h2><ul><li><strong>把服务端复制的秘钥保存到一个文件中, 文件名不要有后缀</strong></li></ul><p>例：保存文件为<code>~/.ssh/server_rsa</code></p><ul><li><strong>修改保存的秘钥权限</strong></li></ul><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">chmod 600 server_rsa</span><br></pre></td></tr></table></figure><p>到这一步就已经可以使用秘钥登录了，虽然有点麻烦</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ssh -p xx root@IP -i ~/.ssh/server_rsa</span><br></pre></td></tr></table></figure><ul><li><strong>修改<code>ssh</code>的<code>config</code>配置文件，简化ssh登录</strong></li></ul><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">vim ~/.ssh/config</span><br></pre></td></tr></table></figure><p>把下面的代码复制到config中<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">Host abc   # abc是自己命名的  </span><br><span class="line">HostName 服务器IP</span><br><span class="line">User 用户名</span><br><span class="line">Port 端口  # -p</span><br><span class="line">IdentityFile 保存的秘钥地址  # -i</span><br></pre></td></tr></table></figure></p><p>保存config文件，直接<code>ssh abc</code>就可以免密登录了</p><p>参考：<a href="https://segmentfault.com/a/1190000015362485" rel="external nofollow noopener noreferrer" target="_blank">https://segmentfault.com/a/1190000015362485</a></p>]]></content>
      
      
      <categories>
          
          <category> 项目部署 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 项目部署 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Django-日志</title>
      <link href="/2019/05/10/django-%E6%97%A5%E5%BF%97/"/>
      <url>/2019/05/10/django-%E6%97%A5%E5%BF%97/</url>
      
        <content type="html"><![CDATA[<p>Django的日志使用了python的logging模块，需要在settings中进行配置</p><a id="more"></a><hr><h3 id="logging模块"><a href="#logging模块" class="headerlink" title="logging模块"></a><b>logging模块</b></h3><p><em>logging模块由四部分组成</em></p><ul><li><strong>记录器</strong></li></ul><p>记录器配置具有日志级别。此日志级别描述了记录器将处理的消息的严重性。Python定义了以下日志级别：<br><strong>DEBUG：</strong> 用于调试目的的低级系统信息<br><strong>INFO：</strong> 一般系统信息<br><strong>WARNING：</strong> 描述已发生的小问题的信息。<br><strong>ERROR：</strong> 描述已发生的主要问题的信息。<br><strong>CRITICAL：</strong> 描述已发生的严重问题的信息</p><ul><li><strong>处理器</strong></li></ul><ol><li><p>处理器是确定记录器中每条消息发生情况的引擎。它描述了特定的日志记录行为，例如将消息写入屏幕，文件或网络套接字。</p></li><li><p>与记录器一样，处理器也具有日志级别。如果日志记录的日志级别未达到或超过处理程序的级别，则处理程序将忽略该消息。</p></li><li><p>记录器可以有多个处理器，每个处理器可以具有不同的日志级别。以这种方式，可以根据消息的重要性提供不同形式的通知。</p></li></ol><ul><li><strong>过滤器</strong></li></ul><ol><li><p>过滤器用于提供对日志记录从记录器传递到处理程序的附加控制。</p></li><li><p>默认情况下，将处理满足日志级别要求的任何日志消息。但是，通过安装筛选器，可以在日志记录过程中添加其他条件。例如，您可以安装仅允许ERROR发出来自特定源的消息的过滤器。</p></li><li><p>过滤器还可用于在发出之前修改日志记录。例如，如果满足一组特定条件，您可以编写一个过滤器，将ERROR日志记录降级 为WARNING记录。</p></li><li><p>过滤器可以安装在记录器或处理器上; 可以在链中使用多个过滤器来执行多个过滤操作。</p></li></ol><ul><li><strong>格式化程序</strong></li></ul><p>最终，日志记录需要呈现为文本。格式化程序描述该文本的确切格式。格式化程序通常由包含LogRecord属性的Python格式化字符串组成 ; 但是，也可以编写自定义格式化程序来实现特定的格式化行为。</p><h3 id="示例"><a href="#示例" class="headerlink" title="示例"></a><b>示例</b></h3><ul><li>配置</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br></pre></td><td class="code"><pre><span class="line">LOG_PATH = <span class="string">'xx/xx/'</span></span><br><span class="line">LOGGING = &#123;</span><br><span class="line">    <span class="string">'version'</span>: <span class="number">1</span>,   <span class="comment">#定义了配置文件的版本</span></span><br><span class="line">    <span class="string">'disable_existing_loggers'</span>: <span class="literal">False</span>,  <span class="comment">## True表示禁用logger</span></span><br><span class="line">    <span class="comment"># 格式化</span></span><br><span class="line">    <span class="string">'formatters'</span>: &#123;</span><br><span class="line">        <span class="string">'default'</span>: &#123;</span><br><span class="line">            <span class="string">'format'</span>: <span class="string">'%(levelname)s %(asctime)s %(module)s %(funcName)s %(msecs)s %(message)s'</span></span><br><span class="line">            &#125;,</span><br><span class="line">        <span class="string">'simple'</span>: &#123;</span><br><span class="line">            <span class="string">'format'</span>: <span class="string">'%(levelname)s %(message)s'</span></span><br><span class="line">            &#125;,</span><br><span class="line">        &#125;,</span><br><span class="line">     <span class="comment"># 处理日志的方式</span></span><br><span class="line">    <span class="string">'handlers'</span>: &#123;</span><br><span class="line">        <span class="string">'v_handlers'</span>: &#123;</span><br><span class="line">            <span class="comment"># 级别</span></span><br><span class="line">            <span class="string">'level'</span>: <span class="string">'DEBUG'</span>,</span><br><span class="line">            <span class="comment"># 存储方式</span></span><br><span class="line">            <span class="string">"class"</span>: <span class="string">'logging.handlers.RotatingFileHandler'</span>,</span><br><span class="line">            <span class="comment"># 日志文件大小</span></span><br><span class="line">            <span class="string">'maxBytes'</span>: <span class="number">5</span> * <span class="number">1024</span>,</span><br><span class="line">            <span class="string">'encoding'</span>: <span class="string">'utf8'</span>,</span><br><span class="line">            <span class="comment"># 日志文件路径</span></span><br><span class="line">            <span class="string">'filename'</span>: <span class="string">'&#123;&#125;salary_all.log'</span>.format(LOG_PATH),</span><br><span class="line">            <span class="comment"># 格式化方式</span></span><br><span class="line">            <span class="string">'formatter'</span>: <span class="string">'default'</span>,</span><br><span class="line">            &#125;,</span><br><span class="line">        <span class="string">'error'</span>: &#123;</span><br><span class="line">            <span class="string">'level'</span>: <span class="string">"ERROR"</span>,</span><br><span class="line">            <span class="string">'class'</span>: <span class="string">'logging.handlers.RotatingFileHandler'</span>,</span><br><span class="line">            <span class="string">'maxBytes'</span>: <span class="number">5</span> * <span class="number">1024</span>,</span><br><span class="line">            <span class="string">'encoding'</span>: <span class="string">'utf8'</span>,</span><br><span class="line">            <span class="string">'filename'</span>: <span class="string">'&#123;&#125;salary_error.log'</span>.format(LOG_PATH),</span><br><span class="line">            <span class="string">'formatter'</span>: <span class="string">'simple'</span></span><br><span class="line">            &#125;</span><br><span class="line">        &#125;,</span><br><span class="line">     <span class="comment"># 配置日志的处理方式</span></span><br><span class="line">    <span class="string">'loggers'</span>: &#123;</span><br><span class="line">        <span class="string">'django'</span>: &#123;</span><br><span class="line">            <span class="string">'handlers'</span>: [<span class="string">'v_handlers'</span>],</span><br><span class="line">            <span class="string">'propagate'</span>: <span class="literal">True</span>,</span><br><span class="line">            &#125;,</span><br><span class="line">        <span class="string">'django.request'</span>: &#123;</span><br><span class="line">            <span class="string">'handlers'</span>: [<span class="string">'error'</span>],</span><br><span class="line">            <span class="string">'level'</span>: <span class="string">'ERROR'</span>,</span><br><span class="line">            <span class="string">'propagate'</span>: <span class="literal">True</span></span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">        &#125;,</span><br><span class="line">     <span class="comment"># 过滤器</span></span><br><span class="line">    <span class="string">'filters'</span>: &#123;</span><br><span class="line"></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><ul><li><strong>format</strong></li></ul><table><thead><tr><th>format</th><th></th></tr></thead><tbody><tr><td><strong>%(levelno)s</strong></td><td>日志的级别数字形式</td></tr><tr><td><strong>%(levelname)s</strong></td><td>日志级别的名称</td></tr><tr><td><strong>%(pathname)s</strong></td><td>当前执行程序的路径</td></tr><tr><td><strong>%(filename)s</strong></td><td>当前执行程序名</td></tr><tr><td><strong>%(funcName)s</strong></td><td>当前的函数</td></tr><tr><td><strong>%(lineno)d</strong></td><td>记录日志的当前行号</td></tr><tr><td><strong>%(asctime)s</strong></td><td>日期时间</td></tr><tr><td><strong>%(msecs)s</strong></td><td>毫秒级的时间</td></tr><tr><td><strong>%(thread)d</strong></td><td>线程ID</td></tr><tr><td><strong>%(threadName)s</strong></td><td>线程名称</td></tr><tr><td><strong>%(process)d</strong></td><td>进程ID</td></tr><tr><td><strong>%(message)s</strong></td><td>记录的日志信息</td></tr></tbody></table>]]></content>
      
      
      <categories>
          
          <category> Python </category>
          
      </categories>
      
      
        <tags>
            
            <tag> python </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Django项目部署</title>
      <link href="/2019/05/09/django-%E9%83%A8%E7%BD%B2/"/>
      <url>/2019/05/09/django-%E9%83%A8%E7%BD%B2/</url>
      
        <content type="html"><![CDATA[<p>django == 1.11.16<br>nginx == 1.10.3</p><a id="more"></a><hr><h3 id="项目编写"><a href="#项目编写" class="headerlink" title="项目编写"></a><b>项目编写</b></h3><ul><li>略</li></ul><h3 id="安装nginx"><a href="#安装nginx" class="headerlink" title="安装nginx"></a><b>安装nginx</b></h3><ul><li>略(<a href="http://www.wxy.email/2019/01/26/nginx%E5%AE%89%E8%A3%85%E9%85%8D%E7%BD%AE/">之前有篇</a>有详细介绍)</li></ul><h3 id="配置uwsgi"><a href="#配置uwsgi" class="headerlink" title="配置uwsgi"></a><b>配置uwsgi</b></h3><ul><li>创建 xxx.ini 文件</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">[uwsgi]</span><br><span class="line">socket=:<span class="number">9000</span>     <span class="comment"># 端口</span></span><br><span class="line">chdir=/mnt/project/project_api   <span class="comment"># 项目路径 包含manage.py的路径</span></span><br><span class="line">module=pro.wsgi   <span class="comment">#pro为包含wsgi.py文件的文件名</span></span><br><span class="line">master=true</span><br><span class="line">processes=<span class="number">4</span></span><br><span class="line">vacuum=true</span><br></pre></td></tr></table></figure><h3 id="配置nginx"><a href="#配置nginx" class="headerlink" title="配置nginx"></a><b>配置nginx</b></h3><ul><li>打开/etc/nginx/nginx.conf文件http{}中添加一个server</li></ul><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">server &#123;</span><br><span class="line">    listen       80;</span><br><span class="line">    server_name  域名 或者 localhost; </span><br><span class="line">    charset UTF-8;</span><br><span class="line">    access_log  /var/log/nginx/djangohost.access.log;</span><br><span class="line">    error_log  /var/log/nginx/djangohost.error.log;</span><br><span class="line">    location / &#123;</span><br><span class="line">        include uwsgi_params;</span><br><span class="line">        uwsgi_pass 127.0.0.1:9000;</span><br><span class="line">        uwsgi_read_timeout 2;</span><br><span class="line">     &#125;</span><br><span class="line">    error_page   500 502 503 504  /50x.html;</span><br><span class="line">    location = /50x.html &#123;</span><br><span class="line">        root   html;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>重启nginx</li></ul><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">ps -ef | grep nginx</span><br><span class="line">kill -HUP  &lt; pid &gt;</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span> 或者使用 service</span><br><span class="line">service nginx restart</span><br></pre></td></tr></table></figure><ul><li>启动项目</li></ul><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">uwsgi --ini xxx.ini</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 项目部署 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> python </tag>
            
            <tag> 项目部署 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>git钩子自动更新服务器代码</title>
      <link href="/2019/05/08/git%E9%92%A9%E5%AD%90/"/>
      <url>/2019/05/08/git%E9%92%A9%E5%AD%90/</url>
      
        <content type="html"><![CDATA[<p>手动提交好累的，自动部署才是王道</p><a id="more"></a><hr><h3 id="服务器端"><a href="#服务器端" class="headerlink" title="服务器端"></a><b>服务器端</b></h3><ul><li><strong>创建一个裸仓库</strong></li></ul><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">pwd   # /home/www/</span><br><span class="line">git init --bare  project_xxx.git</span><br><span class="line">cd project_xxx.git/hooks/</span><br><span class="line">cp post-update.sample post-update</span><br></pre></td></tr></table></figure><ul><li><strong>创建一个普通的仓库</strong> ，这一步就是为了明确表示一下仓库其实是有两个的，这个仓库才是代码的存储位置</li></ul><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">pwd   # /home/www/</span><br><span class="line">mkdir blog</span><br></pre></td></tr></table></figure><ul><li><strong>更改post-update中的内容为:</strong></li></ul><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span>!/bin/sh</span><br><span class="line">unset GIT_DIR </span><br><span class="line">DIR_ONE=/home/www/blog／  # 更新后的代码会存储在这个文件夹中，文件夹需要存在 </span><br><span class="line">cd $DIR_ONE</span><br><span class="line">git init</span><br><span class="line">git remote add gitee https://gitee.com/project.git  # 码云/GitHub代码仓库地址，如果不需要推到远程仓库，可以把这一步和最后的push去掉</span><br><span class="line">git remote add origin /home/www/project_xxx.git  # 路径指向裸仓库</span><br><span class="line">git reset --hard   # git clean -df</span><br><span class="line">git pull origin master</span><br><span class="line">git push gitee master # 把代码推到远程仓库</span><br></pre></td></tr></table></figure><ul><li><strong>配置git</strong>，因为用的是服务器，没有配置公钥，直接偷懒配置一下git的全局配置，<strong>不需要推到远程仓库可以省略这一步</strong></li></ul><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">git config --global user.name "name"</span><br><span class="line">git config --global user.email "email"</span><br><span class="line">git config --global credential.helper store</span><br></pre></td></tr></table></figure><p>然后使用git推一次代码，记录一下远程仓库的密码，脚本在推代码的时候就不需要再验证了</p><h3 id="客户端"><a href="#客户端" class="headerlink" title="客户端"></a><b>客户端</b></h3><ul><li><strong>进入项目目录</strong></li></ul><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">git init</span><br><span class="line">git remote add origin 服务器地址:/home/project_xxx.git   # 服务端创建的裸仓库的地址</span><br></pre></td></tr></table></figure><p>然后就可以在客户端进行操作了</p><p>参考: git book: <a href="https://git-scm.com/book/zh/v2/%E6%9C%8D%E5%8A%A1%E5%99%A8%E4%B8%8A%E7%9A%84-Git-%E5%9C%A8%E6%9C%8D%E5%8A%A1%E5%99%A8%E4%B8%8A%E6%90%AD%E5%BB%BA-Git" rel="external nofollow noopener noreferrer" target="_blank">服务器上的-Git-在服务器上搭建-Git</a><br><a href="a&gt;https://aotu.io/notes/2017/04/10/githooks/index.html">用 Git 钩子进行简单自动部署</a></p>]]></content>
      
      
      <categories>
          
          <category> 项目部署 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 项目部署 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>ab压力测试(入门)</title>
      <link href="/2019/05/07/ab%E5%8E%8B%E5%8A%9B%E6%B5%8B%E8%AF%95-%E5%85%A5%E9%97%A8/"/>
      <url>/2019/05/07/ab%E5%8E%8B%E5%8A%9B%E6%B5%8B%E8%AF%95-%E5%85%A5%E9%97%A8/</url>
      
        <content type="html"><![CDATA[<p>记录一下最近了解的压力测试工具 ab 全称: <a href="http://httpd.apache.org/docs/2.4/programs/ab.html" rel="external nofollow noopener noreferrer" target="_blank">apache bench</a></p><a id="more"></a><hr><ul><li>测试命令:<figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ab -c 1000 -n 100 -p data.txt -T application/json -H "token:xxx" -w "http://127.0.0.1/test/" &gt;&gt; test.html</span><br></pre></td></tr></table></figure></li></ul><blockquote><p>-c: 请求数量<br>-n: 请求并发量<br>-p: 请求参数文件<br>-T: Content-type<br>-H: 追加一个请求头<br>-w: 测试结果以html形式存储在test.html文件中, 不添加 -w 和 &gt;&gt; test.html 结果会打印在终端</p></blockquote><p> -p 的参数文件内的参数格式是由Content-type决定的</p><p>参考: <a href="http://httpd.apache.org/docs/2.4/programs/ab.html" rel="external nofollow noopener noreferrer" target="_blank">http://httpd.apache.org/docs/2.4/programs/ab.html</a></p>]]></content>
      
      
      <categories>
          
          <category> 项目部署 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> test </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Python处理excel合并单元格</title>
      <link href="/2019/05/06/python%E5%A4%84%E7%90%86%E5%90%88%E5%B9%B6%E5%8D%95%E5%85%83%E6%A0%BC/"/>
      <url>/2019/05/06/python%E5%A4%84%E7%90%86%E5%90%88%E5%B9%B6%E5%8D%95%E5%85%83%E6%A0%BC/</url>
      
        <content type="html"><![CDATA[<p>可以使用xlrd，也可以使用openpyxl，但是openpyxl读取不了.xls格式的Excel，需要转成xlsx，有点麻烦，所以使用了xlrd。</p><a id="more"></a><hr><h2 id="读取"><a href="#读取" class="headerlink" title="读取"></a><b>读取</b></h2><ul><li><em>打开文件</em></li></ul><p>xlrd也遇到了一点问题，文件如果是xls文件直接打开，在提取合并单元格的时候会拿不到数据，需要加上 formatting_info=True，formatting_info=True的时候打开.xlsx文件会报错NotImplementedError: formatting_info=True not yet implemented，加个if就好了<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">workbook = xlrd.open_workbook(path)</span><br><span class="line"><span class="keyword">if</span> path.split(<span class="string">'.xl'</span>)[<span class="number">1</span>] == <span class="string">'s'</span>:</span><br><span class="line">    workbook = xlrd.open_workbook(path, formatting_info=<span class="literal">True</span>)</span><br><span class="line"><span class="comment"># 获取sheet</span></span><br><span class="line">sheet = workbook.sheet_by_index(<span class="number">0</span>)</span><br></pre></td></tr></table></figure></p><ul><li><em>获取所有的合并单元格坐标</em></li></ul><p><img src="/2019/05/06/python处理合并单元格/excel.png" alt="突突突"><br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 获取列数</span></span><br><span class="line">r_num = sheet.nrows</span><br><span class="line"><span class="comment"># 获取行数</span></span><br><span class="line">c_num = sheet.ncols</span><br><span class="line">merge = sheet.merged_cells</span><br><span class="line">print(merge)   <span class="comment"># [(1, 5, 0, 1), (1, 5, 1, 2)], 对应上面两个合并的单元格</span></span><br></pre></td></tr></table></figure></p><ul><li><em>组装数据</em></li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">read_data =[]</span><br><span class="line"><span class="keyword">for</span> r <span class="keyword">in</span> range(r_num):</span><br><span class="line">    li = []</span><br><span class="line">    <span class="keyword">for</span> c <span class="keyword">in</span> range(c_num):</span><br><span class="line">        <span class="comment"># 读取每个单元格里的数据，合并单元格只有单元格内的第一行第一列有数据，其余空间都为空</span></span><br><span class="line">        cell_value = sheet.row_values(r)[c]</span><br><span class="line">        <span class="comment"># 判断空数据是否在合并单元格的坐标中，如果在就把数据填充进去</span></span><br><span class="line">        <span class="keyword">if</span> cell_value <span class="keyword">is</span> <span class="literal">None</span> <span class="keyword">or</span> cell_value == <span class="string">''</span>:</span><br><span class="line">            <span class="keyword">for</span> (rlow, rhigh, clow, chigh) <span class="keyword">in</span> merge:</span><br><span class="line">                <span class="keyword">if</span> rlow &lt;= r &lt; rhigh:</span><br><span class="line">                    <span class="keyword">if</span> clow &lt;= c &lt; chigh:</span><br><span class="line">                        cell_value = sheet.cell_value(rlow, clow)</span><br><span class="line">        li.append(cell_value)</span><br><span class="line">    read_data.append(li)</span><br></pre></td></tr></table></figure><h2 id="写入"><a href="#写入" class="headerlink" title="写入"></a><b>写入</b></h2><p>使用的是xlwt</p><ul><li><em>直接上代码</em></li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line">f = xlwt.Workbook()</span><br><span class="line">sheet1 = f.add_sheet(<span class="string">'sheet1'</span>, cell_overwrite_ok=<span class="literal">True</span>)</span><br><span class="line">headers = [<span class="string">'序号'</span>, <span class="string">"姓名"</span>, <span class="string">'列表'</span>, <span class="string">'1月'</span>, <span class="string">'2月'</span>, <span class="string">'3月'</span>, <span class="string">'4月'</span>, <span class="string">'5月'</span>]</span><br><span class="line">name = [<span class="string">'1-AAA'</span>, <span class="string">'2-BBB'</span>, <span class="string">'3-CCC'</span>, <span class="string">'4-DDD'</span>]</span><br><span class="line">status = [<span class="string">'累计应发数'</span>, <span class="string">'累计专项扣除-五险一金'</span>, <span class="string">'累计免税收入'</span>, <span class="string">'累计扣个税'</span>]</span><br><span class="line"><span class="comment"># 生成第一行header</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">0</span>,len(headers)):</span><br><span class="line">    sheet1.write(<span class="number">0</span>,i,headers[i])</span><br><span class="line"></span><br><span class="line"><span class="comment"># 生成序号、姓名单元格</span></span><br><span class="line">i, j = <span class="number">1</span>, <span class="number">0</span></span><br><span class="line"><span class="keyword">while</span> i &lt; <span class="number">10</span>*len(name) <span class="keyword">and</span> j &lt; len(name):</span><br><span class="line">    sheet1.write_merge(i,i+<span class="number">9</span>,<span class="number">0</span>,<span class="number">0</span>,name[j].split(<span class="string">'-'</span>)[<span class="number">0</span>])</span><br><span class="line">    sheet1.write_merge(i,i+<span class="number">9</span>,<span class="number">1</span>,<span class="number">1</span>,name[j].split(<span class="string">'-'</span>)[<span class="number">1</span>])</span><br><span class="line">    i += <span class="number">10</span></span><br><span class="line">    j += <span class="number">1</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#生成列表</span></span><br><span class="line">i = <span class="number">0</span></span><br><span class="line"><span class="keyword">while</span> i &lt; <span class="number">10</span>*len(column0):</span><br><span class="line">    <span class="keyword">for</span> j <span class="keyword">in</span> range(<span class="number">0</span>,len(status)):</span><br><span class="line">        sheet1.write(j+i+<span class="number">1</span>,<span class="number">3</span>,status[j])</span><br><span class="line">    i += <span class="number">10</span></span><br><span class="line"><span class="comment"># 保存</span></span><br><span class="line">f.save(path)</span><br></pre></td></tr></table></figure><h2 id="Django导出"><a href="#Django导出" class="headerlink" title="Django导出"></a><b>Django导出</b></h2><ul><li><em>服务端代码</em></li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">excel_stream = io.BytesIO()</span><br><span class="line"><span class="comment"># BytesIO流（在内存中读写）</span></span><br><span class="line">f.save(excel_stream)</span><br><span class="line">res = excel_stream.getvalue()</span><br><span class="line">excel_stream.close()</span><br><span class="line">response = HttpResponse(content_type=<span class="string">'application/vnd.ms-excel'</span>)</span><br><span class="line"><span class="keyword">from</span> urllib <span class="keyword">import</span> parse</span><br><span class="line">file_name = str(path.name).split(<span class="string">'.xls'</span>)[<span class="number">0</span>] + <span class="string">'(计算后).xls'</span></span><br><span class="line">response[<span class="string">'Content-Disposition'</span>] = <span class="string">'attachment;filename='</span> + parse.quote(file_name)</span><br><span class="line">response.write(res)</span><br><span class="line"><span class="keyword">return</span> response</span><br></pre></td></tr></table></figure><ul><li><em>前端</em></li></ul><p>写一个简单的form表单就行了</p>]]></content>
      
      
      <categories>
          
          <category> Python </category>
          
      </categories>
      
      
        <tags>
            
            <tag> python </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Linux服务器Nginx部署图片</title>
      <link href="/2019/05/05/Linux%E9%83%A8%E7%BD%B2%E5%9B%BE%E7%89%87/"/>
      <url>/2019/05/05/Linux%E9%83%A8%E7%BD%B2%E5%9B%BE%E7%89%87/</url>
      
        <content type="html"><![CDATA[<p>部署一个<a href="http://background.wxy.email/" rel="external nofollow noopener noreferrer" target="_blank">静态页面</a>做测试</p><a id="more"></a><hr><ul><li><strong>文件路径是这样的</strong></li></ul><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">.</span><br><span class="line">└── background</span><br><span class="line">    ├── images</span><br><span class="line">    │   ├── 1.jpg</span><br><span class="line">    │   ├── 2.jpg</span><br><span class="line">    │   └── 3.jpg</span><br><span class="line">    └── index.html</span><br></pre></td></tr></table></figure><ul><li><strong><code>index.html</code> 中的路径是这样的</strong></li></ul><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">style="background-image:url('/images/1.jpg')"</span><br></pre></td></tr></table></figure><ul><li><strong><code>/etc/nginx/nginx.conf</code> 是这样的</strong></li></ul><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">server &#123;</span><br><span class="line">        listen 80;</span><br><span class="line">        server_name background.wxy.email;    # 域名/ip</span><br><span class="line">        charset utf-8;</span><br><span class="line">        location / &#123;</span><br><span class="line">                root /home/www/background;  #  html存储路径</span><br><span class="line">                index index.html;     #  html名称</span><br><span class="line">        &#125;</span><br><span class="line">        location /images/ &#123;   </span><br><span class="line">                alias /home/www/background/images/;   # 图片存储路径</span><br><span class="line">                autoindex on;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><ul><li><strong>修改文件夹权限</strong></li></ul><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo chmod 777 -R /home/www/background/</span><br></pre></td></tr></table></figure><ul><li><strong>启动 / 重启nginx</strong></li></ul><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">sudo service nginx start  # 启动</span><br><span class="line">sudo service nginx reload  #重启</span><br></pre></td></tr></table></figure><ul><li><strong>浏览器中输入网址</strong></li><li><strong>参考项目：<a href="http://background.wxy.email/" rel="external nofollow noopener noreferrer" target="_blank">http://background.wxy.email/</a></strong></li></ul>]]></content>
      
      
      <categories>
          
          <category> 项目部署 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 项目部署 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Python之bisect模块, 有序列表插入数据</title>
      <link href="/2019/04/27/python-bisect/"/>
      <url>/2019/04/27/python-bisect/</url>
      
        <content type="html"><![CDATA[<p>bisect是python的内置模块, 可以使用它来插入数据, 并且插入的数据不会影响列表的排序, <strong>但是原有列表需要是有序的, 并且不能是倒序</strong>.</p><a id="more"></a><hr><ul><li>bisect.bisect(data, n), 查找并返回n插入的位置下标, 但并不会插入.</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">data = [<span class="number">1</span>, <span class="number">7</span>, <span class="number">3</span>, <span class="number">8</span>, <span class="number">5</span>]</span><br><span class="line">data.sort()   </span><br><span class="line">bisect.bisect(data, <span class="number">6</span>)    <span class="comment"># 返回 3</span></span><br></pre></td></tr></table></figure><ul><li>bisect.insort(data, n), 插入n, 不会影响列表顺序.</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">bisect.insort(data, <span class="number">6</span>)</span><br><span class="line">print(data)     <span class="comment"># [1, 3, 5, 6, 7, 8]</span></span><br></pre></td></tr></table></figure><ul><li>bisect.bisect_left()、bisect_right(), 这两个函数用来处理插入重复数值的情况，返回将会插入的位置.</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">data = [<span class="number">1</span>, <span class="number">3</span>, <span class="number">5</span>, <span class="number">6</span>, <span class="number">7</span>, <span class="number">8</span>]</span><br><span class="line">bisect.bisect_left(data, <span class="number">6</span>)   <span class="comment">#返回 3</span></span><br><span class="line">bisect.bisect_reght(data, <span class="number">6</span>)   <span class="comment">#返回 4</span></span><br></pre></td></tr></table></figure><ul><li>bisect.insort_left()、insort_right(), 对应bisect.bisect_left()、bisect_right(), 用来插入数据.</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">bisect.insort_left(data, <span class="number">6</span>)</span><br><span class="line">print(data)   <span class="comment">#返回 [1, 3, 5, 6, 6, 7, 8]  元素`5`后的`6`是新插入的数据</span></span><br><span class="line">bisect.insort_reght(data, <span class="number">6</span>)</span><br><span class="line">print(data)   <span class="comment">#返回 [1, 3, 5, 6, 6, 6, 7, 8] 元素`7`前的`6`是新插入的数据</span></span><br><span class="line"><span class="comment">#insort_left从左侧插入, insort_reght从右侧插入</span></span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> Python </category>
          
      </categories>
      
      
        <tags>
            
            <tag> python </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Python socket 实现服务端和客户端数据传输（TCP）</title>
      <link href="/2019/03/24/Python-socket/"/>
      <url>/2019/03/24/Python-socket/</url>
      
        <content type="html"><![CDATA[<p>TCP数据传输</p><a id="more"></a><hr><ul><li><strong>服务器端</strong></li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> socket</span><br><span class="line"></span><br><span class="line"><span class="comment">#创建一个socket对象</span></span><br><span class="line">socket_server = socket.socket(socket.AF_INET, socket.SOCK_STREAM)</span><br><span class="line">host = <span class="string">"127.0.0.1"</span></span><br><span class="line">port = <span class="number">9999</span></span><br><span class="line"><span class="comment">#绑定地址</span></span><br><span class="line">socket_server.bind((host, port))</span><br><span class="line"><span class="comment">#设置监听</span></span><br><span class="line">socket_server.listen(<span class="number">5</span>)</span><br><span class="line"><span class="comment"># socket_server.accept()返回一个元组, 元素1为客户端的socket对象, 元素2为客户端的地址(ip地址，端口号)</span></span><br><span class="line">client_socket, address = socket_server.accept()</span><br><span class="line"></span><br><span class="line"><span class="comment">#while循环是为了让对话持续</span></span><br><span class="line"><span class="keyword">while</span> <span class="literal">True</span>:</span><br><span class="line">    <span class="comment">#接收客户端的请求</span></span><br><span class="line">    recvmsg = client_socket.recv(<span class="number">1024</span>)</span><br><span class="line">    <span class="comment">#把接收到的数据进行解码</span></span><br><span class="line">    strData = recvmsg.decode(<span class="string">"utf-8"</span>)</span><br><span class="line">    <span class="comment">#设置退出条件</span></span><br><span class="line">    <span class="keyword">if</span> strData == <span class="string">'q'</span>:</span><br><span class="line">        <span class="keyword">break</span></span><br><span class="line">    print(<span class="string">"接收: %s"</span> % strData)</span><br><span class="line">    <span class="comment">#输入</span></span><br><span class="line">    msg = input(<span class="string">"发送: "</span>)</span><br><span class="line">    <span class="comment">#发送数据，需要进行编码</span></span><br><span class="line">    client_socket.send(msg.encode(<span class="string">"utf-8"</span>))</span><br><span class="line"><span class="comment">#关闭服务器端</span></span><br><span class="line">socket_server.close()</span><br></pre></td></tr></table></figure><ul><li><strong>客户端</strong></li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> socket</span><br><span class="line"><span class="comment">#创建一个socket对象</span></span><br><span class="line">client = socket.socket(socket.AF_INET, socket.SOCK_STREAM)</span><br><span class="line"></span><br><span class="line">host = <span class="string">"127.0.0.1"</span></span><br><span class="line">port = <span class="number">9999</span></span><br><span class="line"><span class="comment">#连接服务端</span></span><br><span class="line">client.connect((host, port))</span><br><span class="line"></span><br><span class="line"><span class="keyword">while</span> <span class="literal">True</span>:</span><br><span class="line">    send_msg = input(<span class="string">"发送: "</span>)</span><br><span class="line">    <span class="comment">#设置退出条件</span></span><br><span class="line">    <span class="keyword">if</span> send_msg == <span class="string">"q"</span>:</span><br><span class="line">        <span class="keyword">break</span></span><br><span class="line">    send_msg = send_msg</span><br><span class="line">    <span class="comment">#发送数据，编码</span></span><br><span class="line">    client.send(send_msg.encode(<span class="string">"utf-8"</span>))</span><br><span class="line">    <span class="comment">#接收服务端返回的数据</span></span><br><span class="line">    msg = client.recv(<span class="number">1024</span>)</span><br><span class="line">    <span class="comment">#解码</span></span><br><span class="line">    print(<span class="string">"接收：%s"</span>, % msg.decode(<span class="string">"utf-8"</span>))</span><br><span class="line"><span class="comment">#关闭客户端</span></span><br><span class="line">client.close()</span><br></pre></td></tr></table></figure><ul><li><strong>流程图</strong></li></ul><p><img src="/2019/03/24/Python-socket/1.png" alt="在这里插入图片描述"><br>图片来源：<a href="https://blog.csdn.net/slavik_/article/details/82430717" rel="external nofollow noopener noreferrer" target="_blank">https://blog.csdn.net/slavik_/article/details/82430717</a></p>]]></content>
      
      
      <categories>
          
          <category> Python </category>
          
      </categories>
      
      
        <tags>
            
            <tag> python </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>nginx的安装和配置</title>
      <link href="/2019/01/26/nginx%E5%AE%89%E8%A3%85%E9%85%8D%E7%BD%AE/"/>
      <url>/2019/01/26/nginx%E5%AE%89%E8%A3%85%E9%85%8D%E7%BD%AE/</url>
      
        <content type="html"><![CDATA[<p>仅供参考, 不同系统操作可能会不一样, 中间遇到错误, 找一下错误原因, 一般是单词”error“后的一句, 复制, 百度, vim操作下面有注释</p><a id="more"></a><hr><h3 id="安装nginx"><a href="#安装nginx" class="headerlink" title="安装nginx"></a><b>安装nginx</b></h3><ul><li><strong>方法一</strong>：这个是最简单的方法，但是很有可能会失败，这里搞定了就能直接去配置nginx了</li></ul><table><thead><tr><th>说明</th><th>命令</th></tr></thead><tbody><tr><td>1.安装g++a</td><td><code>sudo apt-get install g++</code></td></tr><tr><td>2.使用apt直接安装</td><td><code>sudo apt-get install nginx</code></td></tr><tr><td>3.启动</td><td><code>service nginx start</code></td></tr></tbody></table><ul><li><strong>方法二</strong></li></ul><ol><li><p><strong>下载nginx及相关组件输入 :</strong> </p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">cd  /usr/local/src/ </span><br><span class="line">wget http://nginx.org/download/nginx-1.10.2.tar.gz</span><br><span class="line">wget http://www.openssl.org/source/openssl-fips-2.0.10.tar.gz</span><br><span class="line">wget http://zlib.net/zlib-1.2.11.tar.gz</span><br><span class="line">wget ftp://ftp.csx.cam.ac.uk/pub/software/programming/pcre/pcre-8.40.tar.gz</span><br></pre></td></tr></table></figure></li><li><p><strong>安装c++编译环境</strong></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">yum install gcc-c++  或者  apt-get install g++   </span><br><span class="line">中间需要确认一次, 输入: y</span><br></pre></td></tr></table></figure></li><li><p><strong>安装nginx及相关组件</strong><br>安装openssl: </p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">tar zxvf openssl-fips-2.0.10.tar.gz</span><br><span class="line">cd openssl-fips-2.0.10</span><br><span class="line">./config &amp;&amp; make &amp;&amp; make install</span><br><span class="line">cd /usr/local/src/  或者   cd ..   回到src文件夹中</span><br></pre></td></tr></table></figure><p>安装pcre: tar zxvf pcre-8.40.tar.gz</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">cd pcre-8.40</span><br><span class="line">./configure &amp;&amp; make &amp;&amp; make install</span><br><span class="line">cd /usr/local/src/ 或者  cd ..   回到src文件夹中</span><br></pre></td></tr></table></figure><p>安装zlib: tar zxvf zlib-1.2.11.tar.gz</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">cd zlib-1.2.11</span><br><span class="line">./configure &amp;&amp; make &amp;&amp; make install</span><br><span class="line">cd /usr/local/src/ 或者  cd ..   回到src文件夹中</span><br></pre></td></tr></table></figure><p>安装nginx : tar zxvf nginx-1.10.2.tar.gz</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">cd nginx-1.10.2</span><br><span class="line">./configure &amp;&amp; make &amp;&amp; make install</span><br></pre></td></tr></table></figure></li></ol><h3 id="启动-nginx"><a href="#启动-nginx" class="headerlink" title="启动 nginx"></a><b>启动 nginx</b></h3><ul><li>先找到nginx的安装位置, 输入:</li></ul><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">whereis nginx    # 得到路径 例如: /usr/local/nginx</span><br></pre></td></tr></table></figure><ul><li>进入得到的路径:</li></ul><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">cd /usr/local/nginx</span><br></pre></td></tr></table></figure><ul><li>启动:</li></ul><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">/usr/local/nginx/sbin/nginx</span><br><span class="line">或者  </span><br><span class="line">cd  /usr/local/nginx/sbin/  输入: nginx 或 ./nginx</span><br></pre></td></tr></table></figure><ul><li>查看启动状态:</li></ul><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ps -aux | grep nginx    # 出现三条记录就表示已经启动成功</span><br></pre></td></tr></table></figure><ul><li>如果启动成功, 不改配置文件打开自己的域名也能看到一个默认页面, 说明域名已经绑定成功​​<br><img src="/2019/01/26/nginx安装配置/n-welcome.png" alt="突突突"></li></ul><h3 id="配置nginx"><a href="#配置nginx" class="headerlink" title="配置nginx"></a><b>配置nginx</b></h3><ul><li>进入nginx配置文件夹</li></ul><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">whereis nginx    # 得到路径 例如: /usr/local/nginx</span><br><span class="line">cd /usr/local/nginx</span><br></pre></td></tr></table></figure><ul><li>打开配置文件</li></ul><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">vim nginx.conf</span><br></pre></td></tr></table></figure><ul><li>​​找到如图所示的地方, 位置和文件名称改为自己需要展示的网页<br><img src="/2019/01/26/nginx安装配置/n-config.png" alt="突突突"></li></ul><h3 id="注释"><a href="#注释" class="headerlink" title="注释"></a><b>注释</b></h3><ul><li>nginx操作命令:</li></ul><ol><li><p>启动</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">/usr/local/nginx/sbin/nginx</span><br></pre></td></tr></table></figure></li><li><p>停止/重启</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">/usr/local/nginx/sbin/nginx -s stop(quit、reload)</span><br></pre></td></tr></table></figure></li><li><p>命令帮助</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">/usr/local/nginx/sbin/nginx -h</span><br></pre></td></tr></table></figure></li><li><p>验证配置文件</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">/usr/local/nginx/sbin/nginx -t</span><br></pre></td></tr></table></figure></li><li><p>配置文件</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">vim /usr/local/nginx/conf/nginx.conf</span><br></pre></td></tr></table></figure></li><li><p>vim简单操作命令: 深入了解百度<br>  开启编辑：按“i”或者“Insert”键<br>  退出编辑：“Esc”键<br>  退出vim：“:q”<br>  保存vim：“:w”<br>  保存退出vim：“:wq”<br>  不保存退出vim：“:q!”</p></li><li><p>查看当前系统版本, 输入: </p> <figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">cat /etc/redhat-release 或 : lsb_release -a</span><br></pre></td></tr></table></figure></li></ol><p>参考: <a href="https://www.cnblogs.com/taiyonghai/p/6728707.html" rel="external nofollow noopener noreferrer" target="_blank">https://www.cnblogs.com/taiyonghai/p/6728707.html</a></p>]]></content>
      
      
      <categories>
          
          <category> 项目部署 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 项目部署 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Python os文件操作</title>
      <link href="/2018/12/25/Python-os%E6%96%87%E4%BB%B6%E6%93%8D%E4%BD%9C/"/>
      <url>/2018/12/25/Python-os%E6%96%87%E4%BB%B6%E6%93%8D%E4%BD%9C/</url>
      
        <content type="html"><![CDATA[<ul><li>直接上代码<a id="more"></a></li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> os</span><br><span class="line"><span class="keyword">import</span> shutil</span><br><span class="line">filePath = <span class="string">'/xxx/'</span></span><br><span class="line">newPath = <span class="string">'/yyy/'</span></span><br><span class="line"><span class="comment"># 创建文件夹</span></span><br><span class="line">os.mkdir(path)</span><br><span class="line"><span class="comment"># os.listdir(filePath) 获取文件夹目录</span></span><br><span class="line"><span class="keyword">for</span> filename <span class="keyword">in</span> os.listdir(filePath):</span><br><span class="line">    <span class="comment"># 获取文件创建时间，两种方式结果相同</span></span><br><span class="line">    t = os.stat(filePath+<span class="string">"/"</span>+filename).st_ctime</span><br><span class="line">    t2 = os.path.getctime(filePath+<span class="string">"/"</span>+filename)</span><br><span class="line">    <span class="comment"># 获取文件访问时间</span></span><br><span class="line">    t3 = os.path.getatime(filePath+<span class="string">"/"</span>+filename)</span><br><span class="line">    t4 = os.stat(filePath+<span class="string">"/"</span>+filename).st_atime</span><br><span class="line">    <span class="comment"># 获取文件修改时间</span></span><br><span class="line">    t5 = os.path.getmtime(filePath+<span class="string">"/"</span>+filename)</span><br><span class="line">    t6 = os.stat(filePath+<span class="string">"/"</span>+filename).st_mtime</span><br><span class="line">    <span class="comment"># 获取文件大小，单位byte</span></span><br><span class="line">    t7 = os.path.getsize(filePath+<span class="string">"/"</span>+filename)</span><br><span class="line">    t8 = os.stat(filePath+<span class="string">"/"</span>+filename).st_size</span><br><span class="line">    <span class="comment"># 复制文件</span></span><br><span class="line">    shutil.copyfile(filePath, newPath)</span><br><span class="line">    <span class="comment"># 复制文件夹，newPath必须不存在</span></span><br><span class="line">    shutil.copytree(filePath,newPath)</span><br><span class="line">    <span class="comment"># 移动文件/文件夹</span></span><br><span class="line">    shutil.move(filePath, newPath)</span><br><span class="line">    <span class="comment"># 重命名文件/文件夹</span></span><br><span class="line">    os.rename(filePath,newPath)</span><br><span class="line">    <span class="comment"># 删除文件，不能删除文件夹</span></span><br><span class="line">    os.remove(filePath+<span class="string">"/"</span>+filename)</span><br><span class="line"><span class="comment"># 删除文件夹，只能删除空的文件夹</span></span><br><span class="line">os.rmdir(filePath)</span><br><span class="line"><span class="comment"># 删除文件夹，空的、非空的文件夹都能删除</span></span><br><span class="line">shutil.rmtree(filePath)</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> Python </category>
          
      </categories>
      
      
        <tags>
            
            <tag> python </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Git本地项目上传到远程仓库</title>
      <link href="/2018/09/09/git-init/"/>
      <url>/2018/09/09/git-init/</url>
      
        <content type="html"><![CDATA[<p>Git的使用</p><a id="more"></a><hr><ul><li>进入项目首目录</li></ul><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">git init   #初始化仓库</span><br><span class="line">git add .  </span><br><span class="line">git commit -m "提交"   # 提交代码</span><br><span class="line">git remote add xxx git@仓库地址</span><br></pre></td></tr></table></figure><ul><li>复制自己的公钥，添加到远程仓库</li><li>push代码    </li></ul><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">git push xxx master</span><br><span class="line">或者是</span><br><span class="line">git push -f xxx master</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 项目部署 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 项目部署 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Python栈的简单实现</title>
      <link href="/2018/08/10/python%E6%A0%88%E7%9A%84%E7%AE%80%E5%8D%95%E5%AE%9E%E7%8E%B0/"/>
      <url>/2018/08/10/python%E6%A0%88%E7%9A%84%E7%AE%80%E5%8D%95%E5%AE%9E%E7%8E%B0/</url>
      
        <content type="html"><![CDATA[<p>栈(stacks)是一种数据结构，是一种只能在一端进行插入和删除操作的特殊线性表, 它按照先进后出的原则存储数据(Last In First Out - LIFO)。</p><a id="more"></a><hr><ul><li><strong>代码(使用list):</strong></li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Stack</span><span class="params">(object)</span>:</span></span><br><span class="line">    <span class="comment"># 初始化</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self)</span>:</span></span><br><span class="line">        self.items = []</span><br><span class="line">    <span class="comment"># 判断是否为空</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">is_empty</span><span class="params">(self)</span>:</span></span><br><span class="line">        <span class="keyword">return</span> self.items == []</span><br><span class="line">    <span class="comment"># 返回栈顶元素</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">peek</span><span class="params">(self)</span>:</span></span><br><span class="line">        <span class="keyword">if</span> self.is_empty():</span><br><span class="line">            <span class="keyword">raise</span> KeyError(<span class="string">"stack is None"</span>)</span><br><span class="line">        <span class="keyword">return</span> self.items[len(self.items) - <span class="number">1</span>]</span><br><span class="line">    <span class="comment">#返回栈的大小</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">size</span><span class="params">(self)</span>:</span></span><br><span class="line">        <span class="keyword">return</span> len(self.items)</span><br><span class="line">    <span class="comment"># 入栈，把新的元素放进栈里</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">push</span><span class="params">(self, item)</span>:</span></span><br><span class="line">        self.items.append(item)</span><br><span class="line">    <span class="comment"># 出栈，把栈顶元素丢出去</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">pop</span><span class="params">(self)</span>:</span></span><br><span class="line">        <span class="keyword">if</span> self.is_empty():</span><br><span class="line">            <span class="keyword">raise</span> KeyError(<span class="string">"stack is None"</span>)</span><br><span class="line">        <span class="keyword">return</span> self.items.pop()</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">'__main__'</span> :</span><br><span class="line">    a_stack = Stack()</span><br><span class="line">    <span class="comment"># 插入元素</span></span><br><span class="line">    a_stack.push(<span class="string">'一'</span>)</span><br><span class="line">    a_stack.push(<span class="string">'二'</span>)</span><br><span class="line">    a_stack.push(<span class="string">'三'</span>)</span><br><span class="line">    </span><br><span class="line">    print(a_stack.size())    <span class="comment"># 3</span></span><br><span class="line">    print(a_stack.peek())    <span class="comment"># 三</span></span><br><span class="line">    print(a_stack.pop())     <span class="comment"># 三</span></span><br><span class="line">    print(a_stack.peek())    <span class="comment"># 二</span></span><br><span class="line">    print(a_stack.size())    <span class="comment"># 2</span></span><br><span class="line">    print(a_stack.is_empty())  <span class="comment"># False</span></span><br><span class="line">    a_stack.__init__()</span><br><span class="line">    print(a_stack.is_empty())  <span class="comment"># True</span></span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> Python </category>
          
      </categories>
      
      
        <tags>
            
            <tag> python </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Python的内存管理机制</title>
      <link href="/2018/07/23/python%E7%9A%84%E5%86%85%E5%AD%98%E7%AE%A1%E7%90%86%E6%9C%BA%E5%88%B6/"/>
      <url>/2018/07/23/python%E7%9A%84%E5%86%85%E5%AD%98%E7%AE%A1%E7%90%86%E6%9C%BA%E5%88%B6/</url>
      
        <content type="html"><![CDATA[<p><strong>Python 默认内存处理机制为GC(垃圾回收)</strong></p><a id="more"></a><hr><h3 id="内存泄漏"><a href="#内存泄漏" class="headerlink" title="内存泄漏"></a><b><strong>内存泄漏</strong></b></h3><p><b>指由于疏忽或错误造成程序未能释放已经不再使用的内存的情况。</b></p><ul><li>内存泄漏并非指内存在物理上的消失，而是应用程序分配某段内存后, 由于设计错误, 失去了对该段内存的控制, 因而造成了内存的浪费, 导致程序运行速度减慢甚至系统崩溃等严重后果。有 <code>__del__()</code> 函数的对象间的循环引用是导致内存泄漏的主凶。</li><li>不使用一个对象时使用: del object 来删除一个对象的引用计数就可以有效防止内存泄漏问题。<br>通过 Python 扩展模块 gc 来查看不能回收的对象的详细信息, 也可以通过 sys.getrefcount(obj) 来获取对象的引用计数, 并根据返回值是否为 <code>0</code> 来判断是否内存泄漏。<h3 id="内存管理机制"><a href="#内存管理机制" class="headerlink" title="内存管理机制"></a><b><strong>内存管理机制</strong></b></h3>一. <strong>引用计数</strong><br>通过引用计数来保持对内存中的变量跟踪Python内部记录中所有在使用对象各有多少个引用。<br>Python中有个内部跟踪变量叫做引用计数器, 每个变量有多少个引用, 简称引用计数。当对象被创建时就创建了一个引用计数。当某个对象的引用计数为0时, 对象就不在需要, 就列入了垃圾回收队列。<br>二. <strong>垃圾回收</strong></li><li><strong><em>引用计数</em></strong>：每个对象中都有ob-refcnt来做引用计数。当一个对象被引用, ob-refcnt就会增加, 当引用的对象删除, 那么ob-refcnt就会减少, 当ob-refcnt为零, 就会释放该对象的内存空间。</li><li><strong><em>标记清除</em></strong>：解决循环引用的问题。先按需分配, 等到没有空闲内存的时候, 从寄存器和程序栈上的引用出发, 遍历所有对象和引用把所有能访问的打标记, 最后将没有标记的对象释放掉。</li><li><strong><em>分代技术</em></strong>：提高效率, 提高垃圾回收的效率, 按照存活时间, 分成不同的集合。将内存块按照其存活时间划分为不同的集合。每个集合就称为一个“代”, 垃圾回收的频率随代的存活时间增大而减小。Python默认定义分代对象集合, 引用数越大, 对象的存活时间越长。</li></ul><p>三. <strong>内存池机制</strong></p><ul><li>在Python中, 大多数申请的都是小块的内存, 会执行大量的malloc和free操作。Python引入了一个内存池机制, 用于管理对小块内存的申请和释放, 即Pymalloc机制。它将不用的内存放到内存池而不是返回给操作系统。</li><li>当申请的内存小于256字节时, PyObject_Malloc会在内存池中申请内存; 当申请的内存大于256字节时, PyObject_Malloc的行为将蜕化为malloc的行为。当然, 通过修改Python源代码, 我们可以改变这个默认值, 从而改变Python的默认内存管理行为。</li><li>对于Python对象, 如整数, 浮点数和List, 都有其独立的私有内存池, 对象间不共享他们的内存池。也就是说如果你分配又释放了大量的整数, 用于缓存这些整数的内存就不能再分配给浮点数。</li></ul>]]></content>
      
      
      <categories>
          
          <category> Python </category>
          
      </categories>
      
      
        <tags>
            
            <tag> python </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Python简单操作txt文件</title>
      <link href="/2018/07/20/python%E7%AE%80%E5%8D%95%E6%93%8D%E4%BD%9C%E6%96%87%E4%BB%B6/"/>
      <url>/2018/07/20/python%E7%AE%80%E5%8D%95%E6%93%8D%E4%BD%9C%E6%96%87%E4%BB%B6/</url>
      
        <content type="html"><![CDATA[<p>还是以最简单的例子开始，先来操作txt文件吧</p><a id="more"></a><hr><h3 id="打开文件"><a href="#打开文件" class="headerlink" title="打开文件"></a><b>打开文件</b></h3><ul><li><b>使用open()打开文件</b></li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">f = open(<span class="string">"xxx.txt"</span>, <span class="string">"w+"</span>)</span><br></pre></td></tr></table></figure><ul><li><b>打开模式  </b></li></ul><p>r: 只能读, 若文件不存在报错<br>r+: 可读可写, 若文件不存在报错, 如果写入会覆盖源文件<br>w: 只能写, 若文件不存在创建, 写入会覆盖源文件<br>w+: 可读可写, 若文件不存在创建, 写入会覆盖源文件<br>a: 只能写, 若文件不存在创建, 追加写入<br>a+: 可读可写, 若文件不存在创建, 追加写入</p><h3 id="编辑文件"><a href="#编辑文件" class="headerlink" title="编辑文件"></a><b>编辑文件</b></h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">f.read()               <span class="comment"># 读取整个文件</span></span><br><span class="line">f.read(n)              <span class="comment"># 每次读取n个字节, 指针向后移动</span></span><br><span class="line">f.readline()           <span class="comment"># 每次读取一行, 指针向后移动</span></span><br><span class="line">f.readlines()          <span class="comment"># 读取整个文件, 把文件以行分割, 放入一个列表中</span></span><br><span class="line">f.write(<span class="string">"写入数据\n"</span>)   <span class="comment"># \n表示换行</span></span><br></pre></td></tr></table></figure><p><b>注意:</b> 文件的大小不能确定的时候最好不要使用read()和readlines()直接读取, 当文件过大时会时程序崩溃, 可以使用read(n)指定每次读取的字节数.</p><h3 id="关闭文件"><a href="#关闭文件" class="headerlink" title="关闭文件"></a><b>关闭文件</b></h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">f.close()</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> Python </category>
          
      </categories>
      
      
        <tags>
            
            <tag> python </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>hexo部署</title>
      <link href="/2018/06/29/hexo%E9%83%A8%E7%BD%B2/"/>
      <url>/2018/06/29/hexo%E9%83%A8%E7%BD%B2/</url>
      
        <content type="html"><![CDATA[<p>本地搭建完成只是一个开始，想要真正的用起来当然少不了部署了。</p><a id="more"></a><hr><h3 id="部署到服务器"><a href="#部署到服务器" class="headerlink" title="部署到服务器"></a><strong>部署到服务器</strong></h3><ul><li>安装<a href="https://github.com/hexojs/hexo-deployer-git" rel="external nofollow noopener noreferrer" target="_blank">hexo-deployer-git</a></li></ul><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install hexo-deployer-git --save</span><br></pre></td></tr></table></figure><ul><li>修改_config.yml配置</li></ul><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">deploy:</span></span><br><span class="line"><span class="attr">  type:</span> <span class="string">git</span></span><br><span class="line"><span class="attr">  repo:</span> <span class="string">仓库地址</span> <span class="string">repository</span></span><br><span class="line"><span class="attr">  branch:</span> <span class="string">分支</span></span><br><span class="line"><span class="attr">  message:</span> <span class="string">提交信息</span></span><br></pre></td></tr></table></figure><ul><li>生成站点文件并推送至远程库。</li></ul><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">hexo clean &amp;&amp; hexo deploy</span><br></pre></td></tr></table></figure><p>前者清除站点文件，后者重新生成站点文件并将之推送到指定的库分支。</p><h3 id="配置nginx"><a href="#配置nginx" class="headerlink" title="配置nginx"></a><strong>配置nginx</strong></h3><ul><li>打开nginx配置文件，新增一个server</li></ul><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">server &#123;</span><br><span class="line">     listen 80;</span><br><span class="line">     server_name www.wxy.email;   域名</span><br><span class="line">     charset utf-8;</span><br><span class="line">     location / &#123;</span><br><span class="line">             root /home/blog;   服务器上的代码目录路径</span><br><span class="line">             index index.html;</span><br><span class="line">     &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>重启nginx</li></ul><figure class="highlight plain"><figcaption><span>shell</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">service nginx reload</span><br></pre></td></tr></table></figure><ul><li>这样就OK了，简单到意外…</li></ul>]]></content>
      
      
      <categories>
          
          <category> 项目部署 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 项目部署 </tag>
            
            <tag> hexo </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>先写第一篇：hexo快速入门</title>
      <link href="/2018/06/19/hello-world/"/>
      <url>/2018/06/19/hello-world/</url>
      
        <content type="html"><![CDATA[<p>之前朋友介绍了hexo，但是当时没有想着写博客就没有看，这几天又忽然想起来了，用了一下试试，真的挺不错的，简单实用。</p><a id="more"></a><hr><h3 id="首先需要配置环境"><a href="#首先需要配置环境" class="headerlink" title="首先需要配置环境"></a>首先需要配置环境</h3><ul><li>安装git和Node.js</li></ul><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">sudo apt-get install git-core</span><br><span class="line">wget -qO- https://raw.github.com/creationix/nvm/v0.33.11/install.sh | sh</span><br><span class="line">nvm install stable</span><br></pre></td></tr></table></figure><ul><li>安装hexo</li></ul><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install -g hexo-cli</span><br></pre></td></tr></table></figure><h3 id="开始使用"><a href="#开始使用" class="headerlink" title="开始使用"></a>开始使用</h3><ul><li>新建文件夹</li></ul><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">hexo init 文件名</span><br><span class="line">cd 文件名</span><br><span class="line">npm install</span><br></pre></td></tr></table></figure><ul><li>配置类的文件大部分在<code>_config.yml</code>中</li></ul><ul><li>写一篇新文章，并启动<figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">hexo new "写一篇新文章"</span><br><span class="line">hexo server      # 启动</span><br></pre></td></tr></table></figure></li></ul><ul><li>访问<a href="http://localhost:4000/" rel="external nofollow noopener noreferrer" target="_blank">http://localhost:4000/</a>就可以了</li></ul><h3 id="这只是一个快速入门，具体功能请看官网"><a href="#这只是一个快速入门，具体功能请看官网" class="headerlink" title="这只是一个快速入门，具体功能请看官网"></a>这只是一个快速入门，具体功能请看<a href="https://hexo.io/zh-cn/docs/" rel="external nofollow noopener noreferrer" target="_blank">官网</a></h3>]]></content>
      
      
      
        <tags>
            
            <tag> hexo </tag>
            
        </tags>
      
    </entry>
    
    
  
  
    
    
    <entry>
      <title>分类</title>
      <link href="/categories/index.html"/>
      <url>/categories/index.html</url>
      
        <content type="html"><![CDATA[]]></content>
      
    </entry>
    
    
  
</search>
