<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>selenium+chromedriver普通滑块验证</title>
      <link href="/2019/08/05/selenium-sliding-block/"/>
      <url>/2019/08/05/selenium-sliding-block/</url>
      
        <content type="html"><![CDATA[<h2 id="目标"><a href="#目标" class="headerlink" title="目标"></a><b>目标</b></h2><ul><li>使用selenium实现自动登录<br><img src="/2019/08/05/selenium-sliding-block/滑块1.png" alt="img"></li><li>整理一下思路<br><code>拿到账号密码输入框的id</code> –&gt; <code>填写账号</code> –&gt; <code>填写密码</code> –&gt; <code>出现滑块</code> –&gt; <code>滑过滑块</code> –&gt; <code>点击登录</code></li></ul><h2 id="过程"><a href="#过程" class="headerlink" title="过程"></a><b>过程</b></h2><ul><li>拿到输入框id的过程就不再介绍了，需要注意的点就是’iframe’这个元素，例：</li></ul><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">iframe</span> <span class="attr">src</span>=<span class="string">""</span> <span class="attr">frameborder</span>=<span class="string">"0"</span> <span class="attr">id</span>=<span class="string">"iframe_id"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></span><br><span class="line">...</span><br><span class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"text"</span> <span class="attr">id</span>=<span class="string">"user_name"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"text"</span> <span class="attr">id</span>=<span class="string">"password"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">button</span> <span class="attr">id</span>=<span class="string">"login"</span>&gt;</span>登录<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">...</span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">iframe</span>&gt;</span></span><br></pre></td></tr></table></figure><p>在iframe标签中的数据是无法直接拿到，需要进行一次切换才能得到数据</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 切换到iframe中</span></span><br><span class="line">driver.switch_to_frame(<span class="string">"iframe_id"</span>)</span><br><span class="line"><span class="comment"># 清除账号框</span></span><br><span class="line">driver.find_element_by_id(<span class="string">"user_name"</span>).clear()</span><br><span class="line"><span class="comment"># 填写账号</span></span><br><span class="line">driver.find_element_by_id(<span class="string">"user_name"</span>).send_keys(username)</span><br><span class="line"><span class="comment"># 填写密码</span></span><br><span class="line">driver.find_element_by_id(<span class="string">"TPL_username_1"</span>).clear().send_keys(password)</span><br></pre></td></tr></table></figure><ul><li>在填写密码的时候出现了滑块验证，先不要着急做滑块，暂时睡一会<code>time.sleep(5)</code>，然后手动去拉滑块，惊喜来了</li><li>可能是某宝的技术比较高端，<b>不管你怎么拉都是会失败的</b>，简直神奇，查了一下原因是因为使用了某种js方式检测到了当前页面是使用selenium打开的，所以认定为爬虫，不可能放你过去的</li></ul><h2 id="解决方法"><a href="#解决方法" class="headerlink" title="解决方法"></a><b>解决方法</b></h2><ul><li>需要修改chromedriver文件中的内容</li></ul><p>把’cdc_asdjflasutopfhvcZLmcfl’修改为相同字符数量的任意字符即可，要在root模式下执行，不然文件会毁损，记得备份。<br>详情参考：<a href="https://stackoverflow.com/questions/33225947/can-a-website-detect-when-you-are-using-selenium-with-chromedriver" rel="external nofollow noopener noreferrer" target="_blank">stackoverflow-selenium-with-chromedriver</a></p><ul><li>问题解决，开始自动滑块操作，正常可以去拿滑块的id进行操作，但是我想使用一个奇怪的方式</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 滑块验证</span></span><br><span class="line"><span class="keyword">from</span> selenium.webdriver.common.action_chains <span class="keyword">import</span> ActionChains</span><br><span class="line"></span><br><span class="line"><span class="comment"># 滑块验证，假设拿不到滑块的id</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">the_slider_validation</span><span class="params">(driver)</span>:</span></span><br><span class="line">    builder = ActionChains(driver)</span><br><span class="line">    <span class="comment"># 拿到登录的button</span></span><br><span class="line">    l = driver.find_element_by_id(<span class="string">"login"</span>)</span><br><span class="line">    <span class="comment"># 清除之前的action</span></span><br><span class="line">    builder.reset_actions()</span><br><span class="line">    <span class="comment"># 计算滑块移动的轨迹，  300为移动距离</span></span><br><span class="line">    track = move_mouse(<span class="number">300</span>)</span><br><span class="line">    <span class="comment"># 移动到登录button上35像素位置（就是滑块所在位置），根据登录button进行定位滑块</span></span><br><span class="line">    builder.move_to_element_with_offset(l, <span class="number">0</span>, <span class="number">-35</span>)</span><br><span class="line">    <span class="comment"># 点击左键，不释放</span></span><br><span class="line">    builder.click_and_hold()</span><br><span class="line">    time.sleep(<span class="number">0.2</span>)</span><br><span class="line">    <span class="comment"># 开始生成移动轨迹</span></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> track:</span><br><span class="line">        builder.move_by_offset(xoffset=i, yoffset=<span class="number">0</span>)</span><br><span class="line">        builder.reset_actions()</span><br><span class="line">    time.sleep(<span class="number">0.1</span>)</span><br><span class="line">    <span class="comment"># 释放左键，执行for中的操作</span></span><br><span class="line">    builder.release().perform()</span><br><span class="line"></span><br><span class="line"><span class="comment"># 鼠标移动</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">move_mouse</span><span class="params">(distance)</span>:</span></span><br><span class="line">    remaining_dist = distance</span><br><span class="line">    moves = []</span><br><span class="line">    a = <span class="number">0</span></span><br><span class="line">    <span class="comment"># 加速度，速度越来越快...</span></span><br><span class="line">    <span class="keyword">while</span> remaining_dist &gt; <span class="number">0</span>:</span><br><span class="line">        span = random.randint(<span class="number">15</span>, <span class="number">20</span>)</span><br><span class="line">        a += span</span><br><span class="line">        moves.append(a)</span><br><span class="line">        remaining_dist -= span</span><br><span class="line">        <span class="keyword">if</span> sum(moves[:<span class="number">-1</span>]) &gt; <span class="number">300</span>:</span><br><span class="line">            print(sum(moves))</span><br><span class="line">            <span class="keyword">break</span></span><br><span class="line">    <span class="keyword">return</span> moves</span><br></pre></td></tr></table></figure><ul><li>验证通过，点击登录，或者是失败进行重试</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">driver.find_element_by_id(<span class="string">"login"</span>).click()</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> Python </category>
          
      </categories>
      
      
        <tags>
            
            <tag> python </tag>
            
            <tag> 爬虫 </tag>
            
            <tag> selenium </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Django配置celery定时任务</title>
      <link href="/2019/08/02/python-celery/"/>
      <url>/2019/08/02/python-celery/</url>
      
        <content type="html"><![CDATA[<h2 id="安装celery"><a href="#安装celery" class="headerlink" title="安装celery"></a><b>安装celery</b></h2><ul><li><strong>使用redis+celery的方式（使用的是阿里源，也可以选择不用）</strong><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pip install -i https://mirrors.aliyun.com/pypi/simple/ -U <span class="string">"celery[redis]"</span></span><br></pre></td></tr></table></figure></li></ul><h2 id="修改Django的settings配置文件"><a href="#修改Django的settings配置文件" class="headerlink" title="修改Django的settings配置文件"></a><b>修改Django的settings配置文件</b></h2><ul><li><strong>添加celery文件</strong><br>在app同级目录下添加一个文件夹，例：service_celery<br>在文件夹中添加celery.py文件，内容如下：</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#!/usr/bin/env python</span></span><br><span class="line"><span class="keyword">from</span> __future__ <span class="keyword">import</span> absolute_import, unicode_literals</span><br><span class="line"><span class="keyword">import</span> os</span><br><span class="line"><span class="keyword">from</span> celery <span class="keyword">import</span> Celery</span><br><span class="line"></span><br><span class="line"><span class="comment"># set the default Django settings module for the 'celery' program.</span></span><br><span class="line"></span><br><span class="line">os.environ.setdefault(<span class="string">'DJANGO_SETTINGS_MODULE'</span>, <span class="string">'settings'</span>)</span><br><span class="line"></span><br><span class="line">app = Celery(<span class="string">'bank_service'</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># Using a string here means the worker doesn't have to serialize</span></span><br><span class="line"><span class="comment"># the configuration object to child processes.</span></span><br><span class="line"><span class="comment"># - namespace='CELERY' means all celery-related configuration keys</span></span><br><span class="line"><span class="comment">#   should have a `CELERY_` prefix.</span></span><br><span class="line">app.config_from_object(<span class="string">'django.conf:settings'</span>, namespace=<span class="string">'CELERY'</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># Load task modules from all registered Django app configs.</span></span><br><span class="line">app.autodiscover_tasks()</span><br><span class="line"></span><br><span class="line"><span class="meta">@app.task(bind=True)</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">debug_task</span><span class="params">(self)</span>:</span></span><br><span class="line">    print(<span class="string">'Request: &#123;0!r&#125;'</span>.format(self.request))</span><br></pre></td></tr></table></figure><ul><li><strong>配置settings文件，在settings.py中添加：</strong></li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># import djcelery</span></span><br><span class="line"><span class="comment"># djcelery.setup_loader()</span></span><br><span class="line"></span><br><span class="line">CACHES = &#123;</span><br><span class="line">    <span class="string">"default"</span>: &#123;</span><br><span class="line">        <span class="string">"BACKEND"</span>: <span class="string">"django_redis.cache.RedisCache"</span>,</span><br><span class="line">        <span class="string">"LOCATION"</span>: <span class="string">"redis://127.0.0.1:6379/1"</span>,</span><br><span class="line">        <span class="string">"OPTIONS"</span>: &#123;</span><br><span class="line">           <span class="string">"CLIENT_CLASS"</span>: <span class="string">"django_redis.client.DefaultClient"</span>,</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">REDIS_URL = CACHES[<span class="string">'default'</span>][<span class="string">'LOCATION'</span>]</span><br><span class="line">CELERY_BROKER_URL = REDIS_URL</span><br><span class="line">BROKER_URL = REDIS_URL</span><br></pre></td></tr></table></figure><h2 id="使用celery任务"><a href="#使用celery任务" class="headerlink" title="使用celery任务"></a><b>使用celery任务</b></h2><ul><li><strong>创建异步任务</strong><br>在app同级目录下添加一个文件夹，例：service_tasks<br>在文件夹中添加tasks.py文件，内容如下：</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> service_celery.celery <span class="keyword">import</span> app</span><br><span class="line"><span class="keyword">import</span> time</span><br><span class="line"><span class="meta">@app.task(bind=True)</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">add_num</span><span class="params">(self, a, b)</span>:</span></span><br><span class="line">    time.sleep(<span class="number">1</span>)</span><br><span class="line">    c = a+b</span><br><span class="line">    print(c)</span><br></pre></td></tr></table></figure><ul><li><strong>调用异步任务</strong></li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="keyword">from</span> service_tasks.tasks <span class="keyword">import</span> add_num</span><br><span class="line">a, b = <span class="number">1</span>, <span class="number">2</span></span><br><span class="line">add_num.delay(a, b)</span><br><span class="line">print(<span class="string">"success"</span>)</span><br></pre></td></tr></table></figure><h2 id="启动celery"><a href="#启动celery" class="headerlink" title="启动celery"></a><b>启动celery</b></h2><ul><li><strong>启动</strong></li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># ../venv_bank/bin/celery是我本地celery的路径，也可以直接使用celery</span></span><br><span class="line"><span class="comment"># worker后的都是一些配置方面的，也可以去掉</span></span><br><span class="line">../venv_bank/bin/celery -A bank_service worker --loglevel=info  --max-tasks-per-child <span class="number">500</span> --autoscale=<span class="number">8</span>,<span class="number">4</span></span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> Python </category>
          
      </categories>
      
      
        <tags>
            
            <tag> python </tag>
            
            <tag> Django </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>python字符串转字典</title>
      <link href="/2019/08/01/stringtodict/"/>
      <url>/2019/08/01/stringtodict/</url>
      
        <content type="html"><![CDATA[<h2 id="方法一"><a href="#方法一" class="headerlink" title="方法一"></a><b>方法一</b></h2><ul><li>最常见的一种，使用json进行转换</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> json</span><br><span class="line">s = &#123;<span class="string">"name"</span>: <span class="string">"张三"</span>&#125;</span><br><span class="line">print(json.loads(s))</span><br><span class="line">------</span><br><span class="line"></span><br><span class="line">&#123;<span class="string">'name'</span>: <span class="string">'张三'</span>&#125;</span><br></pre></td></tr></table></figure><ul><li>但是这种方式有可能会出现问题，例如单引号的情况</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">s = <span class="string">"&#123;'name': '张三'&#125;"</span></span><br><span class="line">print(json.loads(s))</span><br><span class="line">------</span><br><span class="line"></span><br><span class="line">Traceback (most recent call last):</span><br><span class="line">  File <span class="string">"&lt;stdin&gt;"</span>, line <span class="number">1</span>, <span class="keyword">in</span> &lt;module&gt;</span><br><span class="line">  File <span class="string">"/usr/local/Cellar/python/3.7.3/Frameworks/Python.framework/Versions/3.7/lib/python3.7/json/__init__.py"</span>, line <span class="number">348</span>, <span class="keyword">in</span> loads</span><br><span class="line">    <span class="keyword">return</span> _default_decoder.decode(s)</span><br><span class="line">  File <span class="string">"/usr/local/Cellar/python/3.7.3/Frameworks/Python.framework/Versions/3.7/lib/python3.7/json/decoder.py"</span>, line <span class="number">337</span>, <span class="keyword">in</span> decode</span><br><span class="line">    obj, end = self.raw_decode(s, idx=_w(s, <span class="number">0</span>).end())</span><br><span class="line">  File <span class="string">"/usr/local/Cellar/python/3.7.3/Frameworks/Python.framework/Versions/3.7/lib/python3.7/json/decoder.py"</span>, line <span class="number">353</span>, <span class="keyword">in</span> raw_decode</span><br><span class="line">    obj, end = self.scan_once(s, idx)</span><br><span class="line">json.decoder.JSONDecodeError: Expecting property name enclosed <span class="keyword">in</span> double quotes: line <span class="number">1</span> column <span class="number">2</span> (char <span class="number">1</span>)</span><br></pre></td></tr></table></figure><h2 id="方法二"><a href="#方法二" class="headerlink" title="方法二"></a><b>方法二</b></h2><ul><li>使用eval</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">s = <span class="string">"&#123;'name': '张三'&#125;"</span></span><br><span class="line">print(eval(s))</span><br><span class="line">------</span><br><span class="line"></span><br><span class="line">&#123;<span class="string">'name'</span>: <span class="string">'张三'</span>&#125;</span><br></pre></td></tr></table></figure><h2 id="方法三"><a href="#方法三" class="headerlink" title="方法三"></a><b>方法三</b></h2><ul><li>使用ast.literal_eval</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> ast</span><br><span class="line">s = <span class="string">"&#123;'name': '张三'&#125;"</span></span><br><span class="line">print(ast.literal_eval(s))</span><br><span class="line">------</span><br><span class="line"></span><br><span class="line">&#123;<span class="string">'name'</span>: <span class="string">'张三'</span>&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> Python </category>
          
      </categories>
      
      
        <tags>
            
            <tag> python </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>打印不合法的文件名</title>
      <link href="/2019/07/25/print-filename/"/>
      <url>/2019/07/25/print-filename/</url>
      
        <content type="html"><![CDATA[<p><strong>本文摘自《python3-cookbook》(<a href="https://python3-cookbook.readthedocs.io/zh_CN/latest/c05/p15_printing_bad_filenames.html" rel="external nofollow noopener noreferrer" target="_blank">5.15 打印不合法的文件名</a>)</strong></p><h2 id="问题"><a href="#问题" class="headerlink" title="问题"></a>问题</h2><p>你的程序获取了一个目录中的文件名列表，但是当它试着去打印文件名的时候程序崩溃， 出现了 <code>UnicodeEncodeError</code> 异常和一条奇怪的消息—— <code>surrogates not allowed</code>。</p><h2 id="解决方案"><a href="#解决方案" class="headerlink" title="解决方案"></a>解决方案</h2><p>当打印未知的文件名时，使用下面的方法可以避免这样的错误：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">bad_filename</span><span class="params">(filename)</span>:</span></span><br><span class="line">    <span class="keyword">return</span> repr(filename)[<span class="number">1</span>:<span class="number">-1</span>]</span><br><span class="line"></span><br><span class="line"><span class="keyword">try</span>:</span><br><span class="line">    print(filename)</span><br><span class="line"><span class="keyword">except</span> UnicodeEncodeError:</span><br><span class="line">    print(bad_filename(filename))</span><br></pre></td></tr></table></figure><h2 id="讨论"><a href="#讨论" class="headerlink" title="讨论"></a>讨论</h2><p>这一小节讨论的是在编写必须处理文件系统的程序时一个不太常见但又很棘手的问题。 默认情况下，Python假定所有文件名都已经根据 sys.getfilesystemencoding() 的值编码过了。 但是，有一些文件系统并没有强制要求这样做，因此允许创建文件名没有正确编码的文件。 这种情况不太常见，但是总会有些用户冒险这样做或者是无意之中这样做了( 可能是在一个有缺陷的代码中给 open() 函数传递了一个不合规范的文件名)。</p><p>当执行类似 os.listdir() 这样的函数时，这些不合规范的文件名就会让Python陷入困境。 一方面，它不能仅仅只是丢弃这些不合格的名字。而另一方面，它又不能将这些文件名转换为正确的文本字符串。 Python对这个问题的解决方案是从文件名中获取未解码的字节值比如 \xhh 并将它映射成Unicode字符 \udchh 表示的所谓的”代理编码”。 下面一个例子演示了当一个不合格目录列表中含有一个文件名为bäd.txt(使用Latin-1而不是UTF-8编码)时的样子：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> os</span><br><span class="line">files = os.listdir(<span class="string">'.'</span>)</span><br><span class="line">print(files)    <span class="comment"># ['spam.py', 'b\udce4d.txt', 'foo.txt']</span></span><br></pre></td></tr></table></figure><p>如果你有代码需要操作文件名或者将文件名传递给 open() 这样的函数，一切都能正常工作。 只有当你想要输出文件名时才会碰到些麻烦(比如打印输出到屏幕或日志文件等)。 特别的，当你想打印上面的文件名列表时，你的程序就会崩溃：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span> name <span class="keyword">in</span> files:</span><br><span class="line">     print(name)</span><br><span class="line">--------</span><br><span class="line">spam.py</span><br><span class="line">Traceback (most recent call last):</span><br><span class="line">    File <span class="string">"&lt;stdin&gt;"</span>, line <span class="number">2</span>, <span class="keyword">in</span> &lt;module&gt;</span><br><span class="line">UnicodeEncodeError: <span class="string">'utf-8'</span> codec can<span class="string">'t encode character '</span>\udce4<span class="string">' in</span></span><br><span class="line"><span class="string">position 1: surrogates not allowed</span></span><br></pre></td></tr></table></figure><p>程序崩溃的原因就是字符 \udce4 是一个非法的Unicode字符。 它其实是一个被称为代理字符对的双字符组合的后半部分。 由于缺少了前半部分，因此它是个非法的Unicode。 所以，唯一能成功输出的方法就是当遇到不合法文件名时采取相应的补救措施。 比如可以将上述代码修改如下：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span> name <span class="keyword">in</span> files:</span><br><span class="line">    <span class="keyword">try</span>:</span><br><span class="line">        print(name)</span><br><span class="line">    <span class="keyword">except</span> UnicodeEncodeError:</span><br><span class="line">        print(bad_filename(name))</span><br><span class="line">--------</span><br><span class="line">spam.py</span><br><span class="line">b\udce4d.txt</span><br><span class="line">foo.txt</span><br></pre></td></tr></table></figure><p>在 bad_filename() 函数中怎样处置取决于你自己。 另外一个选择就是通过某种方式重新编码，示例如下：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">bad_filename</span><span class="params">(filename)</span>:</span></span><br><span class="line">    temp = filename.encode(sys.getfilesystemencoding(), errors=<span class="string">'surrogateescape'</span>)</span><br><span class="line">    <span class="keyword">return</span> temp.decode(<span class="string">'latin-1'</span>)</span><br></pre></td></tr></table></figure><blockquote><p>译者注:<br>surrogateescape:<br>这种是Python在绝大部分面向OS的API中所使用的错误处理器，<br>它能以一种优雅的方式处理由操作系统提供的数据的编码问题。<br>在解码出错时会将出错字节存储到一个很少被使用到的Unicode编码范围内。<br>在编码时将那些隐藏值又还原回原先解码失败的字节序列。<br>它不仅对于OS API非常有用，也能很容易的处理其他情况下的编码错误。<br>使用这个版本产生的输出如下：</p></blockquote><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span> name <span class="keyword">in</span> files:</span><br><span class="line">     <span class="keyword">try</span>:</span><br><span class="line">         print(name)</span><br><span class="line">     <span class="keyword">except</span> UnicodeEncodeError:</span><br><span class="line">         print(bad_filename(name))</span><br><span class="line">--------</span><br><span class="line">spam.py</span><br><span class="line">bäd.txt</span><br><span class="line">foo.txt</span><br></pre></td></tr></table></figure><p>这一小节主题可能会被大部分读者所忽略。但是如果你在编写依赖文件名和文件系统的关键任务程序时， 就必须得考虑到这个。否则你可能会在某个周末被叫到办公室去调试一些令人费解的错误。</p>]]></content>
      
      
      <categories>
          
          <category> Python </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>nginx+uwsgi:uwsgi_response_write_body_do</title>
      <link href="/2019/07/22/uwsgi-error/"/>
      <url>/2019/07/22/uwsgi-error/</url>
      
        <content type="html"><![CDATA[<ul><li>使用Django下载Excel文件，发现文件比较大的时候会出现这个错误</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">uwsgi_response_write_body_do(): Broken pipe [core/writer.c line <span class="number">429</span>]</span><br><span class="line">OSError: write error</span><br></pre></td></tr></table></figure><ul><li>查了一些资料，整理一下原因，发现是因为超时了，导致客户端在获得完整响应之前已经断开了连接。</li></ul><h2 id="解决"><a href="#解决" class="headerlink" title="解决"></a>解决</h2><ul><li>在nginx的配置中修改超时时间</li></ul><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">uwsgi_read_timeout 30;</span><br><span class="line">uwsgi_connect_timeout 30;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> Python </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Django </tag>
            
            <tag> Linux </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>pipBUG：Traceback(most recent call last):File&quot;/usr/bin/pip&quot;,line9</title>
      <link href="/2019/07/19/pip-error/"/>
      <url>/2019/07/19/pip-error/</url>
      
        <content type="html"><![CDATA[<ul><li>升级了一下pip，然后：</li></ul><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">Traceback (most recent call last):</span><br><span class="line">  File "/usr/bin/pip", line 9, in &lt;module&gt;</span><br><span class="line">    from pip import main</span><br><span class="line">ImportError: cannot import name main</span><br></pre></td></tr></table></figure><ul><li>解决：</li></ul><ol><li>修改<code>/usr/bin/pip</code>：</li></ol><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo /usr/bin/pip</span><br></pre></td></tr></table></figure><ol start="2"><li>把原文件改为：</li></ol><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#!/usr/bin/python</span></span><br><span class="line"><span class="comment"># GENERATED BY DEBIAN</span></span><br><span class="line"><span class="keyword">import</span> sys</span><br><span class="line"><span class="keyword">from</span> pip <span class="keyword">import</span> __main__</span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">'__main__'</span>:</span><br><span class="line">    sys.exit(__main__._main())</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> Python </category>
          
      </categories>
      
      
        <tags>
            
            <tag> python </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>dpkg 被中断、sudo apt-get upgrade失败</title>
      <link href="/2019/07/19/dpkg-error/"/>
      <url>/2019/07/19/dpkg-error/</url>
      
        <content type="html"><![CDATA[<ol><li>写了个小插件，服务器部署的时候发现少了一些依赖，果断apt-get，然而失败了：</li></ol><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">E: dpkg 被中断，您必须手工运行 ‘sudo dpkg --configure -a’ 解决此问题。</span><br></pre></td></tr></table></figure><ol start="2"><li>找到解决办法：</li></ol><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">sudo rm /var/lib/dpkg/updates/*</span><br><span class="line">sudo apt-get update</span><br><span class="line">sudo apt-get upgrade</span><br></pre></td></tr></table></figure><ol start="3"><li>解决了么？并没有…。在<code>sudo apt-get upgrade</code>的时候失败了：</li></ol><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">您希望继续执行吗？ [Y/n] y</span><br><span class="line">正在预设定软件包 ...</span><br><span class="line">/tmp/console-setup.config.XTxu0f: 1: eval: Syntax error: Unterminated quoted string</span><br><span class="line">预设定 console-setup 失败，退出状态为 2</span><br><span class="line">/tmp/keyboard-configuration.config.lBbgUO: 1: eval: Syntax error: Unterminated quoted string</span><br><span class="line">预设定 keyboard-configuration 失败，退出状态为 2</span><br><span class="line">正在设置 install-info (6.1.0.dfsg.1-5) ...</span><br></pre></td></tr></table></figure><ol start="4"><li>继续找解决办法：</li></ol><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">sudo mv /var/lib/dpkg/info /var/lib/dpkg/info_old   # 将info文件夹更名</span><br><span class="line">sudo mkdir /var/lib/dpkg/info  # 再新建一个新的info文件夹</span><br><span class="line">sudo apt-get update</span><br><span class="line">sudo apt-get -f install  # **这一句如果有问题请看第5步**</span><br><span class="line">sudo mv /var/lib/dpkg/info/* /var/lib/dpkg/info_old   # 执行完上一步操作后会在新的info文件夹下生成一些文件，现将这些文件全部移到info_old文件夹下</span><br><span class="line">sudo rm -rf /var/lib/dpkg/info  # 把自己新建的info文件夹删掉</span><br><span class="line">sudo mv /var/lib/dpkg/info_old /var/lib/dpkg/info   # 把以前的info文件夹重新改回名字</span><br></pre></td></tr></table></figure><ol start="5"><li>在<code>sudo apt-get -f install</code>的时候又碰到了一次<code>E: dpkg 被中断，您必须手工运行 ‘sudo dpkg --configure -a’ 解决此问题。</code></li></ol><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span> 删除一下updates，重新来</span><br><span class="line">sudo rm /var/lib/dpkg/updates/*</span><br><span class="line">sudo apt-get -f install</span><br></pre></td></tr></table></figure><ol start="6"><li>终于弄完了，再来<code>sudo apt-get upgrade</code>，然鹅，有失败了：</li></ol><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line">...</span><br><span class="line">...</span><br><span class="line">正在设置 keyboard-configuration (1.108ubuntu15.5) ...</span><br><span class="line">/var/lib/dpkg/info/keyboard-configuration.config: 1: eval: Syntax error: Unterminated quoted string</span><br><span class="line">dpkg: 处理软件包 keyboard-configuration (--configure)时出错：</span><br><span class="line"> 子进程 已安装 post-installation 脚本 返回错误状态 2</span><br><span class="line">dpkg: 依赖关系问题使得 console-setup-linux 的配置工作不能继续：</span><br><span class="line"> console-setup-linux 依赖于 keyboard-configuration (= 1.108ubuntu15.5)；然而：</span><br><span class="line">  软件包 keyboard-configuration 尚未配置。</span><br><span class="line">...</span><br><span class="line">...</span><br><span class="line">dpkg: 依赖关系问题使得 ubuntu-minimal 的配置工作不能继续：</span><br><span class="line"> ubuntu-minimal 依赖于 console-setup；然而：</span><br><span class="line">  软件包 console-setup 尚未配�因为错误消息指示这是由于上一个问题导致的错误，没有写入 apport 报告。</span><br><span class="line">                                                                                                  因为错误消息指示这是由于上一个问题导致的错误，没有写入 apport 报告。</span><br><span class="line">                                  由于已经达到 MaxReports 限制，没有写入 apport 报告。</span><br><span class="line">                                                                                      �。</span><br><span class="line"></span><br><span class="line">dpkg: 处理软件包 ubuntu-minimal (--configure)时出错：</span><br><span class="line"> 依赖关系问题 - 仍未被配置</span><br><span class="line">...</span><br><span class="line">...</span><br><span class="line">W: mdadm: /etc/mdadm/mdadm.conf defines no arrays.</span><br><span class="line">正在处理用于 libc-bin (2.23-0ubuntu11) 的触发器 ...</span><br><span class="line">在处理时有错误发生：</span><br><span class="line"> keyboard-configuration</span><br><span class="line"> console-setup-linux</span><br><span class="line"> console-setup</span><br><span class="line"> ubuntu-minimal</span><br><span class="line">E: Sub-process /usr/bin/dpkg returned an error code (1)</span><br></pre></td></tr></table></figure><ol start="7"><li>有点无奈，是我的操作有问题么？继续解决：</li></ol><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">再把第4步来一遍！！！</span><br></pre></td></tr></table></figure><ol start="8"><li>再来<code>sudo apt-get upgrade</code>：</li></ol><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">终于搞定了</span><br></pre></td></tr></table></figure><ol start="9"><li>最后试一下：</li></ol><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">sudo apt-get install python-pip</span><br><span class="line"><span class="meta">#</span> 其实我就是为了安装一个pip</span><br></pre></td></tr></table></figure><p> 参考：<br> <a href="https://blog.csdn.net/zjwson/article/details/78239265" rel="external nofollow noopener noreferrer" target="_blank">https://blog.csdn.net/zjwson/article/details/78239265</a><br> <a href="https://blog.csdn.net/ycl295644/article/details/44536297" rel="external nofollow noopener noreferrer" target="_blank">https://blog.csdn.net/ycl295644/article/details/44536297</a></p>]]></content>
      
      
      <categories>
          
          <category> Linux </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Linux </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>ubuntu 服务器中文乱码</title>
      <link href="/2019/07/19/ubuntu-messy-code/"/>
      <url>/2019/07/19/ubuntu-messy-code/</url>
      
        <content type="html"><![CDATA[<p>重新装了个Ubuntu16.04的系统，结果中文乱码，找了一圈的解决办法，个人觉得最好的一个办法，赶紧记录一下，<strong>本文严重抄袭自<a href="https://www.jb51.net/article/136574.htm" rel="external nofollow noopener noreferrer" target="_blank">站长之家</a>，如有侵权请联系删除，谢谢。</strong></p><ul><li><strong>检查是否已经安装了中文包支持</strong></li></ul><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo dpkg -l | grep language-pack-zh-hans</span><br></pre></td></tr></table></figure><ul><li><strong>安装</strong></li></ul><p>如果没有安装，就安装，已经安装了就直接跳到下一步，原来的<code>language-pack-zh</code>已经更新为<code>language-pack-zh-hans</code>，所以这一步改了一下</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo apt-get install language-pack-zh-hans</span><br></pre></td></tr></table></figure><ul><li><strong>配置语言环境变量</strong></li></ul><p>1.打开<code>/etc/environment</code></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">sudo vim /etc/environment</span><br><span class="line">把下面代码添加进environment文件</span><br><span class="line">LANG="zh_CN.UTF-8"</span><br><span class="line">LANGUAGE="zh_CN:zh:en_US:en"</span><br></pre></td></tr></table></figure><p>2.打开<code>/var/lib/locales/supported.d/local</code>，文件不存在就创建文件</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">sudo vim /var/lib/locales/supported.d/local</span><br><span class="line">添加zh_CN.GB2312字符集</span><br><span class="line">en_US.UTF-8 UTF-8</span><br><span class="line">zh_CN.UTF-8 UTF-8</span><br><span class="line">zh_CN.GBK GBK</span><br><span class="line">zh_CN GB2312</span><br></pre></td></tr></table></figure><p>  3.保存文件，执行以下命令</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo locale-gen</span><br></pre></td></tr></table></figure><ul><li><strong>设置系统默认语言</strong></li></ul><p>打开<code>/etc/default/locale</code><br>    <figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo vim /etc/default/locale</span><br></pre></td></tr></table></figure></p><p>修改为：<br>    <figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">LANG="zh_CN.UTF-8"</span><br><span class="line">LANGUAGE="zh_CN:zh:en_US:en" </span><br><span class="line">sudo reboot</span><br></pre></td></tr></table></figure></p><p>然后重新开启终端就搞定了</p>]]></content>
      
      
      <categories>
          
          <category> Linux </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Linux </tag>
            
            <tag> ubuntu </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>influxdb备份和恢复数据</title>
      <link href="/2019/07/18/influxdb-back/"/>
      <url>/2019/07/18/influxdb-back/</url>
      
        <content type="html"><![CDATA[<h2 id="首先理一下步骤"><a href="#首先理一下步骤" class="headerlink" title="首先理一下步骤"></a><b>首先理一下步骤</b></h2><p><code>备份元数据--&gt;备份数据库--&gt;恢复元数据--&gt;恢复数据库</code></p><h2 id="操作"><a href="#操作" class="headerlink" title="操作"></a><b>操作</b></h2><ul><li>备份元数据</li></ul><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">influxd backup 元数据存储位置</span><br><span class="line">influxd backup -host localhost:8088 元数据存储位置   # 远程备份</span><br></pre></td></tr></table></figure><ul><li>备份数据库</li></ul><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">influxd backup -database database_name  数据存储位置</span><br><span class="line">influxd backup -database database_name -host localhost:8088 数据存储位置   # 远程备份</span><br></pre></td></tr></table></figure><ul><li>恢复元数据</li></ul><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">influxd restore -metadir /var/lib/influxdb/meta/ 元数据存储位置</span><br></pre></td></tr></table></figure><ul><li>恢复数据库</li></ul><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">influxd restore -database database_name -datadir /var/lib/influxdb/data 数据存储位置</span><br></pre></td></tr></table></figure><ul><li>修改权限</li></ul><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">chown -R influxdb:influxdb /var/lib/influxdb</span><br></pre></td></tr></table></figure><ul><li>重启influxdb</li></ul><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">service influxdb stop</span><br><span class="line">service influxdb start</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> InfluxDB </category>
          
      </categories>
      
      
        <tags>
            
            <tag> InfluxDB </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>DRF This field may not be null, This field cannot be blank</title>
      <link href="/2019/07/09/drf-error/"/>
      <url>/2019/07/09/drf-error/</url>
      
        <content type="html"><![CDATA[<h3 id="目标"><a href="#目标" class="headerlink" title="目标"></a>目标</h3><ul><li>需要把原来的必填字段改为非必填<h3 id="实现"><a href="#实现" class="headerlink" title="实现"></a>实现</h3></li><li>先在models里面更新了字段, 加上null=True, default=None, blank=True</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">name = CharField(max_length=<span class="number">64</span>, verbose_name=<span class="string">'姓名'</span>, null=<span class="literal">True</span>, default=<span class="literal">None</span>, blank=<span class="literal">True</span>)</span><br><span class="line">account = CharField(max_length=<span class="number">64</span>, verbose_name=<span class="string">'账号'</span>, null=<span class="literal">True</span>, default=<span class="literal">None</span>, blank=<span class="literal">True</span>)</span><br></pre></td></tr></table></figure><ul><li>serializers更新</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">name = CharField(required=<span class="literal">False</span>)</span><br><span class="line">account = CharField(required=<span class="literal">False</span>)</span><br></pre></td></tr></table></figure><ul><li>执行<code>python manage.py makemigrations</code></li><li>执行<code>python manage.py migrate</code> </li></ul><h3 id="问题"><a href="#问题" class="headerlink" title="问题"></a>问题</h3><ul><li>出现这种情况</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">This field may not be null.</span><br></pre></td></tr></table></figure><ul><li>或者</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">This field cannot be blank.</span><br></pre></td></tr></table></figure><h3 id="解决"><a href="#解决" class="headerlink" title="解决"></a>解决</h3><ul><li>需要把serializers改成这样</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">name = CharField(required=<span class="literal">False</span>, allow_blank=<span class="literal">True</span>, allow_null=<span class="literal">True</span>)</span><br><span class="line">account = CharField(required=<span class="literal">False</span>, allow_blank=<span class="literal">True</span>, allow_null=<span class="literal">True</span>)</span><br></pre></td></tr></table></figure><p><code>allow_blank=True</code> 解决 <code>This field cannot be blank.</code><br><code>allow_null=True</code> 解决 <code>This field may not be null.</code></p>]]></content>
      
      
      <categories>
          
          <category> Python </category>
          
      </categories>
      
      
        <tags>
            
            <tag> python </tag>
            
            <tag> Django </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Python3下载文件：AttributeError:module &#39;urllib&#39; has no attribute &#39;request&#39;</title>
      <link href="/2019/07/08/urllib-error/"/>
      <url>/2019/07/08/urllib-error/</url>
      
        <content type="html"><![CDATA[<ul><li>python3的urllib包有了一些更新，在使用的时候要注意一下</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> os</span><br><span class="line"><span class="keyword">import</span> urllib</span><br><span class="line">url = <span class="string">""</span></span><br><span class="line">file = <span class="string">"&#123;&#125;.pdf"</span>.format(<span class="string">'download_file'</span>)</span><br><span class="line">save_path = os.path.join(<span class="string">'/Users/Desktop/'</span>, file)</span><br><span class="line">urllib.request.urlretrieve(url, save_path)</span><br></pre></td></tr></table></figure><ul><li>这样使用会报错</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">AttributeError: module <span class="string">'urllib'</span> has no attribute <span class="string">'request'</span></span><br></pre></td></tr></table></figure><ul><li>因为在python3中<code>urllib.request</code>成为了一个独立的包, 所以在导入的时候要改为</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> os</span><br><span class="line"><span class="keyword">import</span> urllib.request <span class="keyword">as</span> ur</span><br><span class="line">url = <span class="string">""</span></span><br><span class="line">file = <span class="string">"&#123;&#125;.pdf"</span>.format(<span class="string">'download_file'</span>)</span><br><span class="line">save_path = os.path.join(<span class="string">'/Users/Desktop/'</span>, file)</span><br><span class="line">ur.urlretrieve(url, save_path)</span><br></pre></td></tr></table></figure><h2 id="其他下载文件方法"><a href="#其他下载文件方法" class="headerlink" title="其他下载文件方法"></a>其他下载文件方法</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">headers = &#123;<span class="string">'Content-Type'</span>: <span class="string">"application/json"</span>&#125;</span><br><span class="line">r = requests.request(<span class="string">"GET"</span>, url, headers=headers)</span><br><span class="line"><span class="keyword">with</span> open(<span class="string">"download_file.xls"</span>, <span class="string">"wb"</span>) <span class="keyword">as</span> code:</span><br><span class="line">    code.write(r.content)</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> Python </category>
          
      </categories>
      
      
        <tags>
            
            <tag> python </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Alfred</title>
      <link href="/2019/07/07/alfred/"/>
      <url>/2019/07/07/alfred/</url>
      
        <content type="html"><![CDATA[<h1 id="安装"><a href="#安装" class="headerlink" title="安装"></a><b>安装</b></h1><ul><li>安装途径多多<br><a href="https://www.alfredapp.com/" rel="external nofollow noopener noreferrer" target="_blank">官网</a>、google/百度、AppStore等，有付费功能，不是重度使用，免费功能也差不多够用了</li></ul><h1 id="使用"><a href="#使用" class="headerlink" title="使用"></a><b>使用</b></h1><h2 id="免费功能"><a href="#免费功能" class="headerlink" title="免费功能"></a><b>免费功能</b></h2><h3 id="搜索Web-Search"><a href="#搜索Web-Search" class="headerlink" title="搜索Web Search"></a><b><span style="color:black">搜索Web Search<span></span></span></b></h3><p><img src="/2019/07/07/alfred/search.png" alt="图片"></p><p>应用内置的有一些功能，可以自己双击修改<br>也可以点击下面的<code>add custom search</code>添加新的搜索</p><p><img src="/2019/07/07/alfred/search_test.png" alt="图片"></p><ul><li>配置</li></ul><table><thead><tr><th>name</th><th>含义</th></tr></thead><tbody><tr><td>Search URL</td><td>要搜索的url规则</td></tr><tr><td>Title</td><td>标题</td></tr><tr><td>Keyword</td><td>启动的该搜索的快捷键</td></tr><tr><td>Validation</td><td>点击后面的test可以进行测试自己的配置是不是对的</td></tr></tbody></table><ul><li>Search URL规则<br>以百度为例子，随便搜索一个<code>testtest</code>，拿到的URL是这样的：<code>https://www.baidu.com/s?ie=UTF-8&amp;wd=testtest</code><br>其中testtest是自己搜索的内容，把testtest替换成<code>{query}</code><br>替换以后得到: <code>https://www.baidu.com/s?ie=UTF-8&amp;wd={query}</code>，粘贴到Search URL就可以了</li></ul><p>也可以直接点击Search URL后面的Lookup自己解析规则，准确率如何就不知道了</p><ul><li>目前自己也就添加了这么几个search</li></ul><table><thead><tr><th>Title</th><th>URL</th><th>Keyword(个人建议)</th></tr></thead><tbody><tr><td>百度</td><td><code>https://www.baidu.com/s?ie=UTF-8&amp;wd={query}</code></td><td>bl</td></tr><tr><td>京东</td><td><code>https://search.jd.com/Search?keyword={query}</code></td><td>jd</td></tr><tr><td>GitHub</td><td><code>https://github.com/search?q={query}</code></td><td>gh</td></tr><tr><td>stackoverflow</td><td><code>http://www.stackoverflow.com/search?q={query}</code></td><td>sof</td></tr></tbody></table><h3 id="本地搜索File-Search"><a href="#本地搜索File-Search" class="headerlink" title="本地搜索File Search"></a><b><span style="color:black">本地搜索File Search<span></span></span></b></h3><p><img src="/2019/07/07/alfred/file.png" alt="file_search"></p><table><thead><tr><th>key</th><th>含义</th></tr></thead><tbody><tr><td>find</td><td>直接查找</td></tr><tr><td>open</td><td>打开文件</td></tr><tr><td>in</td><td>查找文件内的内容</td></tr><tr><td>tags</td><td>根据标签查找</td></tr></tbody></table><h2 id="付费功能"><a href="#付费功能" class="headerlink" title="付费功能"></a><b>付费功能</b></h2><h3 id="Snippets"><a href="#Snippets" class="headerlink" title="Snippets"></a><b><span style="color:black">Snippets<span></span></span></b></h3><ul><li>最常用的一个功能之一，可以快捷的打出自己预存的数据，比如地址、邮箱之类的<br><img src="/2019/07/07/alfred/snippet.png" alt="snippet"></li></ul><table><thead><tr><th>name</th><th>含义</th></tr></thead><tbody><tr><td>Name</td><td>名字</td></tr><tr><td>Keyword</td><td>查找改内容的快捷键</td></tr><tr><td>Collection</td><td>所在分组</td></tr><tr><td>Auto expansion allowed</td><td>允许自动补充</td></tr><tr><td>Snippet</td><td>预存的内容</td></tr></tbody></table><ul><li>Snippet也支持动态占位符<br>比如:<br>{time}：当前时间<br>{date}：当前日期<br>{datetime}：当前时间和日期</li></ul><h3 id="Clipboard-History"><a href="#Clipboard-History" class="headerlink" title="Clipboard History"></a><b><span style="color:black">Clipboard History<span></span></span></b></h3><ul><li>可以记录之前复制的内容</li><li><code>clear</code>删除历史记录</li></ul><p>有条件的话，大家还是支持一下正版比较好，我就不放链接了，有需要可以看下面的邮箱联系我</p><h3 id="Workflows"><a href="#Workflows" class="headerlink" title="Workflows"></a><b><span style="color:black">Workflows<span></span></span></b></h3><ul><li>这个功能就多了，有各种各样的插件，操作起来眼花缭乱，虽然我才装了三个。。。</li></ul><p><img src="/2019/07/07/alfred/workflow.png" alt="workflow"></p><ul><li>但是好像没什么好介绍的，直接下载插件，双击安装就可以用了</li></ul><p>我这就装了三个插件，就不贴链接了，直接推荐下载插件的地址吧</p><ul><li><a href="https://github.com/willfarrell/alfred-workflows" rel="external nofollow noopener noreferrer" target="_blank">github</a></li><li><a href="http://www.alfredworkflow.com/" rel="external nofollow noopener noreferrer" target="_blank">alfredworkflow</a></li><li><a href="http://www.packal.org/" rel="external nofollow noopener noreferrer" target="_blank">packal</a></li><li><a href="https://www.alfredforum.com/forum/3-share-your-workflows/" rel="external nofollow noopener noreferrer" target="_blank">alfredforum</a></li></ul><p>还有更多的功能，仍在摸索中，有时间了继续更新</p>]]></content>
      
      
      <categories>
          
          <category> 资源 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 学习 </tag>
            
            <tag> Alfred </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>前端解析Excel：xlsx.core.min.js，处理不规范表格</title>
      <link href="/2019/07/02/js-parsing-table/"/>
      <url>/2019/07/02/js-parsing-table/</url>
      
        <content type="html"><![CDATA[<h2 id="先写一个文件提交"><a href="#先写一个文件提交" class="headerlink" title="先写一个文件提交"></a><b>先写一个文件提交</b></h2><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"file"</span> <span class="attr">id</span>=<span class="string">"excel-file"</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id="导入xlsx-core-min-js"><a href="#导入xlsx-core-min-js" class="headerlink" title="导入xlsx.core.min.js"></a><b>导入<a href="https://github.com/SheetJS/js-xlsx/blob/master/dist/xlsx.core.min.js" rel="external nofollow noopener noreferrer" target="_blank">xlsx.core.min.js</a></b></h2><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">"text/javascript"</span> <span class="attr">src</span>=<span class="string">"xlsx.core.min.js"</span>&gt;</span><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id="解析excel"><a href="#解析excel" class="headerlink" title="解析excel"></a><b>解析excel</b></h2><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="undefined"></span></span><br><span class="line"><span class="javascript">    $(<span class="string">'#excel-file'</span>).change(<span class="function"><span class="keyword">function</span> (<span class="params">e</span>) </span>&#123;</span></span><br><span class="line"><span class="javascript">        <span class="keyword">var</span> files = e.target.files;</span></span><br><span class="line"><span class="javascript">        <span class="keyword">var</span> fileReader = <span class="keyword">new</span> FileReader();</span></span><br><span class="line"><span class="javascript">        fileReader.onload = <span class="function"><span class="keyword">function</span> (<span class="params">ev</span>) </span>&#123;</span></span><br><span class="line"><span class="javascript">            <span class="keyword">try</span> &#123;</span></span><br><span class="line"><span class="javascript">                <span class="keyword">var</span> data = ev.target.result,</span></span><br><span class="line"><span class="undefined">                    workbook = XLSX.read(data, &#123;</span></span><br><span class="line"><span class="javascript">                        type: <span class="string">'binary'</span></span></span><br><span class="line"><span class="javascript">                    &#125;), <span class="comment">// 以二进制流方式读取得到整份excel表格对象</span></span></span><br><span class="line"><span class="javascript">                    persons = []; <span class="comment">// 存储获取到的数据</span></span></span><br><span class="line"><span class="javascript">            &#125; <span class="keyword">catch</span> (e) &#123;</span></span><br><span class="line"><span class="javascript">                <span class="built_in">console</span>.log(<span class="string">'文件类型不正确'</span>);</span></span><br><span class="line"><span class="javascript">                <span class="keyword">return</span>;</span></span><br><span class="line"><span class="undefined">            &#125;</span></span><br><span class="line"><span class="javascript">            <span class="comment">// 遍历每张表读取</span></span></span><br><span class="line"><span class="javascript">            <span class="keyword">for</span> (<span class="keyword">var</span> sheet <span class="keyword">in</span> workbook.Sheets) &#123;</span></span><br><span class="line"><span class="javascript">                <span class="keyword">if</span> (workbook.Sheets.hasOwnProperty(sheet)) &#123;</span></span><br><span class="line"><span class="javascript">                    <span class="keyword">var</span> fromTo = workbook.Sheets[sheet][<span class="string">'!ref'</span>];</span></span><br><span class="line"><span class="javascript">                    <span class="built_in">console</span>.log(fromTo);</span></span><br><span class="line"><span class="javascript">                    <span class="keyword">var</span> datas = workbook.Sheets[sheet];</span></span><br><span class="line"><span class="undefined">                    </span></span><br><span class="line"><span class="javascript">                    <span class="comment">// 如果有不规范数据可以在这里进行处理datas</span></span></span><br><span class="line"><span class="undefined">                    </span></span><br><span class="line"><span class="undefined">                    persons = persons.concat(XLSX.utils.sheet_to_json(datas));</span></span><br><span class="line"><span class="javascript">                    <span class="keyword">break</span>; <span class="comment">// 只读了第一张表</span></span></span><br><span class="line"><span class="undefined">                &#125;</span></span><br><span class="line"><span class="undefined">            &#125;</span></span><br><span class="line"><span class="javascript">           <span class="built_in">console</span>.log(persons);</span></span><br><span class="line"><span class="undefined">        &#125;;</span></span><br><span class="line"><span class="javascript">        <span class="comment">// 以二进制方式打开文件</span></span></span><br><span class="line"><span class="undefined">        fileReader.readAsBinaryString(files[0]);</span></span><br><span class="line"><span class="undefined">    &#125;);</span></span><br><span class="line"><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id="全部代码"><a href="#全部代码" class="headerlink" title="全部代码"></a><b>全部代码</b></h2><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE html&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span><span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"file"</span> <span class="attr">id</span>=<span class="string">"excel-file"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">"text/javascript"</span> <span class="attr">src</span>=<span class="string">"xlsx.core.min.js"</span>&gt;</span><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">"https://code.jquery.com/jquery-3.1.1.min.js"</span>&gt;</span><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="undefined"></span></span><br><span class="line"><span class="javascript">    $(<span class="string">'#excel-file'</span>).change(<span class="function"><span class="keyword">function</span> (<span class="params">e</span>) </span>&#123;</span></span><br><span class="line"><span class="javascript">        <span class="keyword">var</span> files = e.target.files;</span></span><br><span class="line"><span class="javascript">        <span class="keyword">var</span> fileReader = <span class="keyword">new</span> FileReader();</span></span><br><span class="line"><span class="javascript">        fileReader.onload = <span class="function"><span class="keyword">function</span> (<span class="params">ev</span>) </span>&#123;</span></span><br><span class="line"><span class="javascript">            <span class="keyword">try</span> &#123;</span></span><br><span class="line"><span class="javascript">                <span class="keyword">var</span> data = ev.target.result,</span></span><br><span class="line"><span class="undefined">                    workbook = XLSX.read(data, &#123;</span></span><br><span class="line"><span class="javascript">                        type: <span class="string">'binary'</span></span></span><br><span class="line"><span class="javascript">                    &#125;), <span class="comment">// 以二进制流方式读取得到整份excel表格对象</span></span></span><br><span class="line"><span class="javascript">                    persons = []; <span class="comment">// 存储获取到的数据</span></span></span><br><span class="line"><span class="javascript">            &#125; <span class="keyword">catch</span> (e) &#123;</span></span><br><span class="line"><span class="javascript">                <span class="built_in">console</span>.log(<span class="string">'文件类型不正确'</span>);</span></span><br><span class="line"><span class="javascript">                <span class="keyword">return</span>;</span></span><br><span class="line"><span class="undefined">            &#125;</span></span><br><span class="line"><span class="undefined"></span></span><br><span class="line"><span class="javascript">            <span class="comment">// 遍历每张表读取</span></span></span><br><span class="line"><span class="javascript">            <span class="keyword">for</span> (<span class="keyword">var</span> sheet <span class="keyword">in</span> workbook.Sheets) &#123;</span></span><br><span class="line"><span class="javascript">                <span class="keyword">if</span> (workbook.Sheets.hasOwnProperty(sheet)) &#123;</span></span><br><span class="line"><span class="javascript">                    <span class="keyword">var</span> fromTo = workbook.Sheets[sheet][<span class="string">'!ref'</span>];</span></span><br><span class="line"><span class="javascript">                    <span class="built_in">console</span>.log(fromTo);</span></span><br><span class="line"><span class="javascript">                    <span class="keyword">var</span> datas = workbook.Sheets[sheet];</span></span><br><span class="line"><span class="javascript">                    <span class="built_in">console</span>.log(datas);</span></span><br><span class="line"><span class="javascript">                    <span class="comment">// 处理不规范的数据</span></span></span><br><span class="line"><span class="javascript">                    <span class="keyword">for</span> (<span class="keyword">var</span> nums <span class="keyword">in</span> datas) &#123;</span></span><br><span class="line"><span class="javascript">                        <span class="built_in">console</span>.log(nums);</span></span><br><span class="line"><span class="javascript">                        <span class="keyword">var</span> num = nums.replace(<span class="regexp">/[^0-9]/ig</span>, <span class="string">""</span>);</span></span><br><span class="line"><span class="javascript">                        <span class="built_in">console</span>.log(num);</span></span><br><span class="line"><span class="javascript">                        <span class="keyword">var</span> row_data = <span class="keyword">new</span> <span class="built_in">Array</span>();</span></span><br><span class="line"><span class="javascript">                        row_data[<span class="number">0</span>] = <span class="string">"A"</span> + <span class="built_in">String</span>(num);</span></span><br><span class="line"><span class="javascript">                        row_data[<span class="number">1</span>] = <span class="string">"B"</span> + <span class="built_in">String</span>(num);</span></span><br><span class="line"><span class="javascript">                        row_data[<span class="number">2</span>] = <span class="string">"C"</span> + <span class="built_in">String</span>(num);</span></span><br><span class="line"><span class="javascript">                        row_data[<span class="number">3</span>] = <span class="string">"D"</span> + <span class="built_in">String</span>(num);</span></span><br><span class="line"><span class="javascript">                        row_data[<span class="number">4</span>] = <span class="string">"E"</span> + <span class="built_in">String</span>(num);</span></span><br><span class="line"><span class="javascript">                        row_data[<span class="number">5</span>] = <span class="string">"F"</span> + <span class="built_in">String</span>(num);</span></span><br><span class="line"><span class="javascript">                        row_data[<span class="number">6</span>] = <span class="string">"G"</span> + <span class="built_in">String</span>(num);</span></span><br><span class="line"><span class="javascript">                        row_data[<span class="number">7</span>] = <span class="string">"H"</span> + <span class="built_in">String</span>(num);</span></span><br><span class="line"><span class="javascript">                        row_data[<span class="number">8</span>] = <span class="string">"I"</span> + <span class="built_in">String</span>(num);</span></span><br><span class="line"><span class="javascript">                        row_data[<span class="number">9</span>] = <span class="string">"J"</span> + <span class="built_in">String</span>(num);</span></span><br><span class="line"><span class="javascript">                        row_data[<span class="number">10</span>] = <span class="string">"K"</span> + <span class="built_in">String</span>(num);</span></span><br><span class="line"><span class="javascript">                        row_data[<span class="number">11</span>] = <span class="string">"L"</span> + <span class="built_in">String</span>(num);</span></span><br><span class="line"><span class="javascript">                        row_data[<span class="number">12</span>] = <span class="string">"M"</span> + <span class="built_in">String</span>(num);</span></span><br><span class="line"><span class="undefined">                        </span></span><br><span class="line"><span class="javascript">                        <span class="keyword">var</span> arry_row = <span class="keyword">new</span> <span class="built_in">Array</span>();</span></span><br><span class="line"><span class="javascript">                        <span class="keyword">var</span> count = <span class="number">0</span>;</span></span><br><span class="line"><span class="javascript">                        <span class="keyword">for</span> (<span class="keyword">var</span> i <span class="keyword">of</span> row_data) &#123;</span></span><br><span class="line"><span class="javascript">                            <span class="keyword">if</span> (datas[i]) &#123;</span></span><br><span class="line"><span class="javascript">                                arry_row[count] = datas[i].v.replace(<span class="regexp">/\s*/g</span>,<span class="string">""</span>);</span></span><br><span class="line"><span class="undefined">                                count += 1;</span></span><br><span class="line"><span class="undefined">                            &#125;</span></span><br><span class="line"><span class="undefined">                        &#125;</span></span><br><span class="line"><span class="javascript">                        <span class="comment">// 找到正确数据的列名</span></span></span><br><span class="line"><span class="javascript">                        <span class="keyword">if</span> (arry_row.indexOf(<span class="string">"单位"</span>) &lt; <span class="number">0</span> || arry_row.indexOf(<span class="string">"数量"</span>) &lt; <span class="number">0</span>) &#123;</span></span><br><span class="line"><span class="javascript">                            <span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; row_data.length; i++) &#123;</span></span><br><span class="line"><span class="javascript">                                <span class="keyword">delete</span> datas[row_data[i]];</span></span><br><span class="line"><span class="undefined">                            &#125;</span></span><br><span class="line"><span class="undefined">                        &#125;</span></span><br><span class="line"><span class="javascript">                        <span class="keyword">else</span> &#123;</span></span><br><span class="line"><span class="javascript">                            <span class="comment">// 修改读取范围</span></span></span><br><span class="line"><span class="javascript">                            datas[<span class="string">"!ref"</span>] = row_data[<span class="number">0</span>] + <span class="string">":"</span> + datas[<span class="string">'!ref'</span>].split(<span class="string">':'</span>)[<span class="number">1</span>];</span></span><br><span class="line"><span class="javascript">                            <span class="keyword">break</span>;</span></span><br><span class="line"><span class="undefined">                        &#125;</span></span><br><span class="line"><span class="undefined"></span></span><br><span class="line"><span class="undefined">                    &#125;</span></span><br><span class="line"><span class="undefined">                    persons = persons.concat(XLSX.utils.sheet_to_json(datas));</span></span><br><span class="line"><span class="javascript">                    <span class="keyword">break</span>; <span class="comment">// 只读了第一张表</span></span></span><br><span class="line"><span class="undefined">                &#125;</span></span><br><span class="line"><span class="undefined">            &#125;</span></span><br><span class="line"><span class="javascript">            <span class="built_in">console</span>.log(persons);</span></span><br><span class="line"><span class="undefined">        &#125;;</span></span><br><span class="line"><span class="javascript">        <span class="comment">// 以二进制方式打开文件</span></span></span><br><span class="line"><span class="undefined">        fileReader.readAsBinaryString(files[0]);</span></span><br><span class="line"><span class="undefined">    &#125;);</span></span><br><span class="line"><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><p><b>对前端不怎么熟悉，代码比较乱，仅供参考</b></p>]]></content>
      
      
      <categories>
          
          <category> 前端 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> js </tag>
            
            <tag> 前端 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>独立py文件调用Django models</title>
      <link href="/2019/07/01/call-Django-models/"/>
      <url>/2019/07/01/call-Django-models/</url>
      
        <content type="html"><![CDATA[<h3 id="前提条件"><a href="#前提条件" class="headerlink" title="前提条件"></a><b>前提条件</b></h3><p>需要独立的文件和models、views在同一级目录，不然会报错</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">django.core.exceptions.AppRegistryNotReady: Apps aren<span class="string">'t loaded yet.</span></span><br></pre></td></tr></table></figure><p>如果不在同一级目录，也可以自己调整，需要加上路径</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sys.path.append(<span class="string">"../"</span>)</span><br></pre></td></tr></table></figure><h3 id="调用方法"><a href="#调用方法" class="headerlink" title="调用方法"></a><b>调用方法</b></h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> os</span><br><span class="line"><span class="keyword">import</span> sys</span><br><span class="line"><span class="comment"># sys.path.append("../")</span></span><br><span class="line">os.environ[<span class="string">'DJANGO_SETTINGS_MODULE'</span>] = <span class="string">'mysite.settings'</span> <span class="comment"># 配置文件</span></span><br><span class="line"><span class="keyword">import</span> django</span><br><span class="line">django.setup()</span><br><span class="line"></span><br><span class="line"><span class="keyword">from</span> app.models.user <span class="keyword">import</span> User</span><br><span class="line">user = User.objects.filter(id=<span class="number">1</span>)</span><br><span class="line">print(user)</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> Python </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Django </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>_mysql.c:44:10:fatal error:&#39;my_config.h&#39; file not found</title>
      <link href="/2019/06/26/MySQL-python/"/>
      <url>/2019/06/26/MySQL-python/</url>
      
        <content type="html"><![CDATA[<p><b> <span style="color:black">注意：如果你用的是python3.x，直接去看第四个问题<span></span></span></b></p><h2 id="遇到的第一个问题"><a href="#遇到的第一个问题" class="headerlink" title="遇到的第一个问题"></a><b>遇到的第一个问题</b></h2><ul><li>正常来说直接执行pip安装，就是可以的，但是MySQL-python偏偏比较独特</li></ul><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pip install MySQL-python</span><br></pre></td></tr></table></figure><ul><li>报错</li></ul><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">_mysql.c:44:10: fatal error: 'my_config.h' file not found</span><br><span class="line">    #include "my_config.h"</span><br><span class="line">             ^~~~~~~~~~~~~</span><br><span class="line">    1 error generated.</span><br><span class="line">    error: command 'cc' failed with exit status 1</span><br></pre></td></tr></table></figure><h3 id="解决第一个问题"><a href="#解决第一个问题" class="headerlink" title="解决第一个问题"></a><b>解决第一个问题</b></h3><ul><li>执行<code>brew install mysql-connector-c</code></li></ul><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">brew install mysql-connector-c</span><br></pre></td></tr></table></figure><ul><li><b>如果这一步直接完成，那就可以继续<code>pip install MySQL-python</code>了</b>，应该会成功</li><li>但是我在这一步执行失败了<br><br></li></ul><h2 id="遇到第二个问题"><a href="#遇到第二个问题" class="headerlink" title="遇到第二个问题"></a><b>遇到第二个问题</b></h2><ul><li><code>brew install mysql-connector-c</code>报错</li></ul><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">Error: Cannot install mysql-connector-c because conflicting formulae are installed.</span><br><span class="line">  mysql: because both install MySQL client libraries</span><br><span class="line"></span><br><span class="line">Please `brew unlink mysql` before continuing.</span><br></pre></td></tr></table></figure><h3 id="解决第二个问题"><a href="#解决第二个问题" class="headerlink" title="解决第二个问题"></a><b>解决第二个问题</b></h3><ul><li>按照报错的提示，执行<code>brew unlink mysql</code></li><li>没有发生什么意外，执行完毕，继续执行<code>brew install mysql-connector-c</code></li><li>‘mysql-connector-c’安装成功</li><li>执行<code>brew link --overwrite mysql</code>，重新连接mysql（这一步我没有做）</li><li>然后再执行<code>pip install MySQL-python</code>，如果成功了就搞定了</li><li>神奇的是，我在这一步又失败了<br><br></li></ul><h2 id="遇到的第三个问题"><a href="#遇到的第三个问题" class="headerlink" title="遇到的第三个问题"></a><b>遇到的第三个问题</b></h2><ul><li>上面的步骤走完以后，执行<code>pip install MySQL-python</code>，报错</li></ul><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">Collecting mysql</span><br><span class="line">  Downloading https://files.pythonhosted.org/packages/06/ef/c4efbf2a51fb46aba9be03a973638d9539c9ca10a5259b2cbb1a66133b2e/mysql-0.0.1.tar.gz</span><br><span class="line">Collecting MySQL-python (from mysql)</span><br><span class="line">  Using cached https://files.pythonhosted.org/packages/a5/e9/51b544da85a36a68debe7a7091f068d802fc515a3a202652828c73453cad/MySQL-python-1.2.5.zip</span><br><span class="line">    Complete output from command python setup.py egg_info:</span><br><span class="line">    Traceback (most recent call last):</span><br><span class="line">      File "&lt;string&gt;", line 1, in &lt;module&gt;</span><br><span class="line">      File "/private/var/folders/zn/t8xxx4m149s9jqp1810ndrz80000gn/T/pip-install-oHMKPE/MySQL-python/setup.py", line 17, in &lt;module&gt;</span><br><span class="line">        metadata, options = get_config()</span><br><span class="line">      File "setup_posix.py", line 53, in get_config</span><br><span class="line">        libraries = [ dequote(i[2:]) for i in libs if i.startswith(compiler_flag("l")) ]</span><br><span class="line">      File "setup_posix.py", line 8, in dequote</span><br><span class="line">        if s[0] in "\"'" and s[0] == s[-1]:</span><br><span class="line">    IndexError: string index out of range</span><br></pre></td></tr></table></figure><h3 id="解决第三个问题"><a href="#解决第三个问题" class="headerlink" title="解决第三个问题"></a><b>解决第三个问题</b></h3><ul><li>修改mysql的配置文件<code>mysql_config</code>，<strong>修改前记得cp一下</strong><br>执行<code>mysql_config</code>，查看一下路径</li><li>打开文件<code>vim mysql_config</code>，找到<code>libs=&quot;$libs -l &quot;</code>，改为<code>libs=&quot;$libs -lmysqlclient -lssl -lcrypto &quot;</code></li></ul><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">libs="-L$pkglibdir"</span><br><span class="line"><span class="meta">#</span> libs="$libs -l "                              # 原来的</span><br><span class="line">libs="$libs -lmysqlclient -lssl -lcrypto "      # 更改后的</span><br><span class="line">embedded_libs="-L$pkglibdir"</span><br><span class="line">embedded_libs="$embedded_libs -l "</span><br></pre></td></tr></table></figure><ul><li>再来一遍<code>pip install MySQL-python</code></li><li>终于成功了！可喜可贺！可喜可贺！</li><li>小心翼翼的试一下，<code>import MySQLdb</code>，真的成功了<br><br></li></ul><h2 id="发现第四个问题"><a href="#发现第四个问题" class="headerlink" title="发现第四个问题"></a><b>发现第四个问题</b></h2><ul><li>开始使用的时候，发现自己用的是<code>python2.x</code>的环境，换成<code>python3.x</code>继续用</li><li>在<code>import MySQLdb</code>的时候又出问题了，<code>ModuleNotFoundError: No module named &#39;MySQLdb&#39;</code></li><li>尝试使用<code>pip3 install MySQL-python</code>再安装一次，报错</li></ul><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">Collecting MySQL-python</span><br><span class="line">  Using cached https://files.pythonhosted.org/packages/a5/e9/51b544da85a36a68debe7a7091f068d802fc515a3a202652828c73453cad/MySQL-python-1.2.5.zip</span><br><span class="line">    Complete output from command python setup.py egg_info:</span><br><span class="line">    Traceback (most recent call last):</span><br><span class="line">      File "&lt;string&gt;", line 1, in &lt;module&gt;</span><br><span class="line">      File "/private/var/folders/07/v8slhf9x5zsbbd8_9cd5ztnh0000gp/T/pip-install-oh_74ez5/MySQL-python/setup.py", line 13, in &lt;module&gt;</span><br><span class="line">        from setup_posix import get_config</span><br><span class="line">      File "/private/var/folders/07/v8slhf9x5zsbbd8_9cd5ztnh0000gp/T/pip-install-oh_74ez5/MySQL-python/setup_posix.py", line 2, in &lt;module&gt;</span><br><span class="line">        from ConfigParser import SafeConfigParser</span><br><span class="line">    ModuleNotFoundError: No module named 'ConfigParser'</span><br><span class="line"></span><br><span class="line">    ----------------------------------------</span><br><span class="line">Command "python setup.py egg_info" failed with error code 1 in /private/var/folders/07/v8slhf9x5zsbbd8_9cd5ztnh0000gp/T/pip-install-oh_74ez5/MySQL-python/</span><br></pre></td></tr></table></figure><h3 id="解决第四个问题"><a href="#解决第四个问题" class="headerlink" title="解决第四个问题"></a><b>解决第四个问题</b></h3><ul><li>查到了原因，感到一阵阵的无语<blockquote><p>In Python 3, ConfigParser has been renamed to configparser for PEP 8 compliance. It looks like the package you are installing does not support Python 3.<br>在Python3中，ConfigParser为了符合PEP8规范，已重命名为configparser。看起来你正在安装的软件包不支持Python3。</p></blockquote></li><li>因为不支持python3，建议使用<code>pip install pymysql</code>，安装也没那么多套路</li><li>其实也找到了解决方案<strong>（没有测试，我也不知道对不对，单纯的记录一下）</strong><br>方法一, 修改six模块为</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">try</span>:</span><br><span class="line">    <span class="keyword">import</span> configparser</span><br><span class="line"><span class="keyword">except</span>:</span><br><span class="line">    <span class="keyword">from</span> six.moves <span class="keyword">import</span> configparser</span><br></pre></td></tr></table></figure><p>  方法二</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">cp /usr/local/lib/python3.7/configparser.py /usr/local/lib/python3.7/ConfigParser.py</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> Python </category>
          
      </categories>
      
      
        <tags>
            
            <tag> python安装mysqldb </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>nginx配置重定向</title>
      <link href="/2019/06/25/nginx-rewrite/"/>
      <url>/2019/06/25/nginx-rewrite/</url>
      
        <content type="html"><![CDATA[<h2 id="实现功能"><a href="#实现功能" class="headerlink" title="实现功能"></a><b>实现功能</b></h2><ul><li>http重定向到https  </li><li>wxy.email重定向到<a href="http://www.wxy.email">www.wxy.email</a></li></ul><h2 id="未配置重定向"><a href="#未配置重定向" class="headerlink" title="未配置重定向"></a><b>未配置重定向</b></h2><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">server &#123;</span><br><span class="line">     # listen 80;</span><br><span class="line">     # 添加</span><br><span class="line">     listen 443 ssl;</span><br><span class="line">     server_name www.wxy.email wxy.email;</span><br><span class="line">     </span><br><span class="line">     # 添加ssl证书配置</span><br><span class="line">     # ssl on;</span><br><span class="line">     ssl_certificate /home/lls/wxy.email.crt; </span><br><span class="line">     ssl_certificate_key /home/lls/wxy.email.key;</span><br><span class="line">     ssl_session_timeout 5m;</span><br><span class="line">     </span><br><span class="line">     </span><br><span class="line">     charset utf-8;</span><br><span class="line">     location / &#123;</span><br><span class="line">             root /home/blog/blog;</span><br><span class="line">             index index.html;</span><br><span class="line">     &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="配置重定向"><a href="#配置重定向" class="headerlink" title="配置重定向"></a><b>配置重定向</b></h2><ul><li>在原来的server外面再添加一个server，</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">server &#123;</span><br><span class="line">     listen 80;</span><br><span class="line">     server_name  www.wxy.email wxy.email;</span><br><span class="line">     rewrite ^(.*)$ https://www.wxy.email$1 permanent;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 项目部署 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 项目部署 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Python、HTML、JS简单项目：每日一词New Tab</title>
      <link href="/2019/06/24/NewTab/"/>
      <url>/2019/06/24/NewTab/</url>
      
        <content type="html"><![CDATA[<p>在网上看到了Google的<strong>New Tab</strong>插件，想想自己的英语那么差，找个可以学单词的New Tab多好，结果大神们英语都很好，并没有找到，只有一个类似的还是日语，怎么办？<strong>既然找不到就自己写一个吧。</strong></p><hr><h3 id="先确定一下功能"><a href="#先确定一下功能" class="headerlink" title="先确定一下功能"></a><strong>先确定一下功能</strong></h3><p>1.关键需要有一个搜索框<br>2.每天更新一个单词，单词可以点进去查看详情<br>3.页面背景要找一些高清壁纸<br>4.背景随机显示<br>5.原来是定义为一个静态页面的，但是单词这个有点问题，所以加了一个小后台，只用来爬单词</p><h3 id="搜索框"><a href="#搜索框" class="headerlink" title="搜索框"></a><strong>搜索框</strong></h3><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"text"</span> <span class="attr">id</span>=<span class="string">"inputId"</span> <span class="attr">onkeydown</span>=<span class="string">"enter_search()"</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">span</span>&gt;</span><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">""</span> <span class="attr">id</span>=<span class="string">"linkUrlId"</span> <span class="attr">onclick</span>=<span class="string">"search()"</span>&gt;</span>搜索<span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="搜索框JS"><a href="#搜索框JS" class="headerlink" title="搜索框JS"></a><strong>搜索框JS</strong></h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 回车搜索</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">enter_search</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">let</span> event = <span class="built_in">window</span>.event;</span><br><span class="line">    <span class="keyword">if</span> (event.keyCode === <span class="number">13</span>) &#123;</span><br><span class="line">        <span class="built_in">console</span>.log(event.keyCode);</span><br><span class="line">        search();</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line"><span class="comment">// 搜索，使用百度的URL拼接出来的</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">search</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">let</span> msg = <span class="built_in">document</span>.getElementById(<span class="string">'inputId'</span>).value;</span><br><span class="line">    <span class="keyword">if</span> (msg) &#123;</span><br><span class="line">        <span class="built_in">document</span>.getElementById(<span class="string">'linkUrlId'</span>).href = <span class="string">"https://www.baidu.com/s?wd="</span> + msg;</span><br><span class="line">        <span class="built_in">document</span>.getElementById(<span class="string">'linkUrlId'</span>).click();</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line"><span class="comment">// 鼠标默认锁定在搜索框中</span></span><br><span class="line">(<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="built_in">document</span>.getElementById(<span class="string">'inputId'</span>).focus()</span><br><span class="line">&#125;)();</span><br></pre></td></tr></table></figure><h3 id="每日单词"><a href="#每日单词" class="headerlink" title="每日单词"></a><strong>每日单词</strong></h3><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">""</span> <span class="attr">id</span>=<span class="string">"search_word"</span> <span class="attr">onclick</span>=<span class="string">"search_word()"</span>&gt;</span><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"word"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span><span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"phonetic_symbol_e"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"phonetic_symbol_u"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"chinese"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="每日单词JS"><a href="#每日单词JS" class="headerlink" title="每日单词JS"></a><strong>每日单词JS</strong></h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 发送请求到后台获取单词</span></span><br><span class="line">$.ajax(&#123;</span><br><span class="line">    type: <span class="string">"get"</span>,</span><br><span class="line">    url: <span class="string">"http://127.0.0.1:5000/"</span>,</span><br><span class="line">    <span class="keyword">async</span>: <span class="literal">true</span>,</span><br><span class="line">    dataType: <span class="string">"json"</span>,</span><br><span class="line">    success: <span class="function"><span class="keyword">function</span> (<span class="params">data</span>) </span>&#123;</span><br><span class="line">        $(<span class="string">"#word"</span>).text(data.word);</span><br><span class="line">        $(<span class="string">"#chinese"</span>).text(data.chinese);</span><br><span class="line">        $(<span class="string">"#phonetic_symbol_e"</span>).text(data.phonetic_symbol_e);</span><br><span class="line">        $(<span class="string">"#phonetic_symbol_u"</span>).text(data.phonetic_symbol_u);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;);</span><br><span class="line"><span class="comment">// 拼接Bing词典的单词详情URL</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">search_word</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">let</span> word = $(<span class="string">"#word"</span>).text();</span><br><span class="line">    <span class="built_in">console</span>.log(word);</span><br><span class="line">    <span class="built_in">document</span>.getElementById(<span class="string">'search_word'</span>).href = <span class="string">"https://cn.bing.com/dict/search?q="</span> + word + <span class="string">"&amp;mkt=zh-cn"</span>;</span><br><span class="line">    <span class="built_in">document</span>.getElementById(<span class="string">'search_word'</span>).click();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="每日单词后台，使用python爬取了Bing词典首页的每日一词"><a href="#每日单词后台，使用python爬取了Bing词典首页的每日一词" class="headerlink" title="每日单词后台，使用python爬取了Bing词典首页的每日一词"></a><strong>每日单词后台</strong>，使用python爬取了Bing词典首页的每日一词</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> json</span><br><span class="line"><span class="keyword">import</span> requests</span><br><span class="line"><span class="keyword">from</span> lxml <span class="keyword">import</span> etree</span><br><span class="line"><span class="keyword">import</span> xml.etree.ElementTree <span class="keyword">as</span> ET</span><br><span class="line"><span class="keyword">from</span> flask <span class="keyword">import</span> Flask</span><br><span class="line"></span><br><span class="line">app = Flask(__name__)</span><br><span class="line">CORS(app, supports_credentials=<span class="literal">True</span>)</span><br><span class="line"></span><br><span class="line"><span class="meta">@app.route('/')</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">index</span><span class="params">()</span>:</span></span><br><span class="line">    url = <span class="string">'https://cn.bing.com/dict/?mkt=zh-cn'</span></span><br><span class="line">    response = requests.request(<span class="string">"GET"</span>, url=url)</span><br><span class="line">    response_html = etree.HTML(response.content)</span><br><span class="line">    <span class="comment"># 解析数据，拿到单词</span></span><br><span class="line">    bing_body_list = response_html.xpath(</span><br><span class="line">        <span class="string">"//div[@class='client_daily_word_content']/div[@class='client_daily_words_bar']//text()"</span>)</span><br><span class="line">    <span class="comment"># 初始化数据</span></span><br><span class="line">    word, chinese, phonetic_symbol_e, phonetic_symbol_u = <span class="string">u'hello'</span>, <span class="string">u'你好'</span>, <span class="string">u"英 [hə'ləʊ]"</span>, <span class="string">u"美 [heˈləʊ]"</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> len(bing_body_list):</span><br><span class="line">        word = bing_body_list.pop(<span class="number">0</span>)</span><br><span class="line">        chinese = bing_body_list.pop(<span class="number">-1</span>)</span><br><span class="line">        <span class="keyword">for</span> phonetic_symbol <span class="keyword">in</span> bing_body_list:</span><br><span class="line">            <span class="keyword">if</span> <span class="string">u"美["</span> <span class="keyword">in</span> word:</span><br><span class="line">                phonetic_symbol_u = phonetic_symbol</span><br><span class="line">            <span class="keyword">elif</span> <span class="string">u"英["</span> <span class="keyword">in</span> word:</span><br><span class="line">                phonetic_symbol_e = phonetic_symbol</span><br><span class="line">    data = &#123;</span><br><span class="line">        <span class="string">"word"</span>: word,</span><br><span class="line">        <span class="string">"chinese"</span>: chinese,</span><br><span class="line">        <span class="string">"phonetic_symbol_e"</span>: phonetic_symbol_e,</span><br><span class="line">        <span class="string">"phonetic_symbol_u"</span>: phonetic_symbol_u,</span><br><span class="line">        &#125;</span><br><span class="line">    <span class="keyword">return</span> json.dumps(data)</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">'__main__'</span>:</span><br><span class="line">    app.run(debug=<span class="literal">True</span>)</span><br></pre></td></tr></table></figure><h3 id="随机背景图片，先去网上找一些高清壁纸"><a href="#随机背景图片，先去网上找一些高清壁纸" class="headerlink" title="随机背景图片，先去网上找一些高清壁纸"></a><strong>随机背景图片</strong>，先去网上找一些高清壁纸</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 写一个数组</span></span><br><span class="line"><span class="keyword">let</span> arr = [<span class="string">"./1.jpg"</span>, <span class="string">"./2.jpg"</span>, <span class="string">"./3.png"</span>];</span><br><span class="line">arr[<span class="number">3</span>] = <span class="string">"./4.jpg"</span>;</span><br><span class="line"><span class="comment">// 随机数组内的图片设为背景</span></span><br><span class="line"><span class="keyword">let</span> randomBgIndex = arr[<span class="built_in">Math</span>.floor((<span class="built_in">Math</span>.random() * arr.length))];</span><br><span class="line"><span class="built_in">document</span>.write(<span class="string">'&lt;style&gt;body&#123;background-image:url('</span> + randomBgIndex + <span class="string">')&#125;&lt;/style&gt;'</span>);</span><br></pre></td></tr></table></figure><h3 id="进行一些美化"><a href="#进行一些美化" class="headerlink" title="进行一些美化"></a><strong>进行一些美化</strong></h3><h3 id="搞定！"><a href="#搞定！" class="headerlink" title="搞定！"></a><strong>搞定！</strong></h3><p>本项目已经部署了，有兴趣的可以<a href="http://background.wxy.email/" rel="external nofollow noopener noreferrer" target="_blank">点这里</a>作为参考**</p><h3 id="效果图"><a href="#效果图" class="headerlink" title="效果图"></a><strong>效果图</strong></h3><p><img src="/2019/06/24/NewTab/newtab.png" alt="突突突"></p><h3 id="源码地址"><a href="#源码地址" class="headerlink" title="源码地址"></a><strong>源码地址</strong></h3><p><a href="https://github.com/wxy148616/NewTab" rel="external nofollow noopener noreferrer" target="_blank">https://github.com/wxy148616/NewTab</a></p>]]></content>
      
      
      <categories>
          
          <category> 前端 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> python </tag>
            
            <tag> html </tag>
            
            <tag> js </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>git撤销commit</title>
      <link href="/2019/06/21/git-reset/"/>
      <url>/2019/06/21/git-reset/</url>
      
        <content type="html"><![CDATA[<ul><li>回退<figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">git reset --hard &lt;commit_id&gt;</span><br><span class="line">git push origin HEAD --force</span><br></pre></td></tr></table></figure></li></ul><p><b>&lt;commit_id&gt; 每次commit的SHA1值. 可以用git log 看到,也可以在页面上commit标签页里找到</b></p><p><code>git reset –mixed</code>: 默认方式，不带任何参数的git reset，回退到某个版本，保留代码，回退commit和index信息<br><code>git reset –soft</code>: 回退到某个版本，只回退了commit的信息，不会恢复到index file一级。如果还要提交，直接commit即可<br><code>git reset –hard</code>: 彻底回退到某个版本，本地的代码也会变为上一个版本的内容</p>]]></content>
      
      
      <categories>
          
          <category> 项目部署 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> git </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>\xe5\x8d\xa0\xe7\x94\xa8\xe3\x80\x82，16进制乱码转化为可读字符</title>
      <link href="/2019/06/18/bytetostring/"/>
      <url>/2019/06/18/bytetostring/</url>
      
        <content type="html"><![CDATA[<p>在解析一些网页数据或者查看服务器日志的时候总会出现一些没法直接阅读的byte字符串，也没有找到在线的转码工具，那就自己写吧。</p><ul><li>其实超级简单。。。</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">s = <span class="string">'\xe5\x8d\xa0\xe7\x94\xa8\xe3\x80\x82'</span></span><br><span class="line"> </span><br><span class="line">print(s.strip().decode(<span class="string">'utf-8'</span>))</span><br><span class="line">print(s.strip().decode(<span class="string">'utf-8'</span>, <span class="string">'ignore'</span>))</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> Python </category>
          
      </categories>
      
      
        <tags>
            
            <tag> python </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>nginx配置https</title>
      <link href="/2019/06/06/https-config/"/>
      <url>/2019/06/06/https-config/</url>
      
        <content type="html"><![CDATA[<ul><li>首先修改原来的nginx配置，<b>nginx配置不会的看&gt;&gt;<a href="https://www.wxy.email/2019/01/26/nginx%E5%AE%89%E8%A3%85%E9%85%8D%E7%BD%AE/">这里</a></b></li></ul><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">server &#123;</span><br><span class="line">     # listen 80;</span><br><span class="line">     # 添加</span><br><span class="line">     listen 443 ssl;</span><br><span class="line">     server_name www.wxy.email wxy.email;</span><br><span class="line">     </span><br><span class="line">     # 添加ssl证书配置</span><br><span class="line">     # ssl on;</span><br><span class="line">     ssl_certificate /home/lls/wxy.email.crt; </span><br><span class="line">     ssl_certificate_key /home/lls/wxy.email.key;</span><br><span class="line">     ssl_session_timeout 5m;</span><br><span class="line">     </span><br><span class="line">     </span><br><span class="line">     charset utf-8;</span><br><span class="line">     location / &#123;</span><br><span class="line">             root /home/blog/blog;</span><br><span class="line">             index index.html;</span><br><span class="line">     &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>kill杀死nginx进程，重启</li></ul><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">kill -9 pid</span><br><span class="line">service nginx start</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 项目部署 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 项目部署 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>from lxml import etree</title>
      <link href="/2019/06/04/ElementTree-tostring/"/>
      <url>/2019/06/04/ElementTree-tostring/</url>
      
        <content type="html"><![CDATA[<p>写一个小型的爬虫懒得用scrapy(主要是scrapy不太好装…)，直接使用了requests请求，但是要解析数据，那么问题来了</p><hr><h2 id="问题1："><a href="#问题1：" class="headerlink" title="问题1："></a><b>问题1：</b></h2><ul><li>使用的是python3.7的环境，解析数据要用xpath，系统是mac</li></ul><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pip install lxml</span><br></pre></td></tr></table></figure><p>一分钟后。。。下载成功</p><ul><li>开始写代码，</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> lxml <span class="keyword">import</span> etree</span><br></pre></td></tr></table></figure><p>挂了…，lxml中竟然没有etree模块  </p><ul><li>换个方法  </li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> lxml <span class="keyword">import</span> html</span><br><span class="line">et = html.etree</span><br></pre></td></tr></table></figure><p>依然挂了…</p><h2 id="解决："><a href="#解决：" class="headerlink" title="解决："></a><b>解决：</b></h2><ul><li>开始找解决办法<br>百度中。。。，找了一堆的方法，全部失败<br>google中。。。，又找了一堆的方法，全部失败<br>即将放弃，准备切换python版本，开始水群。。。，群里大佬给了个<a href="https://mirrors.aliyun.com/pypi/simple/" rel="external nofollow noopener noreferrer" target="_blank">阿里源</a>的地址，恍然大悟！！！</li></ul><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pip install -i https://mirrors.aliyun.com/pypi/simple/ lxml</span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> lxml <span class="keyword">import</span> html</span><br><span class="line">et = html.etree</span><br><span class="line">print(et.HTML(response.content))</span><br></pre></td></tr></table></figure><p>终于突破了这个问题</p><h2 id="问题2："><a href="#问题2：" class="headerlink" title="问题2："></a><b>问题2：</b></h2><ul><li>解析过后发现有些需要整个代码块转为字符串</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> xml.etree.ElementTree <span class="keyword">as</span> ET</span><br><span class="line">print(ET.tostring(dom代码块, encoding=<span class="string">'utf8'</span>))</span><br></pre></td></tr></table></figure><ul><li>数据是有了，但是不太对，中文出来的是十六进制的数据，没法继续了啊<br>百度/Google，我又来了。。。</li></ul><h2 id="解决：-1"><a href="#解决：-1" class="headerlink" title="解决："></a><b>解决：</b></h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">print(str(ET.tostring(dom代码块, encoding=<span class="string">'utf8'</span>), <span class="string">'utf-8'</span>))</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> Python </category>
          
      </categories>
      
      
        <tags>
            
            <tag> python </tag>
            
            <tag> 爬虫 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Python写入InfluxDB</title>
      <link href="/2019/06/04/influxdb/"/>
      <url>/2019/06/04/influxdb/</url>
      
        <content type="html"><![CDATA[<blockquote><p>InfluxDB是一个开源的时序数据库，使用GO语言开发，特别适合用于处理和分析资源监控数据这种时序相关数据。而InfluxDB自带的各种特殊函数如求标准差，随机取样数据，统计数据变化比等，使数据统计和实时分析变得十分方便。</p></blockquote><h2 id="安装"><a href="#安装" class="headerlink" title="安装"></a><b>安装</b></h2><ul><li>数据库安装<br>根据不同的系统安装方式不太一样, 具体参考<a href="https://docs.influxdata.com/influxdb/v1.7/introduction/installation/" rel="external nofollow noopener noreferrer" target="_blank">官网</a>, 这个官网提供的挺详细的。<br><b>如果有指定版本的requests, 注意一下requests版本, influxdb不支持旧版的requests库, 版本不支持安装时会有提示。</b></li><li>Python安装操作库</li></ul><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">python3 -m pip install influxdb</span><br><span class="line"></span><br><span class="line">pip install --upgrade influxdb             # 升级</span><br><span class="line">pip uninstall influxdb       # 卸载</span><br></pre></td></tr></table></figure><h2 id="使用准备"><a href="#使用准备" class="headerlink" title="使用准备"></a><b>使用准备</b></h2><ul><li>操作准备<br>需要先创建数据库，可以使用命令行进行创建</li></ul><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">create database database_name;</span><br></pre></td></tr></table></figure><p>也可以使用python命令直接创建</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> influxdb <span class="keyword">import</span> InfluxDBClient</span><br><span class="line"><span class="comment"># 首先连接influxdb</span></span><br><span class="line">client = InfluxDBClient(host=<span class="string">'服务器IP'</span>, port=<span class="number">8086</span>, username=<span class="string">'myuser'</span>, password=<span class="string">'mypass'</span> ssl=<span class="literal">True</span>, verify_ssl=<span class="literal">True</span>)</span><br><span class="line"><span class="comment"># 创建数据库</span></span><br><span class="line">client.create_database(<span class="string">'database_name'</span>)   </span><br><span class="line"><span class="comment"># 查询数据库</span></span><br><span class="line">client.get_list_database()</span><br></pre></td></tr></table></figure><h2 id="操作"><a href="#操作" class="headerlink" title="操作"></a><b>操作</b></h2><ul><li>连接数据库</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> influxdb <span class="keyword">import</span> InfluxDBClient</span><br><span class="line">client = InfluxDBClient(<span class="string">'服务器IP'</span>, <span class="string">'8086'</span>, <span class="string">'myuser'</span>, <span class="string">'mypass'</span>, <span class="string">'database_name'</span>)</span><br></pre></td></tr></table></figure><ul><li>写入数据<br>InfluxDB的每条数据可以看成一个json数据（其实写入的时候就是个json数据），每条数据中包含了’measurement’，’time’，’tags’，’fields’</li></ul><table><thead><tr><th>属性</th><th>含义</th></tr></thead><tbody><tr><td>measurement</td><td>相当于数据库中的表</td></tr><tr><td>time</td><td>数据的记录时间，是数据的主索引</td></tr><tr><td>tags</td><td>一个有索引的值</td></tr><tr><td>fields</td><td>没有索引的值</td></tr></tbody></table><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">w_json = [&#123;</span><br><span class="line">    <span class="string">"measurement"</span>: <span class="string">'table_name'</span>,</span><br><span class="line">    <span class="string">"time"</span>: now_time,</span><br><span class="line">    <span class="string">"tags"</span>: &#123;</span><br><span class="line">        <span class="string">'name'</span>: <span class="string">'名字'</span>,</span><br><span class="line">        <span class="string">'categories'</span>: <span class="string">'类型'</span></span><br><span class="line">        &#125;,</span><br><span class="line">    <span class="string">"fields"</span>: &#123;</span><br><span class="line">        <span class="string">'price'</span>: <span class="string">"价格"</span>,</span><br><span class="line">        <span class="string">'unit'</span>: <span class="string">"单位"</span>,</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;]</span><br><span class="line">写入数据库</span><br><span class="line">client.write_points(w_json)</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> Python </category>
          
      </categories>
      
      
        <tags>
            
            <tag> python </tag>
            
            <tag> InfluxDB </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>JetBrains系列汉化补丁</title>
      <link href="/2019/06/02/JetBrains/"/>
      <url>/2019/06/02/JetBrains/</url>
      
        <content type="html"><![CDATA[<ul><li>GitHub上的一个项目，操作起来超级简单，汉化的也算是很全面了</li></ul><ul><li>下载链接：<a href="https://github.com/pingfangx/jetbrains-in-chinese" rel="external nofollow noopener noreferrer" target="_blank">https://github.com/pingfangx/jetbrains-in-chinese</a> </li></ul><p>原文链接：<a href="https://github.com/pingfangx/TranslatorX" rel="external nofollow noopener noreferrer" target="_blank">https://github.com/pingfangx/TranslatorX</a></p>]]></content>
      
      
      <categories>
          
          <category> 资源 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> IDE </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Python视频教程</title>
      <link href="/2019/05/30/%E8%B5%84%E6%BA%90/"/>
      <url>/2019/05/30/%E8%B5%84%E6%BA%90/</url>
      
        <content type="html"><![CDATA[<h2 id="Python-编程教程36集"><a href="#Python-编程教程36集" class="headerlink" title="Python 编程教程36集"></a>Python 编程教程36集</h2><p>链接: <a href="https://pan.baidu.com/s/1aQ3IfLTKxnuA7otUtX4sfA" rel="external nofollow noopener noreferrer" target="_blank">https://pan.baidu.com/s/1aQ3IfLTKxnuA7otUtX4sfA</a><br>提取码: vtrc</p><h2 id="Django视频教程"><a href="#Django视频教程" class="headerlink" title="Django视频教程"></a>Django视频教程</h2><p>链接: <a href="https://pan.baidu.com/s/1c3NQ65YlgpCqtEF8pBIz3A" rel="external nofollow noopener noreferrer" target="_blank">https://pan.baidu.com/s/1c3NQ65YlgpCqtEF8pBIz3A</a><br>提取码: ukfy </p><h2 id="Python运维系列视频"><a href="#Python运维系列视频" class="headerlink" title="Python运维系列视频"></a>Python运维系列视频</h2><p>链接: <a href="https://pan.baidu.com/s/18FF1rt3aGcV3KgA4HtiECw" rel="external nofollow noopener noreferrer" target="_blank">https://pan.baidu.com/s/18FF1rt3aGcV3KgA4HtiECw</a><br>提取码: px5v </p><h2 id="某机构Python视频教程"><a href="#某机构Python视频教程" class="headerlink" title="某机构Python视频教程"></a>某机构Python视频教程</h2><p>链接: <a href="https://pan.baidu.com/s/1U-AS_q04JdWyKFgdMLRRUg" rel="external nofollow noopener noreferrer" target="_blank">https://pan.baidu.com/s/1U-AS_q04JdWyKFgdMLRRUg</a><br>提取码: xdja </p>]]></content>
      
      
      <categories>
          
          <category> 资源 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 学习 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>LeetCode第20题：Valid Parentheses</title>
      <link href="/2019/05/29/LeetCode-20/"/>
      <url>/2019/05/29/LeetCode-20/</url>
      
        <content type="html"><![CDATA[<h2 id="题目"><a href="#题目" class="headerlink" title="题目"></a><b>题目</b></h2><blockquote><p>给定一个只包括 ‘(‘，’)’，’{‘，’}’，’[‘，’]’ 的字符串，判断字符串是否有效。<br>有效字符串需满足：<br>1、左括号必须用相同类型的右括号闭合。<br>2、左括号必须以正确的顺序闭合。<br>3、注意空字符串可被认为是有效字符串。</p></blockquote><ul><li><strong>示例1</strong>:</li></ul><p><em>输入:</em> <code>&quot;()&quot;</code><br><em>输出:</em> <code>true</code>  </p><ul><li><strong>示例2</strong>:</li></ul><p><em>输入:</em> <code>&quot;()[]{}&quot;</code><br><em>输出:</em> <code>true</code>  </p><ul><li><strong>示例3</strong>:</li></ul><p><em>输入:</em> <code>&quot;(]&quot;</code><br><em>输出:</em> <code>false</code>  </p><ul><li><strong>示例4</strong>:</li></ul><p><em>输入:</em> <code>&quot;([)]&quot;</code><br><em>输出:</em> <code>false</code> </p><ul><li><strong>示例5</strong>:</li></ul><p><em>输入:</em> <code>&quot;{[]}&quot;</code><br><em>输出:</em> <code>true</code> </p><h2 id="代码"><a href="#代码" class="headerlink" title="代码"></a><b>代码</b></h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span><span class="params">(object)</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">isValid</span><span class="params">(self, s)</span>:</span></span><br><span class="line">        <span class="string">"""</span></span><br><span class="line"><span class="string">        :type s: str</span></span><br><span class="line"><span class="string">        :rtype: bool</span></span><br><span class="line"><span class="string">        """</span></span><br><span class="line">        stack = []</span><br><span class="line">        dict = &#123;<span class="string">"]"</span>:<span class="string">"["</span>, <span class="string">"&#125;"</span>:<span class="string">"&#123;"</span>, <span class="string">")"</span>:<span class="string">"("</span>&#125;</span><br><span class="line">        <span class="keyword">for</span> char <span class="keyword">in</span> s:</span><br><span class="line">            <span class="keyword">if</span> char <span class="keyword">in</span> dict.values():</span><br><span class="line">                stack.append(char)</span><br><span class="line">            <span class="keyword">elif</span> char <span class="keyword">in</span> dict.keys():</span><br><span class="line">                <span class="keyword">if</span> stack == [] <span class="keyword">or</span> dict[char] != stack.pop():</span><br><span class="line">                    <span class="keyword">return</span> <span class="literal">False</span></span><br><span class="line">            <span class="keyword">else</span>:</span><br><span class="line">                <span class="keyword">return</span> <span class="literal">False</span></span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">not</span> stack</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> LeetCode </category>
          
      </categories>
      
      
        <tags>
            
            <tag> LeetCode </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>selenium+PhantomJS+IP代理</title>
      <link href="/2019/05/28/selenium/"/>
      <url>/2019/05/28/selenium/</url>
      
        <content type="html"><![CDATA[<h2 id="首先安装selenium、PhantomJS"><a href="#首先安装selenium、PhantomJS" class="headerlink" title="首先安装selenium、PhantomJS"></a><b>首先安装selenium、PhantomJS</b></h2><ul><li>selenium安装</li></ul><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pip install selenium</span><br></pre></td></tr></table></figure><ul><li>PhantomJS安装</li></ul><p>这个需要手动的到<a href="http://phantomjs.org/download.html" rel="external nofollow noopener noreferrer" target="_blank">官网</a>下载</p><h2 id="开始使用"><a href="#开始使用" class="headerlink" title="开始使用"></a><b>开始使用</b></h2><ul><li>导入需要的包</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> random</span><br><span class="line"><span class="keyword">from</span> selenium <span class="keyword">import</span> webdriver</span><br><span class="line"><span class="keyword">from</span> selenium.webdriver.common.proxy <span class="keyword">import</span> ProxyType</span><br><span class="line"><span class="comment"># 调用键盘按键操作</span></span><br><span class="line"><span class="keyword">from</span> selenium.webdriver.common.keys <span class="keyword">import</span> Keys</span><br><span class="line"><span class="comment"># 调用鼠标操作</span></span><br><span class="line"><span class="keyword">from</span> selenium.webdriver <span class="keyword">import</span> ActionChains</span><br><span class="line"><span class="comment"># 设置请求头</span></span><br><span class="line"><span class="keyword">from</span> selenium.webdriver.common.desired_capabilities <span class="keyword">import</span> DesiredCapabilities</span><br></pre></td></tr></table></figure><ul><li>操作PhantomJS</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br></pre></td><td class="code"><pre><span class="line">desired_cap = DesiredCapabilities.PHANTOMJS.copy()</span><br><span class="line"><span class="comment"># 设置请求头</span></span><br><span class="line">desired_cap[<span class="string">'phantomjs.page.settings.User-Agent'</span>] = <span class="string">'user_agent...'</span></span><br><span class="line"><span class="comment"># 配置代理IP</span></span><br><span class="line">proxy = [</span><br><span class="line">    <span class="string">'--proxy=%s'</span> % <span class="string">"139.199.38.177:8118"</span>,  <span class="comment"># 设置的代理ip</span></span><br><span class="line">    <span class="string">'--proxy-type=http'</span>,  <span class="comment"># 代理类型</span></span><br><span class="line">    <span class="string">'--ignore-ssl-errors=true'</span>,</span><br><span class="line">    ]</span><br><span class="line"><span class="comment"># 启动PhantomJS</span></span><br><span class="line">driver = webdriver.PhantomJS(executable_path=<span class="string">"./phantomjs-2.1.1-linux-x86_64/bin/phantomjs"</span>,</span><br><span class="line">                                 desired_capabilities=desired_cap,</span><br><span class="line">                                 service_args=proxy)</span><br><span class="line"><span class="comment"># 设置屏幕大小</span></span><br><span class="line">driver.set_window_size(<span class="number">800</span>, <span class="number">600</span>)</span><br><span class="line"><span class="comment"># 请求网页</span></span><br><span class="line">driver.get(<span class="string">"http://www.baidu.com/"</span>)</span><br><span class="line"><span class="comment"># 根据html元素的id找到搜索框，并且输入要搜索的内容</span></span><br><span class="line">driver.find_element_by_id(<span class="string">'kw'</span>).send_keys(<span class="string">"时光不写博客"</span>)</span><br><span class="line"><span class="comment"># 查到搜索按钮，并且点击搜索</span></span><br><span class="line">random.choice([</span><br><span class="line">            <span class="comment"># 使用鼠标点击操作</span></span><br><span class="line">            driver.find_element_by_id(<span class="string">'su'</span>).click(),</span><br><span class="line">            <span class="comment"># 使用键盘回车操作</span></span><br><span class="line">            driver.find_element_by_id(<span class="string">'su'</span>).send_keys(Keys.RETURN)</span><br><span class="line">            ])</span><br><span class="line"><span class="comment"># 截屏</span></span><br><span class="line">driver.save_screenshot(<span class="string">'baidu.png'</span>)</span><br><span class="line"><span class="comment"># 使用xpath查到标签，并且点击</span></span><br><span class="line">driver.find_elements_by_xpath(<span class="string">"//div[@id=%s]/h3/a"</span> % <span class="number">2</span>)[<span class="number">0</span>].click()</span><br><span class="line"><span class="comment"># 拿到当前浏览器的最后一个tab，这是一个列表的形式</span></span><br><span class="line">tab = driver.window_handles[<span class="number">-1</span>]</span><br><span class="line"><span class="comment"># 切换到刚刚点击的页面</span></span><br><span class="line">driver.switch_to_window(tab)</span><br><span class="line">driver.save_screenshot(<span class="string">'blog.png'</span>)</span><br><span class="line"><span class="comment"># 根据标签名查到要点击的数据</span></span><br><span class="line">title = driver.find_element_by_tag_name(<span class="string">"title"</span>)</span><br><span class="line"><span class="comment"># 移动鼠标到title的位置，并且点击</span></span><br><span class="line">ActionChains(driver).move_to_element(title).click(title).perform()</span><br><span class="line"><span class="comment"># 刷新页面</span></span><br><span class="line">driver.refresh()</span><br><span class="line"><span class="comment"># 打印页面源码</span></span><br><span class="line">driver.page_source</span><br><span class="line">title = driver.find_elements_by_xpath(<span class="string">"//a[@href='/.']"</span>)[<span class="number">0</span>]</span><br><span class="line"><span class="comment"># 移动到title下10像素位置，并且双点击</span></span><br><span class="line">ActionChains(driver).move_to_element_with_offset(title, <span class="number">0</span>, <span class="number">10</span>).double_click().perform()</span><br><span class="line"><span class="comment"># 退出</span></span><br><span class="line">driver.quit()</span><br></pre></td></tr></table></figure><ul><li>具体操作命令</li></ul><table><thead><tr><th>命令</th><th>说明</th></tr></thead><tbody><tr><td>click(on_element=None)</td><td>单击鼠标左键</td></tr><tr><td><code>context_click(on_element=None)</code></td><td><code>点击鼠标右键</code></td></tr><tr><td>double_click(on_element=None)</td><td>双击鼠标左键</td></tr><tr><td><code>click_and_hold(on_element=None)</code></td><td><code>点击鼠标左键，不松开</code></td></tr><tr><td>drag_and_drop(source, target)</td><td>拖拽到某个元素然后松开</td></tr><tr><td><code>drag_and_drop_by_offset(source, xoffset, yoffset)</code></td><td><code>拖拽到某个坐标然后松开</code></td></tr><tr><td>key_down(value, element=None)</td><td>按下某个键盘上的键</td></tr><tr><td><code>key_up(value, element=None)</code></td><td><code>松开某个键</code></td></tr><tr><td>move_by_offset(xoffset, yoffset)</td><td>鼠标从当前位置移动到某个坐标</td></tr><tr><td><code>move_to_element(to_element)</code></td><td><code>鼠标移动到某个元素</code></td></tr><tr><td>move_to_element_with_offset(to_element, xoffset, yoffset)</td><td>移动到距某个元素（左上角坐标）多少距离的位置</td></tr><tr><td><code>perform()</code></td><td><code>执行链中的所有动作</code></td></tr><tr><td>release(on_element=None)</td><td>在某个元素位置松开鼠标左键</td></tr><tr><td><code>send_keys(*keys_to_send)</code></td><td><code>发送某个键到当前焦点的元素</code></td></tr><tr><td>send_keys_to_element(element, *keys_to_send)</td><td>发送某个键到指定元素</td></tr></tbody></table>]]></content>
      
      
      <categories>
          
          <category> Python </category>
          
      </categories>
      
      
        <tags>
            
            <tag> python </tag>
            
            <tag> test </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>LeetCode第9题：Palindrome Number</title>
      <link href="/2019/05/23/LeetCode-9/"/>
      <url>/2019/05/23/LeetCode-9/</url>
      
        <content type="html"><![CDATA[<h2 id="题目"><a href="#题目" class="headerlink" title="题目"></a><b>题目</b></h2><blockquote><p>判断一个整数是否是回文数。回文数是指正序（从左向右）和倒序（从右向左）读都是一样的整数。</p></blockquote><ul><li><strong>示例1</strong>:</li></ul><p><em>输入:</em> <code>121</code><br><em>输出:</em> <code>true</code>  </p><ul><li><strong>示例2</strong>:</li></ul><p><em>输入:</em> <code>-121</code><br><em>输出:</em> <code>false</code><br><em>解释:</em> 从左向右读, 为 <code>-121</code>。 从右向左读, 为 <code>121-</code>。因此它不是一个回文数。</p><ul><li><strong>示例3</strong>:</li></ul><p><em>输入:</em> <code>10</code><br><em>输出:</em> <code>false</code><br><em>解释:</em> 从右向左读, 为 <code>01</code>。因此它不是一个回文数。 </p><h2 id="代码"><a href="#代码" class="headerlink" title="代码"></a><b>代码</b></h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span><span class="params">(object)</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">isPalindrome</span><span class="params">(self, x)</span>:</span></span><br><span class="line">        <span class="string">"""</span></span><br><span class="line"><span class="string">        :type x: int</span></span><br><span class="line"><span class="string">        :rtype: bool</span></span><br><span class="line"><span class="string">        """</span></span><br><span class="line">        <span class="keyword">return</span> str(x) == str(x)[::<span class="number">-1</span>]</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> LeetCode </category>
          
      </categories>
      
      
        <tags>
            
            <tag> LeetCode </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>LeetCode第7题：Reverse Integer</title>
      <link href="/2019/05/22/LeetCode-7/"/>
      <url>/2019/05/22/LeetCode-7/</url>
      
        <content type="html"><![CDATA[<h2 id="题目"><a href="#题目" class="headerlink" title="题目"></a><b>题目</b></h2><blockquote><p>给出一个 32 位的有符号整数，你需要将这个整数中每位上的数字进行反转。</p></blockquote><ul><li><strong>示例1</strong>:</li></ul><p><em>输入:</em> <code>123</code><br><em>输出:</em> <code>321</code>  </p><ul><li><strong>示例2</strong>:</li></ul><p><em>输入:</em> <code>-123</code><br><em>输出:</em> <code>-321</code>  </p><ul><li><strong>示例3</strong>:</li></ul><p><em>输入:</em> <code>120</code><br><em>输出:</em> <code>21</code> </p><p><strong>注意:</strong> 假设我们的环境只能存储得下 32 位的有符号整数，则其数值范围为 [−2<sup>31</sup>, 2<sup>31</sup> − 1]。请根据这个假设，如果反转后整数溢出那么就返回 0。</p><h2 id="代码"><a href="#代码" class="headerlink" title="代码"></a><b>代码</b></h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span><span class="params">(object)</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">reverse</span><span class="params">(self, x)</span>:</span></span><br><span class="line">        <span class="string">"""</span></span><br><span class="line"><span class="string">        :type x: int</span></span><br><span class="line"><span class="string">        :rtype: int</span></span><br><span class="line"><span class="string">        """</span></span><br><span class="line">        <span class="keyword">if</span> x &lt; <span class="number">0</span>:</span><br><span class="line">            str_x = str(x)[<span class="number">1</span>:][::<span class="number">-1</span>]</span><br><span class="line">            x = <span class="number">-1</span> * int(str_x)</span><br><span class="line">            <span class="keyword">if</span> <span class="number">-2147483648</span> &lt; x:</span><br><span class="line">                <span class="keyword">return</span> x</span><br><span class="line">            <span class="keyword">return</span> <span class="number">0</span></span><br><span class="line">        x = int(str(x)[::<span class="number">-1</span>])</span><br><span class="line">        <span class="keyword">if</span> x &lt; <span class="number">2147483647</span>:</span><br><span class="line">            <span class="keyword">return</span> x </span><br><span class="line">        <span class="keyword">return</span> <span class="number">0</span></span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> LeetCode </category>
          
      </categories>
      
      
        <tags>
            
            <tag> LeetCode </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>LeetCode第38题：Count and Say</title>
      <link href="/2019/05/21/LeetCode-38/"/>
      <url>/2019/05/21/LeetCode-38/</url>
      
        <content type="html"><![CDATA[<h2 id="题目"><a href="#题目" class="headerlink" title="题目"></a><strong>题目</strong></h2><blockquote><p>报数序列是一个整数序列，按照其中的整数的顺序进行报数，得到下一个数。其前五项如下：<br>1.1<br>   2.11<br>   3.21<br>   4.1211<br>   5.111221</p></blockquote><blockquote><p>1 被读作(“<code>一个一</code>“), 即 11。<br>11 被读作(“<code>两个一</code>“), 即 21。<br>21 被读作(“<code>一个二</code>“, “<code>一个一</code>“), 即 1211。</p></blockquote><blockquote><p>给定一个正整数 n（1 ≤ n ≤ 30），输出报数序列的第 n 项。<br>注意：整数顺序将表示为一个字符串。</p></blockquote><p>这个题有点奇葩，多读几遍就懂了</p><ul><li><strong>示例 1:</strong></li></ul><p><em>输入</em>: 1<br><em>输出</em>: “1”</p><ul><li><strong>示例 2：</strong></li></ul><p><em>输入</em>: 4<br><em>输出</em>: “1211”</p><h2 id="代码"><a href="#代码" class="headerlink" title="代码"></a><strong>代码</strong></h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span><span class="params">(object)</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">countAndSay</span><span class="params">(self, n)</span>:</span></span><br><span class="line">        <span class="string">"""</span></span><br><span class="line"><span class="string">        :type n: int</span></span><br><span class="line"><span class="string">        :rtype: str</span></span><br><span class="line"><span class="string">        """</span></span><br><span class="line">        d = <span class="string">'1'</span></span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> range(n<span class="number">-1</span>):</span><br><span class="line">            tem = d[<span class="number">0</span>]</span><br><span class="line">            s = <span class="string">''</span></span><br><span class="line">            count = <span class="number">0</span></span><br><span class="line">            <span class="keyword">for</span> x <span class="keyword">in</span> d:</span><br><span class="line">                <span class="keyword">if</span> tem == x:</span><br><span class="line">                    count += <span class="number">1</span></span><br><span class="line">                    <span class="keyword">continue</span></span><br><span class="line">                s += str(count) + tem</span><br><span class="line">                count = <span class="number">1</span></span><br><span class="line">                tem = x</span><br><span class="line">            s += str(count) + tem</span><br><span class="line">            d = s</span><br><span class="line">        <span class="keyword">return</span> d</span><br></pre></td></tr></table></figure><ul><li><del>其实这个比较快。。。。。。</del>  抄袭自：<a href="https://leetcode-cn.com/lwl" rel="external nofollow noopener noreferrer" target="_blank">@lwl</a></li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span><span class="params">(object)</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">countAndSay</span><span class="params">(self, n)</span>:</span></span><br><span class="line">        <span class="string">"""</span></span><br><span class="line"><span class="string">        :type n: int</span></span><br><span class="line"><span class="string">        :rtype: str</span></span><br><span class="line"><span class="string">        """</span></span><br><span class="line">        di = &#123;</span><br><span class="line">        <span class="number">1</span>:<span class="string">"1"</span>,</span><br><span class="line">        <span class="number">2</span>:<span class="string">"11"</span>,</span><br><span class="line">        <span class="number">3</span>:<span class="string">"21"</span>,</span><br><span class="line">        <span class="number">4</span>:<span class="string">"1211"</span>,</span><br><span class="line">        <span class="number">5</span>:<span class="string">"111221"</span>,</span><br><span class="line">        <span class="number">6</span>:<span class="string">"312211"</span>,</span><br><span class="line">        <span class="number">7</span>:<span class="string">"13112221"</span>,</span><br><span class="line">        <span class="number">8</span>:<span class="string">"1113213211"</span>,</span><br><span class="line">        <span class="number">9</span>:<span class="string">"31131211131221"</span>,</span><br><span class="line">        <span class="number">10</span>:<span class="string">"13211311123113112211"</span>,</span><br><span class="line">        <span class="number">11</span>:<span class="string">"11131221133112132113212221"</span>,</span><br><span class="line">        <span class="number">12</span>:<span class="string">"3113112221232112111312211312113211"</span>,</span><br><span class="line">        <span class="number">13</span>:<span class="string">"1321132132111213122112311311222113111221131221"</span>,</span><br><span class="line">        <span class="number">14</span>:<span class="string">"11131221131211131231121113112221121321132132211331222113112211"</span>,</span><br><span class="line">        <span class="number">15</span>:<span class="string">"311311222113111231131112132112311321322112111312211312111322212311322113212221"</span>,</span><br><span class="line">        <span class="number">16</span>:<span class="string">"132113213221133112132113311211131221121321131211132221123113112221131112311332111213211322211312113211"</span>,</span><br><span class="line">        <span class="number">17</span>:<span class="string">"11131221131211132221232112111312212321123113112221121113122113111231133221121321132132211331121321231231121113122113322113111221131221"</span>,</span><br><span class="line">        <span class="number">18</span>:<span class="string">"31131122211311123113321112131221123113112211121312211213211321322112311311222113311213212322211211131221131211132221232112111312111213111213211231131122212322211331222113112211"</span>,</span><br><span class="line">        <span class="number">19</span>:<span class="string">"1321132132211331121321231231121113112221121321132122311211131122211211131221131211132221121321132132212321121113121112133221123113112221131112311332111213122112311311123112111331121113122112132113213211121332212311322113212221"</span>,</span><br><span class="line">        <span class="number">20</span>:<span class="string">"11131221131211132221232112111312111213111213211231132132211211131221131211221321123113213221123113112221131112311332211211131221131211132211121312211231131112311211232221121321132132211331121321231231121113112221121321133112132112312321123113112221121113122113121113123112112322111213211322211312113211"</span>,</span><br><span class="line">        <span class="number">21</span>:<span class="string">"311311222113111231133211121312211231131112311211133112111312211213211312111322211231131122211311122122111312211213211312111322211213211321322113311213212322211231131122211311123113223112111311222112132113311213211221121332211211131221131211132221232112111312111213111213211231132132211211131221232112111312211213111213122112132113213221123113112221131112311311121321122112132231121113122113322113111221131221"</span>,</span><br><span class="line">        <span class="number">22</span>:<span class="string">"132113213221133112132123123112111311222112132113311213211231232112311311222112111312211311123113322112132113213221133122112231131122211211131221131112311332211211131221131211132221232112111312111213322112132113213221133112132113221321123113213221121113122123211211131221222112112322211231131122211311123113321112131221123113111231121113311211131221121321131211132221123113112211121312211231131122211211133112111311222112111312211312111322211213211321322113311213211331121113122122211211132213211231131122212322211331222113112211"</span>,</span><br><span class="line">        <span class="number">23</span>:<span class="string">"111312211312111322212321121113121112131112132112311321322112111312212321121113122112131112131221121321132132211231131122211331121321232221121113122113121113222123112221221321132132211231131122211331121321232221123113112221131112311332111213122112311311123112112322211211131221131211132221232112111312211322111312211213211312111322211231131122111213122112311311221132211221121332211213211321322113311213212312311211131122211213211331121321123123211231131122211211131221131112311332211213211321223112111311222112132113213221123123211231132132211231131122211311123113322112111312211312111322212321121113122123211231131122113221123113221113122112132113213211121332212311322113212221"</span>,</span><br><span class="line">        <span class="number">24</span>:<span class="stringspan>,</span><br><span class="line">        <span class="number">25</span>:<span class="string">"132113213221133112132123123112111311222112132113311213211231232112311311222112111312211311123113322112132113212231121113112221121321132132211231232112311321322112311311222113111231133221121113122113121113221112131221123113111231121123222112132113213221133112132123123112111312111312212231131122211311123113322112111312211312111322111213122112311311123112112322211211131221131211132221232112111312111213111213211231132132211211131221232112111312212221121123222112132113213221133112132123123112111311222112132113213221132213211321322112311311222113311213212322211211131221131211221321123113213221121113122113121132211332113221122112133221123113112221131112311332111213122112311311123112111331121113122112132113121113222112311311221112131221123113112221121113311211131122211211131221131211132221121321132132212321121113121112133221123113112221131112212211131221121321131211132221123113112221131112311332211211133112111311222112111312211311123113322112111312211312111322212321121113121112133221121321132132211331121321231231121113112221121321132122311211131122211211131221131211322113322112111312211322132113213221123113112221131112311311121321122112132231121113122113322113111221131221"</span>,</span><br><span class="line">        <span class="number">26</span>:<span class="stringspan>,</span><br><span class="line">        <span class="number">27</span>:<span class="stringspan>,</span><br><span class="line">        <span class="number">28</span>:<span class="string">"13211321322113311213212312311211131122211213211331121321123123211231131122211211131221131112311332211213211321223112111311222112132113213221123123211231132132211231131122211311123113322112111312211312111322111213122112311311123112112322211213211321322113312211223113112221121113122113111231133221121321132132211331121321232221123123211231132132211231131122211331121321232221123113112221131112311332111213122112311311123112112322211211131221131211132221232112111312211322111312211213211312111322211231131122111213122112311311221132211221121332211213211321322113311213212312311211131122211213211331121321123123211231131122211211131221232112111312211312113211223113112221131112311332111213122112311311123112112322211211131221131211132221232112111312211322111312211213211312111322211231131122111213122112311311221132211221121332211211131221131211132221232112111312111213111213211231132132211211131221232112111312211213111213122112132113213221123113112221133112132123222112111312211312112213211231132132211211131221131211322113321132211221121332211213211321322113311213212312311211131122211213211331121321123123211231131122211211131221131112311332211213211321322113311213212322211322132113213221133112132123222112311311222113111231132231121113112221121321133112132112211213322112111312211312111322212311222122132113213221123113112221133112132123222112111312211312111322212311322123123112111321322123122113222122211211232221123113112221131112311332111213122112311311123112111331121113122112132113121113222112311311221112131221123113112221121113311211131122211211131221131211132221121321132132212321121113121112133221123113112221131112212211131221121321131211132221123113112221131112311332211211133112111311222112111312211311123113322112111312211312111322212321121113121112133221121321132132211331121321132213211231132132211211131221232112111312212221121123222112311311222113111231133211121321321122111312211312111322211213211321322123211211131211121332211231131122211311123113321112131221123113111231121123222112111331121113112221121113122113111231133221121113122113121113221112131221123113111231121123222112111312211312111322212321121113121112131112132112311321322112111312212321121113122122211211232221121321132132211331121321231231121113112221121321133112132112312321123113112221121113122113111231133221121321132132211331221122311311222112111312211311123113322112111312211312111322212311322123123112112322211211131221131211132221132213211321322113311213212322211231131122211311123113321112131221123113112211121312211213211321222113222112132113223113112221121113122113121113123112112322111213211322211312113211"</span>,</span><br><span class="line">        <span class="number">29</span>:<span class="stringspan>,</span><br><span class="line">        <span class="number">30</span>:<span class="stringspan>,</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> di[n]</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> LeetCode </category>
          
      </categories>
      
      
        <tags>
            
            <tag> LeetCode </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>LeetCode第28题：Implement strStr()</title>
      <link href="/2019/05/19/LeetCode-28/"/>
      <url>/2019/05/19/LeetCode-28/</url>
      
        <content type="html"><![CDATA[<h2 id="题目"><a href="#题目" class="headerlink" title="题目"></a><strong>题目</strong></h2><blockquote><p>实现 strStr() 函数。<br>给定一个 haystack 字符串和一个 needle 字符串，在 haystack 字符串中找出 needle 字符串出现的第一个位置 (从0开始)。如果不存在，则返回  -1。</p></blockquote><ul><li><strong>示例 1:</strong><br><em>输入:</em> haystack = “hello”, needle = “ll”<br><em>输出:</em> 2</li><li><strong>示例 2:</strong><br><em>输入:</em> haystack = “aaaaa”, needle = “bba”<br><em>输出:</em> -1<h2 id="代码"><a href="#代码" class="headerlink" title="代码"></a><strong>代码</strong></h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span><span class="params">(object)</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">strStr</span><span class="params">(self, haystack, needle)</span>:</span></span><br><span class="line">        <span class="string">"""</span></span><br><span class="line"><span class="string">        :type haystack: str</span></span><br><span class="line"><span class="string">        :type needle: str</span></span><br><span class="line"><span class="string">        :rtype: int</span></span><br><span class="line"><span class="string">        """</span></span><br><span class="line">        <span class="keyword">if</span> needle == <span class="string">""</span>:</span><br><span class="line">            <span class="keyword">return</span> <span class="number">0</span></span><br><span class="line">        <span class="keyword">if</span> needle <span class="keyword">in</span> haystack:</span><br><span class="line">            <span class="keyword">return</span> len(haystack.split(needle)[<span class="number">0</span>])</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            <span class="keyword">return</span> <span class="number">-1</span></span><br></pre></td></tr></table></figure></li></ul>]]></content>
      
      
      <categories>
          
          <category> LeetCode </category>
          
      </categories>
      
      
        <tags>
            
            <tag> LeetCode </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>LeetCode第14题：Longest Common Prefix</title>
      <link href="/2019/05/18/LeetCode-14/"/>
      <url>/2019/05/18/LeetCode-14/</url>
      
        <content type="html"><![CDATA[<h2 id="题目"><a href="#题目" class="headerlink" title="题目"></a><b>题目</b></h2><blockquote><p>编写一个函数来查找字符串数组中的最长公共前缀。<br>如果不存在公共前缀，返回空字符串 “”。</p></blockquote><ul><li><strong>示例 1</strong>:<br><em>输入:</em> <code>[&quot;flower&quot;,&quot;flow&quot;,&quot;flight&quot;]</code><br><em>输出:</em> <code>&quot;fl&quot;</code>  </li><li><strong>示例 2</strong>:<br><em>输入</em>: <code>[&quot;dog&quot;,&quot;racecar&quot;,&quot;car&quot;]</code><br><em>输出:</em> <code>&quot;&quot;</code><br><em>解释:</em> 输入不存在公共前缀。<br><em>说明:</em> 所有输入只包含小写字母 a-z 。  </li></ul><h2 id="代码"><a href="#代码" class="headerlink" title="代码"></a><b>代码</b></h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span><span class="params">(object)</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">longestCommonPrefix</span><span class="params">(self, strs)</span>:</span></span><br><span class="line">        <span class="string">"""</span></span><br><span class="line"><span class="string">        :type strs: List[str]</span></span><br><span class="line"><span class="string">        :rtype: str</span></span><br><span class="line"><span class="string">        """</span></span><br><span class="line">        res = <span class="string">''</span></span><br><span class="line">        <span class="comment"># 排除特殊情况</span></span><br><span class="line">        <span class="keyword">if</span> len(strs) == <span class="number">0</span>:</span><br><span class="line">            <span class="keyword">return</span> res</span><br><span class="line">        <span class="keyword">if</span> len(strs) == <span class="number">1</span>:</span><br><span class="line">            <span class="keyword">return</span> strs[<span class="number">0</span>]</span><br><span class="line">        min_length = len(strs[<span class="number">0</span>])</span><br><span class="line">        <span class="comment"># 找到最短的字符串，确定循环次数</span></span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">1</span>, len(strs)):</span><br><span class="line">            <span class="keyword">if</span> len(strs[i]) &lt; min_length:</span><br><span class="line">                min_length = len(strs[i])</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> range(min_length):</span><br><span class="line">            tmp_char = strs[<span class="number">0</span>][i]</span><br><span class="line">            <span class="comment"># 用每个字符串的第i个元素和第0个字符串的第i个元素对比</span></span><br><span class="line">            <span class="keyword">for</span> j <span class="keyword">in</span> range(<span class="number">1</span>, len(strs)):</span><br><span class="line">                <span class="comment"># 不等则清除tmp_char并结束</span></span><br><span class="line">                <span class="keyword">if</span> strs[j][i] != tmp_char:</span><br><span class="line">                        tmp_char = <span class="string">""</span></span><br><span class="line">            <span class="keyword">if</span> tmp_char == <span class="string">""</span>:</span><br><span class="line">                <span class="keyword">break</span></span><br><span class="line">            res += tmp_char</span><br><span class="line">        <span class="keyword">return</span> res</span><br></pre></td></tr></table></figure><p>自己写的太烂了，cp个范例。。。</p>]]></content>
      
      
      <categories>
          
          <category> LeetCode </category>
          
      </categories>
      
      
        <tags>
            
            <tag> LeetCode </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>LeetCode第1题：Two Sum</title>
      <link href="/2019/05/17/LeetCode-1/"/>
      <url>/2019/05/17/LeetCode-1/</url>
      
        <content type="html"><![CDATA[<h2 id="题目"><a href="#题目" class="headerlink" title="题目"></a><b>题目</b></h2><blockquote><p>给定一个整数数组 nums 和一个目标值 target，请你在该数组中找出和为目标值的那 两个 整数，并返回他们的数组下标。<br><br>你可以假设每种输入只会对应一个答案。但是，你不能重复利用这个数组中同样的元素。</p></blockquote><ul><li><strong>示例 </strong>:<br><em>输入:</em> <code>nums = [2, 7, 11, 15], target = 9</code><br><em>解释:</em> 因为<code>nums[0] + nums[1] = 2 + 7 = 9</code><br><em>输出:</em> <code>[0, 1]</code>  </li></ul><h2 id="代码"><a href="#代码" class="headerlink" title="代码"></a><b>代码</b></h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span><span class="params">(object)</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">twoSum</span><span class="params">(self, nums, target)</span>:</span></span><br><span class="line">        <span class="string">"""</span></span><br><span class="line"><span class="string">        :type nums: List[int]</span></span><br><span class="line"><span class="string">        :type target: int</span></span><br><span class="line"><span class="string">        :rtype: List[int]</span></span><br><span class="line"><span class="string">        """</span></span><br><span class="line">        d = &#123;&#125;</span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> range(len(nums)):</span><br><span class="line">            <span class="keyword">if</span> d.get(target - nums[i], <span class="literal">None</span>) == <span class="literal">None</span>: </span><br><span class="line">                d[nums[i]] = i  </span><br><span class="line">            <span class="keyword">else</span>:</span><br><span class="line">                <span class="keyword">return</span> (d[target - nums[i]], i)</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> LeetCode </category>
          
      </categories>
      
      
        <tags>
            
            <tag> LeetCode </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>解决:Failed to add /run/systemd/ask-password to directory watch:No space left on device</title>
      <link href="/2019/05/14/%E8%A7%A3%E5%86%B3No-space-left-on-device/"/>
      <url>/2019/05/14/%E8%A7%A3%E5%86%B3No-space-left-on-device/</url>
      
        <content type="html"><![CDATA[<p>今天运行了一下privoxy，蹦出来了：<code>Failed to add /run/systemd/ask-password to directory watch: No space left on device</code></p><a id="more"></a><hr><p><code>df</code>查了一下磁盘空间，完全够用，找了一下解决方法，做个记录</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">sudo -i</span><br><span class="line">echo 1048576 &gt; /proc/sys/fs/inotify/max_user_watches</span><br><span class="line">exit</span><br><span class="line">sudo vim /etc/sysctl.conf</span><br></pre></td></tr></table></figure><p>在<code>sysctl.conf</code>中加入：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">fs.inotify.max_user_watches=1048576</span><br></pre></td></tr></table></figure><p>参考：<a href="https://askubuntu.com/questions/828779/failed-to-add-run-systemd-ask-password-to-directory-watch-no-space-left-on-dev" rel="external nofollow noopener noreferrer" target="_blank">https://askubuntu.com/questions/828779/failed-to-add-run-systemd-ask-password-to-directory-watch-no-space-left-on-dev</a></p>]]></content>
      
      
      <categories>
          
          <category> Linux </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Linux </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Python list元素移动</title>
      <link href="/2019/05/13/python-list%E5%85%83%E7%B4%A0%E7%A7%BB%E5%8A%A8/"/>
      <url>/2019/05/13/python-list%E5%85%83%E7%B4%A0%E7%A7%BB%E5%8A%A8/</url>
      
        <content type="html"><![CDATA[<p>有更好的建议可以发邮件讨论，感谢</p><a id="more"></a><hr><ul><li><strong>思路</strong></li></ul><p>1、得到要移动元素的当前下标<br>2、pop出要移动的元素<br>3、计算移动位置，insert进列表</p><ul><li><strong>实现</strong></li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 把a2向右移动两位</span></span><br><span class="line">list_a = [<span class="string">'a1'</span>, <span class="string">'a2'</span>, <span class="string">'a3'</span>, <span class="string">'a4'</span>]</span><br><span class="line">index_a2 = list_a.index(<span class="string">'a2'</span>)</span><br><span class="line">a2 = list_a.pop(index_a2)</span><br><span class="line"><span class="comment"># 向右移动时注意index小于零的情况</span></span><br><span class="line">insert_a2 = index_a2 + <span class="number">2</span></span><br><span class="line">list_a.insert(insert_a2, a2)</span><br><span class="line">print(list_a)    <span class="comment"># ['a1', 'a3', 'a4', 'a2']</span></span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> Python </category>
          
      </categories>
      
      
        <tags>
            
            <tag> python </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Python四舍五入保留两位小数</title>
      <link href="/2019/05/12/python%E5%9B%9B%E8%88%8D%E4%BA%94%E5%85%A5/"/>
      <url>/2019/05/12/python%E5%9B%9B%E8%88%8D%E4%BA%94%E5%85%A5/</url>
      
        <content type="html"><![CDATA[<p>四舍五入这个问题竟然出乎意料的不简单</p><a id="more"></a><hr><h2 id="出现问题"><a href="#出现问题" class="headerlink" title="出现问题"></a><b>出现问题</b></h2><ul><li>失败一：使用<code>&quot;%.2f&quot;</code></li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">a = <span class="number">1.335</span></span><br><span class="line">print(<span class="string">"%.2f"</span> % a)       <span class="comment"># 输出1.33</span></span><br></pre></td></tr></table></figure><ul><li>失败二：使用<code>round()</code></li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">a = <span class="number">1.335</span></span><br><span class="line">print(round(a, <span class="number">2</span>))     <span class="comment"># 输出1.33</span></span><br></pre></td></tr></table></figure><ul><li>失败三：使用<code>Decimal()</code></li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> decimal <span class="keyword">import</span> Decimal</span><br><span class="line">a = <span class="number">1.335</span></span><br><span class="line">print(Decimal(a).quantize(Decimal(<span class="string">'0.00'</span>)))   <span class="comment">#输出1.33</span></span><br></pre></td></tr></table></figure><h2 id="解决问题："><a href="#解决问题：" class="headerlink" title="解决问题："></a><b>解决问题：</b></h2><ul><li>a+0.001</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">a = <span class="number">1.335</span></span><br><span class="line">print(round(a + <span class="number">0.001</span>, <span class="number">2</span>))     <span class="comment"># 输出 1.34</span></span><br></pre></td></tr></table></figure><p>这种方法也有点问题，保留两位小数要加0.001，三位的时候就要加0.0001，不够灵活，暂时没有发现更好的方法，先记一下</p>]]></content>
      
      
      <categories>
          
          <category> Python </category>
          
      </categories>
      
      
        <tags>
            
            <tag> python </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>终端配置ssh秘钥登录</title>
      <link href="/2019/05/11/%E7%BB%88%E7%AB%AFssh%E7%99%BB%E5%BD%95/"/>
      <url>/2019/05/11/%E7%BB%88%E7%AB%AFssh%E7%99%BB%E5%BD%95/</url>
      
        <content type="html"><![CDATA[<p>首先生成秘钥</p><a id="more"></a><hr><h2 id="远程服务端"><a href="#远程服务端" class="headerlink" title="远程服务端"></a><b>远程服务端</b></h2><ul><li><strong>生成秘钥</strong></li></ul><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ssh-keygen</span><br></pre></td></tr></table></figure><p>中间会让输入命名、密码、地址，可以直接回车键过去</p><ul><li><strong>重命名公钥，配置权限</strong></li></ul><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">cd ~/.ssh</span><br><span class="line">mv id_rsa.pub authorized_keys</span><br><span class="line">chmod 600 authorized_keys   #修改公钥为只有属主有读写权限（安全考虑）</span><br><span class="line">chmod 700 ~/.ssh   #修改.SSH目录为只有属主有读、写、执行权限（安全考虑）</span><br></pre></td></tr></table></figure><ul><li><strong>重启ssh</strong></li></ul><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">/etc/init.d/ssh restart</span><br></pre></td></tr></table></figure><ul><li><strong>复制秘钥</strong></li></ul><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">vim id_rsa</span><br></pre></td></tr></table></figure><p>复制<code>id_rsa</code>的内容粘贴到客户端</p><h2 id="本地客户端"><a href="#本地客户端" class="headerlink" title="本地客户端"></a><b>本地客户端</b></h2><ul><li><strong>把服务端复制的秘钥保存到一个文件中, 文件名不要有后缀</strong></li></ul><p>例：保存文件为<code>~/.ssh/server_rsa</code></p><ul><li><strong>修改保存的秘钥权限</strong></li></ul><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">chmod 600 server_rsa</span><br></pre></td></tr></table></figure><p>到这一步就已经可以使用秘钥登录了，虽然有点麻烦</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ssh -p xx root@IP -i ~/.ssh/server_rsa</span><br></pre></td></tr></table></figure><ul><li><strong>修改<code>ssh</code>的<code>config</code>配置文件，简化ssh登录</strong></li></ul><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">vim ~/.ssh/config</span><br></pre></td></tr></table></figure><p>把下面的代码复制到config中<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">Host abc   # abc是自己命名的  </span><br><span class="line">HostName 服务器IP</span><br><span class="line">User 用户名</span><br><span class="line">Port 端口  # -p</span><br><span class="line">IdentityFile 保存的秘钥地址  # -i</span><br></pre></td></tr></table></figure></p><p>保存config文件，直接<code>ssh abc</code>就可以免密登录了</p><p>参考：<a href="https://segmentfault.com/a/1190000015362485" rel="external nofollow noopener noreferrer" target="_blank">https://segmentfault.com/a/1190000015362485</a></p>]]></content>
      
      
      <categories>
          
          <category> 项目部署 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 项目部署 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Django-日志</title>
      <link href="/2019/05/10/django-%E6%97%A5%E5%BF%97/"/>
      <url>/2019/05/10/django-%E6%97%A5%E5%BF%97/</url>
      
        <content type="html"><![CDATA[<p>Django的日志使用了python的logging模块，需要在settings中进行配置</p><a id="more"></a><hr><h3 id="logging模块"><a href="#logging模块" class="headerlink" title="logging模块"></a><b>logging模块</b></h3><p><em>logging模块由四部分组成</em></p><ul><li><strong>记录器</strong></li></ul><p>记录器配置具有日志级别。此日志级别描述了记录器将处理的消息的严重性。Python定义了以下日志级别：<br><strong>DEBUG：</strong> 用于调试目的的低级系统信息<br><strong>INFO：</strong> 一般系统信息<br><strong>WARNING：</strong> 描述已发生的小问题的信息。<br><strong>ERROR：</strong> 描述已发生的主要问题的信息。<br><strong>CRITICAL：</strong> 描述已发生的严重问题的信息</p><ul><li><strong>处理器</strong></li></ul><ol><li><p>处理器是确定记录器中每条消息发生情况的引擎。它描述了特定的日志记录行为，例如将消息写入屏幕，文件或网络套接字。</p></li><li><p>与记录器一样，处理器也具有日志级别。如果日志记录的日志级别未达到或超过处理程序的级别，则处理程序将忽略该消息。</p></li><li><p>记录器可以有多个处理器，每个处理器可以具有不同的日志级别。以这种方式，可以根据消息的重要性提供不同形式的通知。</p></li></ol><ul><li><strong>过滤器</strong></li></ul><ol><li><p>过滤器用于提供对日志记录从记录器传递到处理程序的附加控制。</p></li><li><p>默认情况下，将处理满足日志级别要求的任何日志消息。但是，通过安装筛选器，可以在日志记录过程中添加其他条件。例如，您可以安装仅允许ERROR发出来自特定源的消息的过滤器。</p></li><li><p>过滤器还可用于在发出之前修改日志记录。例如，如果满足一组特定条件，您可以编写一个过滤器，将ERROR日志记录降级 为WARNING记录。</p></li><li><p>过滤器可以安装在记录器或处理器上; 可以在链中使用多个过滤器来执行多个过滤操作。</p></li></ol><ul><li><strong>格式化程序</strong></li></ul><p>最终，日志记录需要呈现为文本。格式化程序描述该文本的确切格式。格式化程序通常由包含LogRecord属性的Python格式化字符串组成 ; 但是，也可以编写自定义格式化程序来实现特定的格式化行为。</p><h3 id="示例"><a href="#示例" class="headerlink" title="示例"></a><b>示例</b></h3><ul><li>配置</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br></pre></td><td class="code"><pre><span class="line">LOG_PATH = <span class="string">'xx/xx/'</span></span><br><span class="line">LOGGING = &#123;</span><br><span class="line">    <span class="string">'version'</span>: <span class="number">1</span>,   <span class="comment">#定义了配置文件的版本</span></span><br><span class="line">    <span class="string">'disable_existing_loggers'</span>: <span class="literal">False</span>,  <span class="comment">## True表示禁用logger</span></span><br><span class="line">    <span class="comment"># 格式化</span></span><br><span class="line">    <span class="string">'formatters'</span>: &#123;</span><br><span class="line">        <span class="string">'default'</span>: &#123;</span><br><span class="line">            <span class="string">'format'</span>: <span class="string">'%(levelname)s %(asctime)s %(module)s %(funcName)s %(msecs)s %(message)s'</span></span><br><span class="line">            &#125;,</span><br><span class="line">        <span class="string">'simple'</span>: &#123;</span><br><span class="line">            <span class="string">'format'</span>: <span class="string">'%(levelname)s %(message)s'</span></span><br><span class="line">            &#125;,</span><br><span class="line">        &#125;,</span><br><span class="line">     <span class="comment"># 处理日志的方式</span></span><br><span class="line">    <span class="string">'handlers'</span>: &#123;</span><br><span class="line">        <span class="string">'v_handlers'</span>: &#123;</span><br><span class="line">            <span class="comment"># 级别</span></span><br><span class="line">            <span class="string">'level'</span>: <span class="string">'DEBUG'</span>,</span><br><span class="line">            <span class="comment"># 存储方式</span></span><br><span class="line">            <span class="string">"class"</span>: <span class="string">'logging.handlers.RotatingFileHandler'</span>,</span><br><span class="line">            <span class="comment"># 日志文件大小</span></span><br><span class="line">            <span class="string">'maxBytes'</span>: <span class="number">5</span> * <span class="number">1024</span>,</span><br><span class="line">            <span class="string">'encoding'</span>: <span class="string">'utf8'</span>,</span><br><span class="line">            <span class="comment"># 日志文件路径</span></span><br><span class="line">            <span class="string">'filename'</span>: <span class="string">'&#123;&#125;salary_all.log'</span>.format(LOG_PATH),</span><br><span class="line">            <span class="comment"># 格式化方式</span></span><br><span class="line">            <span class="string">'formatter'</span>: <span class="string">'default'</span>,</span><br><span class="line">            &#125;,</span><br><span class="line">        <span class="string">'error'</span>: &#123;</span><br><span class="line">            <span class="string">'level'</span>: <span class="string">"ERROR"</span>,</span><br><span class="line">            <span class="string">'class'</span>: <span class="string">'logging.handlers.RotatingFileHandler'</span>,</span><br><span class="line">            <span class="string">'maxBytes'</span>: <span class="number">5</span> * <span class="number">1024</span>,</span><br><span class="line">            <span class="string">'encoding'</span>: <span class="string">'utf8'</span>,</span><br><span class="line">            <span class="string">'filename'</span>: <span class="string">'&#123;&#125;salary_error.log'</span>.format(LOG_PATH),</span><br><span class="line">            <span class="string">'formatter'</span>: <span class="string">'simple'</span></span><br><span class="line">            &#125;</span><br><span class="line">        &#125;,</span><br><span class="line">     <span class="comment"># 配置日志的处理方式</span></span><br><span class="line">    <span class="string">'loggers'</span>: &#123;</span><br><span class="line">        <span class="string">'django'</span>: &#123;</span><br><span class="line">            <span class="string">'handlers'</span>: [<span class="string">'v_handlers'</span>],</span><br><span class="line">            <span class="string">'propagate'</span>: <span class="literal">True</span>,</span><br><span class="line">            &#125;,</span><br><span class="line">        <span class="string">'django.request'</span>: &#123;</span><br><span class="line">            <span class="string">'handlers'</span>: [<span class="string">'error'</span>],</span><br><span class="line">            <span class="string">'level'</span>: <span class="string">'ERROR'</span>,</span><br><span class="line">            <span class="string">'propagate'</span>: <span class="literal">True</span></span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">        &#125;,</span><br><span class="line">     <span class="comment"># 过滤器</span></span><br><span class="line">    <span class="string">'filters'</span>: &#123;</span><br><span class="line"></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><ul><li><strong>format</strong></li></ul><table><thead><tr><th>format</th><th></th></tr></thead><tbody><tr><td><strong>%(levelno)s</strong></td><td>日志的级别数字形式</td></tr><tr><td><strong>%(levelname)s</strong></td><td>日志级别的名称</td></tr><tr><td><strong>%(pathname)s</strong></td><td>当前执行程序的路径</td></tr><tr><td><strong>%(filename)s</strong></td><td>当前执行程序名</td></tr><tr><td><strong>%(funcName)s</strong></td><td>当前的函数</td></tr><tr><td><strong>%(lineno)d</strong></td><td>记录日志的当前行号</td></tr><tr><td><strong>%(asctime)s</strong></td><td>日期时间</td></tr><tr><td><strong>%(msecs)s</strong></td><td>毫秒级的时间</td></tr><tr><td><strong>%(thread)d</strong></td><td>线程ID</td></tr><tr><td><strong>%(threadName)s</strong></td><td>线程名称</td></tr><tr><td><strong>%(process)d</strong></td><td>进程ID</td></tr><tr><td><strong>%(message)s</strong></td><td>记录的日志信息</td></tr></tbody></table>]]></content>
      
      
      <categories>
          
          <category> Python </category>
          
      </categories>
      
      
        <tags>
            
            <tag> python </tag>
            
            <tag> Django </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Django项目部署</title>
      <link href="/2019/05/09/django-%E9%83%A8%E7%BD%B2/"/>
      <url>/2019/05/09/django-%E9%83%A8%E7%BD%B2/</url>
      
        <content type="html"><![CDATA[<p>django == 1.11.16<br>nginx == 1.10.3</p><a id="more"></a><hr><h3 id="项目编写"><a href="#项目编写" class="headerlink" title="项目编写"></a><b>项目编写</b></h3><ul><li>略</li></ul><h3 id="安装nginx"><a href="#安装nginx" class="headerlink" title="安装nginx"></a><b>安装nginx</b></h3><ul><li>略(<a href="http://www.wxy.email/2019/01/26/nginx%E5%AE%89%E8%A3%85%E9%85%8D%E7%BD%AE/">之前有篇</a>有详细介绍)</li></ul><h3 id="配置uwsgi"><a href="#配置uwsgi" class="headerlink" title="配置uwsgi"></a><b>配置uwsgi</b></h3><ul><li>创建 xxx.ini 文件</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">[uwsgi]</span><br><span class="line">socket=:<span class="number">9000</span>     <span class="comment"># 端口</span></span><br><span class="line">chdir=/mnt/project/project_api   <span class="comment"># 项目路径 包含manage.py的路径</span></span><br><span class="line">module=pro.wsgi   <span class="comment">#pro为包含wsgi.py文件的文件名</span></span><br><span class="line">master=true</span><br><span class="line">processes=<span class="number">4</span></span><br><span class="line">vacuum=true</span><br></pre></td></tr></table></figure><h3 id="配置nginx"><a href="#配置nginx" class="headerlink" title="配置nginx"></a><b>配置nginx</b></h3><ul><li>打开/etc/nginx/nginx.conf文件http{}中添加一个server</li></ul><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">server &#123;</span><br><span class="line">    listen       80;</span><br><span class="line">    server_name  域名 或者 localhost; </span><br><span class="line">    charset UTF-8;</span><br><span class="line">    access_log  /var/log/nginx/djangohost.access.log;</span><br><span class="line">    error_log  /var/log/nginx/djangohost.error.log;</span><br><span class="line">    location / &#123;</span><br><span class="line">        include uwsgi_params;</span><br><span class="line">        uwsgi_pass 127.0.0.1:9000;</span><br><span class="line">        uwsgi_read_timeout 2;</span><br><span class="line">     &#125;</span><br><span class="line">    error_page   500 502 503 504  /50x.html;</span><br><span class="line">    location = /50x.html &#123;</span><br><span class="line">        root   html;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>重启nginx</li></ul><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">ps -ef | grep nginx</span><br><span class="line">kill -HUP  &lt; pid &gt;</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span> 或者使用 service</span><br><span class="line">service nginx restart</span><br></pre></td></tr></table></figure><ul><li>启动项目</li></ul><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">uwsgi --ini xxx.ini</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 项目部署 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> python </tag>
            
            <tag> 项目部署 </tag>
            
            <tag> Django </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>git钩子自动更新服务器代码</title>
      <link href="/2019/05/08/git%E9%92%A9%E5%AD%90/"/>
      <url>/2019/05/08/git%E9%92%A9%E5%AD%90/</url>
      
        <content type="html"><![CDATA[<p>手动提交好累的，自动部署才是王道</p><a id="more"></a><hr><h3 id="服务器端"><a href="#服务器端" class="headerlink" title="服务器端"></a><b>服务器端</b></h3><ul><li><strong>创建一个裸仓库</strong></li></ul><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">pwd   # /home/www/</span><br><span class="line">git init --bare  project_xxx.git</span><br><span class="line">cd project_xxx.git/hooks/</span><br><span class="line">cp post-update.sample post-update</span><br></pre></td></tr></table></figure><ul><li><strong>创建一个普通的仓库</strong> ，这一步就是为了明确表示一下仓库其实是有两个的，这个仓库才是代码的存储位置</li></ul><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">pwd   # /home/www/</span><br><span class="line">mkdir blog</span><br></pre></td></tr></table></figure><ul><li><strong>更改post-update中的内容为:</strong></li></ul><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span>!/bin/sh</span><br><span class="line">unset GIT_DIR </span><br><span class="line">DIR_ONE=/home/www/blog／  # 更新后的代码会存储在这个文件夹中，文件夹需要存在 </span><br><span class="line">cd $DIR_ONE</span><br><span class="line">git init</span><br><span class="line">git remote add gitee https://gitee.com/project.git  # 码云/GitHub代码仓库地址，如果不需要推到远程仓库，可以把这一步和最后的push去掉</span><br><span class="line">git remote add origin /home/www/project_xxx.git  # 路径指向裸仓库</span><br><span class="line">git reset --hard   # git clean -df</span><br><span class="line">git pull origin master</span><br><span class="line">git push gitee master # 把代码推到远程仓库</span><br></pre></td></tr></table></figure><ul><li><strong>配置git</strong>，因为用的是服务器，没有配置公钥，直接偷懒配置一下git的全局配置，<strong>不需要推到远程仓库可以省略这一步</strong></li></ul><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">git config --global user.name "name"</span><br><span class="line">git config --global user.email "email"</span><br><span class="line">git config --global credential.helper store</span><br></pre></td></tr></table></figure><p>然后使用git推一次代码，记录一下远程仓库的密码，脚本在推代码的时候就不需要再验证了</p><h3 id="客户端"><a href="#客户端" class="headerlink" title="客户端"></a><b>客户端</b></h3><ul><li><strong>进入项目目录</strong></li></ul><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">git init</span><br><span class="line">git remote add origin 服务器地址:/home/project_xxx.git   # 服务端创建的裸仓库的地址</span><br></pre></td></tr></table></figure><p>然后就可以在客户端进行操作了</p><p>参考: git book: <a href="https://git-scm.com/book/zh/v2/%E6%9C%8D%E5%8A%A1%E5%99%A8%E4%B8%8A%E7%9A%84-Git-%E5%9C%A8%E6%9C%8D%E5%8A%A1%E5%99%A8%E4%B8%8A%E6%90%AD%E5%BB%BA-Git" rel="external nofollow noopener noreferrer" target="_blank">服务器上的-Git-在服务器上搭建-Git</a><br><a href="a&gt;https://aotu.io/notes/2017/04/10/githooks/index.html">用 Git 钩子进行简单自动部署</a></p>]]></content>
      
      
      <categories>
          
          <category> 项目部署 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 项目部署 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>ab压力测试(入门)</title>
      <link href="/2019/05/07/ab%E5%8E%8B%E5%8A%9B%E6%B5%8B%E8%AF%95-%E5%85%A5%E9%97%A8/"/>
      <url>/2019/05/07/ab%E5%8E%8B%E5%8A%9B%E6%B5%8B%E8%AF%95-%E5%85%A5%E9%97%A8/</url>
      
        <content type="html"><![CDATA[<p>记录一下最近了解的压力测试工具 ab 全称: <a href="http://httpd.apache.org/docs/2.4/programs/ab.html" rel="external nofollow noopener noreferrer" target="_blank">apache bench</a></p><a id="more"></a><hr><ul><li>测试命令:<figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ab -c 1000 -n 100 -p data.txt -T application/json -H "token:xxx" -w "http://127.0.0.1/test/" &gt;&gt; test.html</span><br></pre></td></tr></table></figure></li></ul><blockquote><p>-c: 请求数量<br>-n: 请求并发量<br>-p: 请求参数文件<br>-T: Content-type<br>-H: 追加一个请求头<br>-w: 测试结果以html形式存储在test.html文件中, 不添加 -w 和 &gt;&gt; test.html 结果会打印在终端</p></blockquote><p> -p 的参数文件内的参数格式是由Content-type决定的</p><p>参考: <a href="http://httpd.apache.org/docs/2.4/programs/ab.html" rel="external nofollow noopener noreferrer" target="_blank">http://httpd.apache.org/docs/2.4/programs/ab.html</a></p>]]></content>
      
      
      <categories>
          
          <category> 项目部署 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> test </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Python处理excel合并单元格</title>
      <link href="/2019/05/06/python%E5%A4%84%E7%90%86%E5%90%88%E5%B9%B6%E5%8D%95%E5%85%83%E6%A0%BC/"/>
      <url>/2019/05/06/python%E5%A4%84%E7%90%86%E5%90%88%E5%B9%B6%E5%8D%95%E5%85%83%E6%A0%BC/</url>
      
        <content type="html"><![CDATA[<p>可以使用xlrd，也可以使用openpyxl，但是openpyxl读取不了.xls格式的Excel，需要转成xlsx，有点麻烦，所以使用了xlrd。</p><a id="more"></a><hr><h2 id="读取"><a href="#读取" class="headerlink" title="读取"></a><b>读取</b></h2><ul><li><em>打开文件</em></li></ul><p>xlrd也遇到了一点问题，文件如果是xls文件直接打开，在提取合并单元格的时候会拿不到数据，需要加上 formatting_info=True，formatting_info=True的时候打开.xlsx文件会报错NotImplementedError: formatting_info=True not yet implemented，加个if就好了<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">workbook = xlrd.open_workbook(path)</span><br><span class="line"><span class="keyword">if</span> path.split(<span class="string">'.xl'</span>)[<span class="number">1</span>] == <span class="string">'s'</span>:</span><br><span class="line">    workbook = xlrd.open_workbook(path, formatting_info=<span class="literal">True</span>)</span><br><span class="line"><span class="comment"># 获取sheet</span></span><br><span class="line">sheet = workbook.sheet_by_index(<span class="number">0</span>)</span><br></pre></td></tr></table></figure></p><ul><li><em>获取所有的合并单元格坐标</em></li></ul><p><img src="/2019/05/06/python处理合并单元格/excel.png" alt="突突突"><br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 获取列数</span></span><br><span class="line">r_num = sheet.nrows</span><br><span class="line"><span class="comment"># 获取行数</span></span><br><span class="line">c_num = sheet.ncols</span><br><span class="line">merge = sheet.merged_cells</span><br><span class="line">print(merge)   <span class="comment"># [(1, 5, 0, 1), (1, 5, 1, 2)], 对应上面两个合并的单元格</span></span><br></pre></td></tr></table></figure></p><ul><li><em>组装数据</em></li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">read_data =[]</span><br><span class="line"><span class="keyword">for</span> r <span class="keyword">in</span> range(r_num):</span><br><span class="line">    li = []</span><br><span class="line">    <span class="keyword">for</span> c <span class="keyword">in</span> range(c_num):</span><br><span class="line">        <span class="comment"># 读取每个单元格里的数据，合并单元格只有单元格内的第一行第一列有数据，其余空间都为空</span></span><br><span class="line">        cell_value = sheet.row_values(r)[c]</span><br><span class="line">        <span class="comment"># 判断空数据是否在合并单元格的坐标中，如果在就把数据填充进去</span></span><br><span class="line">        <span class="keyword">if</span> cell_value <span class="keyword">is</span> <span class="literal">None</span> <span class="keyword">or</span> cell_value == <span class="string">''</span>:</span><br><span class="line">            <span class="keyword">for</span> (rlow, rhigh, clow, chigh) <span class="keyword">in</span> merge:</span><br><span class="line">                <span class="keyword">if</span> rlow &lt;= r &lt; rhigh:</span><br><span class="line">                    <span class="keyword">if</span> clow &lt;= c &lt; chigh:</span><br><span class="line">                        cell_value = sheet.cell_value(rlow, clow)</span><br><span class="line">        li.append(cell_value)</span><br><span class="line">    read_data.append(li)</span><br></pre></td></tr></table></figure><h2 id="写入"><a href="#写入" class="headerlink" title="写入"></a><b>写入</b></h2><p>使用的是xlwt</p><ul><li><em>直接上代码</em></li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line">f = xlwt.Workbook()</span><br><span class="line">sheet1 = f.add_sheet(<span class="string">'sheet1'</span>, cell_overwrite_ok=<span class="literal">True</span>)</span><br><span class="line">headers = [<span class="string">'序号'</span>, <span class="string">"姓名"</span>, <span class="string">'列表'</span>, <span class="string">'1月'</span>, <span class="string">'2月'</span>, <span class="string">'3月'</span>, <span class="string">'4月'</span>, <span class="string">'5月'</span>]</span><br><span class="line">name = [<span class="string">'1-AAA'</span>, <span class="string">'2-BBB'</span>, <span class="string">'3-CCC'</span>, <span class="string">'4-DDD'</span>]</span><br><span class="line">status = [<span class="string">'累计应发数'</span>, <span class="string">'累计专项扣除-五险一金'</span>, <span class="string">'累计免税收入'</span>, <span class="string">'累计扣个税'</span>]</span><br><span class="line"><span class="comment"># 生成第一行header</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">0</span>,len(headers)):</span><br><span class="line">    sheet1.write(<span class="number">0</span>,i,headers[i])</span><br><span class="line"></span><br><span class="line"><span class="comment"># 生成序号、姓名单元格</span></span><br><span class="line">i, j = <span class="number">1</span>, <span class="number">0</span></span><br><span class="line"><span class="keyword">while</span> i &lt; <span class="number">10</span>*len(name) <span class="keyword">and</span> j &lt; len(name):</span><br><span class="line">    sheet1.write_merge(i,i+<span class="number">9</span>,<span class="number">0</span>,<span class="number">0</span>,name[j].split(<span class="string">'-'</span>)[<span class="number">0</span>])</span><br><span class="line">    sheet1.write_merge(i,i+<span class="number">9</span>,<span class="number">1</span>,<span class="number">1</span>,name[j].split(<span class="string">'-'</span>)[<span class="number">1</span>])</span><br><span class="line">    i += <span class="number">10</span></span><br><span class="line">    j += <span class="number">1</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#生成列表</span></span><br><span class="line">i = <span class="number">0</span></span><br><span class="line"><span class="keyword">while</span> i &lt; <span class="number">10</span>*len(column0):</span><br><span class="line">    <span class="keyword">for</span> j <span class="keyword">in</span> range(<span class="number">0</span>,len(status)):</span><br><span class="line">        sheet1.write(j+i+<span class="number">1</span>,<span class="number">3</span>,status[j])</span><br><span class="line">    i += <span class="number">10</span></span><br><span class="line"><span class="comment"># 保存</span></span><br><span class="line">f.save(path)</span><br></pre></td></tr></table></figure><h2 id="Django导出"><a href="#Django导出" class="headerlink" title="Django导出"></a><b>Django导出</b></h2><ul><li><em>服务端代码</em></li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">excel_stream = io.BytesIO()</span><br><span class="line"><span class="comment"># BytesIO流（在内存中读写）</span></span><br><span class="line">f.save(excel_stream)</span><br><span class="line">res = excel_stream.getvalue()</span><br><span class="line">excel_stream.close()</span><br><span class="line">response = HttpResponse(content_type=<span class="string">'application/vnd.ms-excel'</span>)</span><br><span class="line"><span class="keyword">from</span> urllib <span class="keyword">import</span> parse</span><br><span class="line">file_name = str(path.name).split(<span class="string">'.xls'</span>)[<span class="number">0</span>] + <span class="string">'(计算后).xls'</span></span><br><span class="line">response[<span class="string">'Content-Disposition'</span>] = <span class="string">'attachment;filename='</span> + parse.quote(file_name)</span><br><span class="line">response.write(res)</span><br><span class="line"><span class="keyword">return</span> response</span><br></pre></td></tr></table></figure><ul><li><em>前端</em></li></ul><p>写一个简单的form表单就行了</p>]]></content>
      
      
      <categories>
          
          <category> Python </category>
          
      </categories>
      
      
        <tags>
            
            <tag> python </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Linux服务器Nginx部署图片</title>
      <link href="/2019/05/05/Linux%E9%83%A8%E7%BD%B2%E5%9B%BE%E7%89%87/"/>
      <url>/2019/05/05/Linux%E9%83%A8%E7%BD%B2%E5%9B%BE%E7%89%87/</url>
      
        <content type="html"><![CDATA[<p>部署一个<a href="http://background.wxy.email/" rel="external nofollow noopener noreferrer" target="_blank">静态页面</a>做测试</p><a id="more"></a><hr><ul><li><strong>文件路径是这样的</strong></li></ul><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">.</span><br><span class="line">└── background</span><br><span class="line">    ├── images</span><br><span class="line">    │   ├── 1.jpg</span><br><span class="line">    │   ├── 2.jpg</span><br><span class="line">    │   └── 3.jpg</span><br><span class="line">    └── index.html</span><br></pre></td></tr></table></figure><ul><li><strong><code>index.html</code> 中的路径是这样的</strong></li></ul><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">style="background-image:url('/images/1.jpg')"</span><br></pre></td></tr></table></figure><ul><li><strong><code>/etc/nginx/nginx.conf</code> 是这样的</strong></li></ul><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">server &#123;</span><br><span class="line">        listen 80;</span><br><span class="line">        server_name background.wxy.email;    # 域名/ip</span><br><span class="line">        charset utf-8;</span><br><span class="line">        location / &#123;</span><br><span class="line">                root /home/www/background;  #  html存储路径</span><br><span class="line">                index index.html;     #  html名称</span><br><span class="line">        &#125;</span><br><span class="line">        location /images/ &#123;   </span><br><span class="line">                alias /home/www/background/images/;   # 图片存储路径</span><br><span class="line">                autoindex on;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><ul><li><strong>修改文件夹权限</strong></li></ul><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo chmod 777 -R /home/www/background/</span><br></pre></td></tr></table></figure><ul><li><strong>启动 / 重启nginx</strong></li></ul><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">sudo service nginx start  # 启动</span><br><span class="line">sudo service nginx reload  #重启</span><br></pre></td></tr></table></figure><ul><li><strong>浏览器中输入网址</strong></li><li><strong>参考项目：<a href="http://background.wxy.email/" rel="external nofollow noopener noreferrer" target="_blank">http://background.wxy.email/</a></strong></li></ul>]]></content>
      
      
      <categories>
          
          <category> 项目部署 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 项目部署 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Python之bisect模块, 有序列表插入数据</title>
      <link href="/2019/04/27/python-bisect/"/>
      <url>/2019/04/27/python-bisect/</url>
      
        <content type="html"><![CDATA[<p>bisect是python的内置模块, 可以使用它来插入数据, 并且插入的数据不会影响列表的排序, <strong>但是原有列表需要是有序的, 并且不能是倒序</strong>.</p><a id="more"></a><hr><ul><li>bisect.bisect(data, n), 查找并返回n插入的位置下标, 但并不会插入.</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">data = [<span class="number">1</span>, <span class="number">7</span>, <span class="number">3</span>, <span class="number">8</span>, <span class="number">5</span>]</span><br><span class="line">data.sort()   </span><br><span class="line">bisect.bisect(data, <span class="number">6</span>)    <span class="comment"># 返回 3</span></span><br></pre></td></tr></table></figure><ul><li>bisect.insort(data, n), 插入n, 不会影响列表顺序.</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">bisect.insort(data, <span class="number">6</span>)</span><br><span class="line">print(data)     <span class="comment"># [1, 3, 5, 6, 7, 8]</span></span><br></pre></td></tr></table></figure><ul><li>bisect.bisect_left()、bisect_right(), 这两个函数用来处理插入重复数值的情况，返回将会插入的位置.</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">data = [<span class="number">1</span>, <span class="number">3</span>, <span class="number">5</span>, <span class="number">6</span>, <span class="number">7</span>, <span class="number">8</span>]</span><br><span class="line">bisect.bisect_left(data, <span class="number">6</span>)   <span class="comment">#返回 3</span></span><br><span class="line">bisect.bisect_reght(data, <span class="number">6</span>)   <span class="comment">#返回 4</span></span><br></pre></td></tr></table></figure><ul><li>bisect.insort_left()、insort_right(), 对应bisect.bisect_left()、bisect_right(), 用来插入数据.</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">bisect.insort_left(data, <span class="number">6</span>)</span><br><span class="line">print(data)   <span class="comment">#返回 [1, 3, 5, 6, 6, 7, 8]  元素`5`后的`6`是新插入的数据</span></span><br><span class="line">bisect.insort_reght(data, <span class="number">6</span>)</span><br><span class="line">print(data)   <span class="comment">#返回 [1, 3, 5, 6, 6, 6, 7, 8] 元素`7`前的`6`是新插入的数据</span></span><br><span class="line"><span class="comment">#insort_left从左侧插入, insort_reght从右侧插入</span></span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> Python </category>
          
      </categories>
      
      
        <tags>
            
            <tag> python </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Python socket 实现服务端和客户端数据传输（TCP）</title>
      <link href="/2019/03/24/Python-socket/"/>
      <url>/2019/03/24/Python-socket/</url>
      
        <content type="html"><![CDATA[<p>TCP数据传输</p><a id="more"></a><hr><ul><li><strong>服务器端</strong></li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> socket</span><br><span class="line"></span><br><span class="line"><span class="comment">#创建一个socket对象</span></span><br><span class="line">socket_server = socket.socket(socket.AF_INET, socket.SOCK_STREAM)</span><br><span class="line">host = <span class="string">"127.0.0.1"</span></span><br><span class="line">port = <span class="number">9999</span></span><br><span class="line"><span class="comment">#绑定地址</span></span><br><span class="line">socket_server.bind((host, port))</span><br><span class="line"><span class="comment">#设置监听</span></span><br><span class="line">socket_server.listen(<span class="number">5</span>)</span><br><span class="line"><span class="comment"># socket_server.accept()返回一个元组, 元素1为客户端的socket对象, 元素2为客户端的地址(ip地址，端口号)</span></span><br><span class="line">client_socket, address = socket_server.accept()</span><br><span class="line"></span><br><span class="line"><span class="comment">#while循环是为了让对话持续</span></span><br><span class="line"><span class="keyword">while</span> <span class="literal">True</span>:</span><br><span class="line">    <span class="comment">#接收客户端的请求</span></span><br><span class="line">    recvmsg = client_socket.recv(<span class="number">1024</span>)</span><br><span class="line">    <span class="comment">#把接收到的数据进行解码</span></span><br><span class="line">    strData = recvmsg.decode(<span class="string">"utf-8"</span>)</span><br><span class="line">    <span class="comment">#设置退出条件</span></span><br><span class="line">    <span class="keyword">if</span> strData == <span class="string">'q'</span>:</span><br><span class="line">        <span class="keyword">break</span></span><br><span class="line">    print(<span class="string">"接收: %s"</span> % strData)</span><br><span class="line">    <span class="comment">#输入</span></span><br><span class="line">    msg = input(<span class="string">"发送: "</span>)</span><br><span class="line">    <span class="comment">#发送数据，需要进行编码</span></span><br><span class="line">    client_socket.send(msg.encode(<span class="string">"utf-8"</span>))</span><br><span class="line"><span class="comment">#关闭服务器端</span></span><br><span class="line">socket_server.close()</span><br></pre></td></tr></table></figure><ul><li><strong>客户端</strong></li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> socket</span><br><span class="line"><span class="comment">#创建一个socket对象</span></span><br><span class="line">client = socket.socket(socket.AF_INET, socket.SOCK_STREAM)</span><br><span class="line"></span><br><span class="line">host = <span class="string">"127.0.0.1"</span></span><br><span class="line">port = <span class="number">9999</span></span><br><span class="line"><span class="comment">#连接服务端</span></span><br><span class="line">client.connect((host, port))</span><br><span class="line"></span><br><span class="line"><span class="keyword">while</span> <span class="literal">True</span>:</span><br><span class="line">    send_msg = input(<span class="string">"发送: "</span>)</span><br><span class="line">    <span class="comment">#设置退出条件</span></span><br><span class="line">    <span class="keyword">if</span> send_msg == <span class="string">"q"</span>:</span><br><span class="line">        <span class="keyword">break</span></span><br><span class="line">    send_msg = send_msg</span><br><span class="line">    <span class="comment">#发送数据，编码</span></span><br><span class="line">    client.send(send_msg.encode(<span class="string">"utf-8"</span>))</span><br><span class="line">    <span class="comment">#接收服务端返回的数据</span></span><br><span class="line">    msg = client.recv(<span class="number">1024</span>)</span><br><span class="line">    <span class="comment">#解码</span></span><br><span class="line">    print(<span class="string">"接收：%s"</span>, % msg.decode(<span class="string">"utf-8"</span>))</span><br><span class="line"><span class="comment">#关闭客户端</span></span><br><span class="line">client.close()</span><br></pre></td></tr></table></figure><ul><li><strong>流程图</strong></li></ul><p><img src="/2019/03/24/Python-socket/1.png" alt="在这里插入图片描述"><br>图片来源：<a href="https://blog.csdn.net/slavik_/article/details/82430717" rel="external nofollow noopener noreferrer" target="_blank">https://blog.csdn.net/slavik_/article/details/82430717</a></p>]]></content>
      
      
      <categories>
          
          <category> Python </category>
          
      </categories>
      
      
        <tags>
            
            <tag> python </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>nginx的安装和配置</title>
      <link href="/2019/01/26/nginx%E5%AE%89%E8%A3%85%E9%85%8D%E7%BD%AE/"/>
      <url>/2019/01/26/nginx%E5%AE%89%E8%A3%85%E9%85%8D%E7%BD%AE/</url>
      
        <content type="html"><![CDATA[<p>仅供参考, 不同系统操作可能会不一样, 中间遇到错误, 找一下错误原因, 一般是单词”error“后的一句, 复制, 百度, vim操作下面有注释</p><a id="more"></a><hr><h3 id="安装nginx"><a href="#安装nginx" class="headerlink" title="安装nginx"></a><b>安装nginx</b></h3><ul><li><strong>方法一</strong>：这个是最简单的方法，但是很有可能会失败，这里搞定了就能直接去配置nginx了</li></ul><table><thead><tr><th>说明</th><th>命令</th></tr></thead><tbody><tr><td>1.安装g++a</td><td><code>sudo apt-get install g++</code></td></tr><tr><td>2.使用apt直接安装</td><td><code>sudo apt-get install nginx</code></td></tr><tr><td>3.启动</td><td><code>service nginx start</code></td></tr></tbody></table><ul><li><strong>方法二</strong></li></ul><ol><li><p><strong>下载nginx及相关组件输入 :</strong> </p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">cd  /usr/local/src/ </span><br><span class="line">wget http://nginx.org/download/nginx-1.10.2.tar.gz</span><br><span class="line">wget http://www.openssl.org/source/openssl-fips-2.0.10.tar.gz</span><br><span class="line">wget http://zlib.net/zlib-1.2.11.tar.gz</span><br><span class="line">wget ftp://ftp.csx.cam.ac.uk/pub/software/programming/pcre/pcre-8.40.tar.gz</span><br></pre></td></tr></table></figure></li><li><p><strong>安装c++编译环境</strong></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">yum install gcc-c++  或者  apt-get install g++   </span><br><span class="line">中间需要确认一次, 输入: y</span><br></pre></td></tr></table></figure></li><li><p><strong>安装nginx及相关组件</strong><br>安装openssl: </p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">tar zxvf openssl-fips-2.0.10.tar.gz</span><br><span class="line">cd openssl-fips-2.0.10</span><br><span class="line">./config &amp;&amp; make &amp;&amp; make install</span><br><span class="line">cd /usr/local/src/  或者   cd ..   回到src文件夹中</span><br></pre></td></tr></table></figure><p>安装pcre: tar zxvf pcre-8.40.tar.gz</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">cd pcre-8.40</span><br><span class="line">./configure &amp;&amp; make &amp;&amp; make install</span><br><span class="line">cd /usr/local/src/ 或者  cd ..   回到src文件夹中</span><br></pre></td></tr></table></figure><p>安装zlib: tar zxvf zlib-1.2.11.tar.gz</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">cd zlib-1.2.11</span><br><span class="line">./configure &amp;&amp; make &amp;&amp; make install</span><br><span class="line">cd /usr/local/src/ 或者  cd ..   回到src文件夹中</span><br></pre></td></tr></table></figure><p>安装nginx : tar zxvf nginx-1.10.2.tar.gz</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">cd nginx-1.10.2</span><br><span class="line">./configure &amp;&amp; make &amp;&amp; make install</span><br></pre></td></tr></table></figure></li></ol><h3 id="启动-nginx"><a href="#启动-nginx" class="headerlink" title="启动 nginx"></a><b>启动 nginx</b></h3><ul><li>先找到nginx的安装位置, 输入:</li></ul><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">whereis nginx    # 得到路径 例如: /usr/local/nginx</span><br></pre></td></tr></table></figure><ul><li>进入得到的路径:</li></ul><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">cd /usr/local/nginx</span><br></pre></td></tr></table></figure><ul><li>启动:</li></ul><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">/usr/local/nginx/sbin/nginx</span><br><span class="line">或者  </span><br><span class="line">cd  /usr/local/nginx/sbin/  输入: nginx 或 ./nginx</span><br></pre></td></tr></table></figure><ul><li>查看启动状态:</li></ul><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ps -aux | grep nginx    # 出现三条记录就表示已经启动成功</span><br></pre></td></tr></table></figure><ul><li>如果启动成功, 不改配置文件打开自己的域名也能看到一个默认页面, 说明域名已经绑定成功​​<br><img src="/2019/01/26/nginx安装配置/n-welcome.png" alt="突突突"></li></ul><h3 id="配置nginx"><a href="#配置nginx" class="headerlink" title="配置nginx"></a><b>配置nginx</b></h3><ul><li>进入nginx配置文件夹</li></ul><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">whereis nginx    # 得到路径 例如: /usr/local/nginx</span><br><span class="line">cd /usr/local/nginx</span><br></pre></td></tr></table></figure><ul><li>打开配置文件</li></ul><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">vim nginx.conf</span><br></pre></td></tr></table></figure><ul><li>​​找到如图所示的地方, 位置和文件名称改为自己需要展示的网页<br><img src="/2019/01/26/nginx安装配置/n-config.png" alt="突突突"></li></ul><h3 id="注释"><a href="#注释" class="headerlink" title="注释"></a><b>注释</b></h3><ul><li>nginx操作命令:</li></ul><ol><li><p>启动</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">/usr/local/nginx/sbin/nginx</span><br></pre></td></tr></table></figure></li><li><p>停止/重启</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">/usr/local/nginx/sbin/nginx -s stop(quit、reload)</span><br></pre></td></tr></table></figure></li><li><p>命令帮助</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">/usr/local/nginx/sbin/nginx -h</span><br></pre></td></tr></table></figure></li><li><p>验证配置文件</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">/usr/local/nginx/sbin/nginx -t</span><br></pre></td></tr></table></figure></li><li><p>配置文件</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">vim /usr/local/nginx/conf/nginx.conf</span><br></pre></td></tr></table></figure></li><li><p>vim简单操作命令: 深入了解百度<br>  开启编辑：按“i”或者“Insert”键<br>  退出编辑：“Esc”键<br>  退出vim：“:q”<br>  保存vim：“:w”<br>  保存退出vim：“:wq”<br>  不保存退出vim：“:q!”</p></li><li><p>查看当前系统版本, 输入: </p> <figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">cat /etc/redhat-release 或 : lsb_release -a</span><br></pre></td></tr></table></figure></li></ol><p>参考: <a href="https://www.cnblogs.com/taiyonghai/p/6728707.html" rel="external nofollow noopener noreferrer" target="_blank">https://www.cnblogs.com/taiyonghai/p/6728707.html</a></p>]]></content>
      
      
      <categories>
          
          <category> 项目部署 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 项目部署 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Python os文件操作</title>
      <link href="/2018/12/25/Python-os%E6%96%87%E4%BB%B6%E6%93%8D%E4%BD%9C/"/>
      <url>/2018/12/25/Python-os%E6%96%87%E4%BB%B6%E6%93%8D%E4%BD%9C/</url>
      
        <content type="html"><![CDATA[<ul><li>直接上代码<a id="more"></a></li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> os</span><br><span class="line"><span class="keyword">import</span> shutil</span><br><span class="line">filePath = <span class="string">'/xxx/'</span></span><br><span class="line">newPath = <span class="string">'/yyy/'</span></span><br><span class="line"><span class="comment"># 创建文件夹</span></span><br><span class="line">os.mkdir(path)</span><br><span class="line"><span class="comment"># os.listdir(filePath) 获取文件夹目录</span></span><br><span class="line"><span class="keyword">for</span> filename <span class="keyword">in</span> os.listdir(filePath):</span><br><span class="line">    <span class="comment"># 获取文件创建时间，两种方式结果相同</span></span><br><span class="line">    t = os.stat(filePath+<span class="string">"/"</span>+filename).st_ctime</span><br><span class="line">    t2 = os.path.getctime(filePath+<span class="string">"/"</span>+filename)</span><br><span class="line">    <span class="comment"># 获取文件访问时间</span></span><br><span class="line">    t3 = os.path.getatime(filePath+<span class="string">"/"</span>+filename)</span><br><span class="line">    t4 = os.stat(filePath+<span class="string">"/"</span>+filename).st_atime</span><br><span class="line">    <span class="comment"># 获取文件修改时间</span></span><br><span class="line">    t5 = os.path.getmtime(filePath+<span class="string">"/"</span>+filename)</span><br><span class="line">    t6 = os.stat(filePath+<span class="string">"/"</span>+filename).st_mtime</span><br><span class="line">    <span class="comment"># 获取文件大小，单位byte</span></span><br><span class="line">    t7 = os.path.getsize(filePath+<span class="string">"/"</span>+filename)</span><br><span class="line">    t8 = os.stat(filePath+<span class="string">"/"</span>+filename).st_size</span><br><span class="line">    <span class="comment"># 复制文件</span></span><br><span class="line">    shutil.copyfile(filePath, newPath)</span><br><span class="line">    <span class="comment"># 复制文件夹，newPath必须不存在</span></span><br><span class="line">    shutil.copytree(filePath,newPath)</span><br><span class="line">    <span class="comment"># 移动文件/文件夹</span></span><br><span class="line">    shutil.move(filePath, newPath)</span><br><span class="line">    <span class="comment"># 重命名文件/文件夹</span></span><br><span class="line">    os.rename(filePath,newPath)</span><br><span class="line">    <span class="comment"># 删除文件，不能删除文件夹</span></span><br><span class="line">    os.remove(filePath+<span class="string">"/"</span>+filename)</span><br><span class="line"><span class="comment"># 删除文件夹，只能删除空的文件夹</span></span><br><span class="line">os.rmdir(filePath)</span><br><span class="line"><span class="comment"># 删除文件夹，空的、非空的文件夹都能删除</span></span><br><span class="line">shutil.rmtree(filePath)</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> Python </category>
          
      </categories>
      
      
        <tags>
            
            <tag> python </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Git本地项目上传到远程仓库</title>
      <link href="/2018/09/09/git-init/"/>
      <url>/2018/09/09/git-init/</url>
      
        <content type="html"><![CDATA[<p>Git的使用</p><a id="more"></a><hr><ul><li>进入项目首目录</li></ul><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">git init   #初始化仓库</span><br><span class="line">git add .  </span><br><span class="line">git commit -m "提交"   # 提交代码</span><br><span class="line">git remote add xxx git@仓库地址</span><br></pre></td></tr></table></figure><ul><li>复制自己的公钥，添加到远程仓库</li><li>push代码    </li></ul><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">git push xxx master</span><br><span class="line">或者是</span><br><span class="line">git push -f xxx master</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 项目部署 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 项目部署 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Python栈的简单实现</title>
      <link href="/2018/08/10/python%E6%A0%88%E7%9A%84%E7%AE%80%E5%8D%95%E5%AE%9E%E7%8E%B0/"/>
      <url>/2018/08/10/python%E6%A0%88%E7%9A%84%E7%AE%80%E5%8D%95%E5%AE%9E%E7%8E%B0/</url>
      
        <content type="html"><![CDATA[<p>栈(stacks)是一种数据结构，是一种只能在一端进行插入和删除操作的特殊线性表, 它按照先进后出的原则存储数据(Last In First Out - LIFO)。</p><a id="more"></a><hr><ul><li><strong>代码(使用list):</strong></li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Stack</span><span class="params">(object)</span>:</span></span><br><span class="line">    <span class="comment"># 初始化</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self)</span>:</span></span><br><span class="line">        self.items = []</span><br><span class="line">    <span class="comment"># 判断是否为空</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">is_empty</span><span class="params">(self)</span>:</span></span><br><span class="line">        <span class="keyword">return</span> self.items == []</span><br><span class="line">    <span class="comment"># 返回栈顶元素</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">peek</span><span class="params">(self)</span>:</span></span><br><span class="line">        <span class="keyword">if</span> self.is_empty():</span><br><span class="line">            <span class="keyword">raise</span> KeyError(<span class="string">"stack is None"</span>)</span><br><span class="line">        <span class="keyword">return</span> self.items[len(self.items) - <span class="number">1</span>]</span><br><span class="line">    <span class="comment">#返回栈的大小</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">size</span><span class="params">(self)</span>:</span></span><br><span class="line">        <span class="keyword">return</span> len(self.items)</span><br><span class="line">    <span class="comment"># 入栈，把新的元素放进栈里</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">push</span><span class="params">(self, item)</span>:</span></span><br><span class="line">        self.items.append(item)</span><br><span class="line">    <span class="comment"># 出栈，把栈顶元素丢出去</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">pop</span><span class="params">(self)</span>:</span></span><br><span class="line">        <span class="keyword">if</span> self.is_empty():</span><br><span class="line">            <span class="keyword">raise</span> KeyError(<span class="string">"stack is None"</span>)</span><br><span class="line">        <span class="keyword">return</span> self.items.pop()</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">'__main__'</span> :</span><br><span class="line">    a_stack = Stack()</span><br><span class="line">    <span class="comment"># 插入元素</span></span><br><span class="line">    a_stack.push(<span class="string">'一'</span>)</span><br><span class="line">    a_stack.push(<span class="string">'二'</span>)</span><br><span class="line">    a_stack.push(<span class="string">'三'</span>)</span><br><span class="line">    </span><br><span class="line">    print(a_stack.size())    <span class="comment"># 3</span></span><br><span class="line">    print(a_stack.peek())    <span class="comment"># 三</span></span><br><span class="line">    print(a_stack.pop())     <span class="comment"># 三</span></span><br><span class="line">    print(a_stack.peek())    <span class="comment"># 二</span></span><br><span class="line">    print(a_stack.size())    <span class="comment"># 2</span></span><br><span class="line">    print(a_stack.is_empty())  <span class="comment"># False</span></span><br><span class="line">    a_stack.__init__()</span><br><span class="line">    print(a_stack.is_empty())  <span class="comment"># True</span></span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> Python </category>
          
      </categories>
      
      
        <tags>
            
            <tag> python </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Python的内存管理机制</title>
      <link href="/2018/07/23/python%E7%9A%84%E5%86%85%E5%AD%98%E7%AE%A1%E7%90%86%E6%9C%BA%E5%88%B6/"/>
      <url>/2018/07/23/python%E7%9A%84%E5%86%85%E5%AD%98%E7%AE%A1%E7%90%86%E6%9C%BA%E5%88%B6/</url>
      
        <content type="html"><![CDATA[<p><strong>Python 默认内存处理机制为GC(垃圾回收)</strong></p><a id="more"></a><hr><h3 id="内存泄漏"><a href="#内存泄漏" class="headerlink" title="内存泄漏"></a><b><strong>内存泄漏</strong></b></h3><p><b>指由于疏忽或错误造成程序未能释放已经不再使用的内存的情况。</b></p><ul><li>内存泄漏并非指内存在物理上的消失，而是应用程序分配某段内存后, 由于设计错误, 失去了对该段内存的控制, 因而造成了内存的浪费, 导致程序运行速度减慢甚至系统崩溃等严重后果。有 <code>__del__()</code> 函数的对象间的循环引用是导致内存泄漏的主凶。</li><li>不使用一个对象时使用: del object 来删除一个对象的引用计数就可以有效防止内存泄漏问题。<br>通过 Python 扩展模块 gc 来查看不能回收的对象的详细信息, 也可以通过 sys.getrefcount(obj) 来获取对象的引用计数, 并根据返回值是否为 <code>0</code> 来判断是否内存泄漏。<h3 id="内存管理机制"><a href="#内存管理机制" class="headerlink" title="内存管理机制"></a><b><strong>内存管理机制</strong></b></h3>一. <strong>引用计数</strong><br>通过引用计数来保持对内存中的变量跟踪Python内部记录中所有在使用对象各有多少个引用。<br>Python中有个内部跟踪变量叫做引用计数器, 每个变量有多少个引用, 简称引用计数。当对象被创建时就创建了一个引用计数。当某个对象的引用计数为0时, 对象就不在需要, 就列入了垃圾回收队列。<br>二. <strong>垃圾回收</strong></li><li><strong><em>引用计数</em></strong>：每个对象中都有ob-refcnt来做引用计数。当一个对象被引用, ob-refcnt就会增加, 当引用的对象删除, 那么ob-refcnt就会减少, 当ob-refcnt为零, 就会释放该对象的内存空间。</li><li><strong><em>标记清除</em></strong>：解决循环引用的问题。先按需分配, 等到没有空闲内存的时候, 从寄存器和程序栈上的引用出发, 遍历所有对象和引用把所有能访问的打标记, 最后将没有标记的对象释放掉。</li><li><strong><em>分代技术</em></strong>：提高效率, 提高垃圾回收的效率, 按照存活时间, 分成不同的集合。将内存块按照其存活时间划分为不同的集合。每个集合就称为一个“代”, 垃圾回收的频率随代的存活时间增大而减小。Python默认定义分代对象集合, 引用数越大, 对象的存活时间越长。</li></ul><p>三. <strong>内存池机制</strong></p><ul><li>在Python中, 大多数申请的都是小块的内存, 会执行大量的malloc和free操作。Python引入了一个内存池机制, 用于管理对小块内存的申请和释放, 即Pymalloc机制。它将不用的内存放到内存池而不是返回给操作系统。</li><li>当申请的内存小于256字节时, PyObject_Malloc会在内存池中申请内存; 当申请的内存大于256字节时, PyObject_Malloc的行为将蜕化为malloc的行为。当然, 通过修改Python源代码, 我们可以改变这个默认值, 从而改变Python的默认内存管理行为。</li><li>对于Python对象, 如整数, 浮点数和List, 都有其独立的私有内存池, 对象间不共享他们的内存池。也就是说如果你分配又释放了大量的整数, 用于缓存这些整数的内存就不能再分配给浮点数。</li></ul>]]></content>
      
      
      <categories>
          
          <category> Python </category>
          
      </categories>
      
      
        <tags>
            
            <tag> python </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Python简单操作txt文件</title>
      <link href="/2018/07/20/python%E7%AE%80%E5%8D%95%E6%93%8D%E4%BD%9C%E6%96%87%E4%BB%B6/"/>
      <url>/2018/07/20/python%E7%AE%80%E5%8D%95%E6%93%8D%E4%BD%9C%E6%96%87%E4%BB%B6/</url>
      
        <content type="html"><![CDATA[<p>还是以最简单的例子开始，先来操作txt文件吧</p><a id="more"></a><hr><h3 id="打开文件"><a href="#打开文件" class="headerlink" title="打开文件"></a><b>打开文件</b></h3><ul><li><b>使用open()打开文件</b></li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">f = open(<span class="string">"xxx.txt"</span>, <span class="string">"w+"</span>)</span><br></pre></td></tr></table></figure><ul><li><b>打开模式  </b></li></ul><p>r: 只能读, 若文件不存在报错<br>r+: 可读可写, 若文件不存在报错, 如果写入会覆盖源文件<br>w: 只能写, 若文件不存在创建, 写入会覆盖源文件<br>w+: 可读可写, 若文件不存在创建, 写入会覆盖源文件<br>a: 只能写, 若文件不存在创建, 追加写入<br>a+: 可读可写, 若文件不存在创建, 追加写入</p><h3 id="编辑文件"><a href="#编辑文件" class="headerlink" title="编辑文件"></a><b>编辑文件</b></h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">f.read()               <span class="comment"># 读取整个文件</span></span><br><span class="line">f.read(n)              <span class="comment"># 每次读取n个字节, 指针向后移动</span></span><br><span class="line">f.readline()           <span class="comment"># 每次读取一行, 指针向后移动</span></span><br><span class="line">f.readlines()          <span class="comment"># 读取整个文件, 把文件以行分割, 放入一个列表中</span></span><br><span class="line">f.write(<span class="string">"写入数据\n"</span>)   <span class="comment"># \n表示换行</span></span><br></pre></td></tr></table></figure><p><b>注意:</b> 文件的大小不能确定的时候最好不要使用read()和readlines()直接读取, 当文件过大时会时程序崩溃, 可以使用read(n)指定每次读取的字节数.</p><h3 id="关闭文件"><a href="#关闭文件" class="headerlink" title="关闭文件"></a><b>关闭文件</b></h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">f.close()</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> Python </category>
          
      </categories>
      
      
        <tags>
            
            <tag> python </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>hexo部署</title>
      <link href="/2018/06/29/hexo%E9%83%A8%E7%BD%B2/"/>
      <url>/2018/06/29/hexo%E9%83%A8%E7%BD%B2/</url>
      
        <content type="html"><![CDATA[<p>本地搭建完成只是一个开始，想要真正的用起来当然少不了部署了。</p><a id="more"></a><hr><h3 id="部署到服务器"><a href="#部署到服务器" class="headerlink" title="部署到服务器"></a><strong>部署到服务器</strong></h3><ul><li>安装<a href="https://github.com/hexojs/hexo-deployer-git" rel="external nofollow noopener noreferrer" target="_blank">hexo-deployer-git</a></li></ul><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install hexo-deployer-git --save</span><br></pre></td></tr></table></figure><ul><li>修改_config.yml配置</li></ul><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">deploy:</span></span><br><span class="line"><span class="attr">  type:</span> <span class="string">git</span></span><br><span class="line"><span class="attr">  repo:</span> <span class="string">仓库地址</span> <span class="string">repository</span></span><br><span class="line"><span class="attr">  branch:</span> <span class="string">分支</span></span><br><span class="line"><span class="attr">  message:</span> <span class="string">提交信息</span></span><br></pre></td></tr></table></figure><ul><li>生成站点文件并推送至远程库。</li></ul><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">hexo clean &amp;&amp; hexo deploy</span><br></pre></td></tr></table></figure><p>前者清除站点文件，后者重新生成站点文件并将之推送到指定的库分支。</p><h3 id="配置nginx"><a href="#配置nginx" class="headerlink" title="配置nginx"></a><strong>配置nginx</strong></h3><ul><li>打开nginx配置文件，新增一个server</li></ul><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">server &#123;</span><br><span class="line">     listen 80;</span><br><span class="line">     server_name www.wxy.email;   域名</span><br><span class="line">     charset utf-8;</span><br><span class="line">     location / &#123;</span><br><span class="line">             root /home/blog;   服务器上的代码目录路径</span><br><span class="line">             index index.html;</span><br><span class="line">     &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>重启nginx</li></ul><figure class="highlight plain"><figcaption><span>shell</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">service nginx reload</span><br></pre></td></tr></table></figure><ul><li>这样就OK了，简单到意外…</li></ul>]]></content>
      
      
      <categories>
          
          <category> 项目部署 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 项目部署 </tag>
            
            <tag> hexo </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>先写第一篇：hexo快速入门</title>
      <link href="/2018/06/19/hello-world/"/>
      <url>/2018/06/19/hello-world/</url>
      
        <content type="html"><![CDATA[<p>之前朋友介绍了hexo，但是当时没有想着写博客就没有看，这几天又忽然想起来了，用了一下试试，真的挺不错的，简单实用。</p><a id="more"></a><hr><h3 id="首先需要配置环境"><a href="#首先需要配置环境" class="headerlink" title="首先需要配置环境"></a>首先需要配置环境</h3><ul><li>安装git和Node.js</li></ul><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">sudo apt-get install git-core</span><br><span class="line">wget -qO- https://raw.github.com/creationix/nvm/v0.33.11/install.sh | sh</span><br><span class="line">nvm install stable</span><br></pre></td></tr></table></figure><ul><li>安装hexo</li></ul><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install -g hexo-cli</span><br></pre></td></tr></table></figure><h3 id="开始使用"><a href="#开始使用" class="headerlink" title="开始使用"></a>开始使用</h3><ul><li>新建文件夹</li></ul><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">hexo init 文件名</span><br><span class="line">cd 文件名</span><br><span class="line">npm install</span><br></pre></td></tr></table></figure><ul><li>配置类的文件大部分在<code>_config.yml</code>中</li></ul><ul><li>写一篇新文章，并启动<figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">hexo new "写一篇新文章"</span><br><span class="line">hexo server      # 启动</span><br></pre></td></tr></table></figure></li></ul><ul><li>访问<a href="http://localhost:4000/" rel="external nofollow noopener noreferrer" target="_blank">http://localhost:4000/</a>就可以了</li></ul><h3 id="这只是一个快速入门，具体功能请看官网"><a href="#这只是一个快速入门，具体功能请看官网" class="headerlink" title="这只是一个快速入门，具体功能请看官网"></a>这只是一个快速入门，具体功能请看<a href="https://hexo.io/zh-cn/docs/" rel="external nofollow noopener noreferrer" target="_blank">官网</a></h3>]]></content>
      
      
      
        <tags>
            
            <tag> hexo </tag>
            
        </tags>
      
    </entry>
    
    
  
  
    
    
    <entry>
      <title>分类</title>
      <link href="/categories/index.html"/>
      <url>/categories/index.html</url>
      
        <content type="html"><![CDATA[]]></content>
      
    </entry>
    
    
  
</search>
